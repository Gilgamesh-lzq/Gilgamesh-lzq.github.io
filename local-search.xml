<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>视频相关批量处理</title>
    <link href="/blog/55546594429b/"/>
    <url>/blog/55546594429b/</url>
    
    <content type="html"><![CDATA[<h1 align="center">视频相关批量处理</h1><h2 id="1-字幕繁简转换"><a href="#1-字幕繁简转换" class="headerlink" title="1.字幕繁简转换"></a>1.字幕繁简转换</h2><p>看剧偶尔遇到Netflix只提供了繁体字幕的情况，记录一下使用python批量转换为简体。</p><p>使用<code>zhconv</code>库的<code>convert</code>方法。有以下可供选择：</p><ul><li><p><code>zh-cn</code> 大陆简体</p></li><li><p><code>zh-sg</code> 马新简体（马来西亚和新加坡使用的简体汉字）</p></li><li><code>zh-tw</code> 台灣正體（台湾正体）</li><li><code>zh-hk</code> 香港繁體（香港繁体）</li><li><code>zh-hans</code> 简体</li><li><code>zh-hant</code> 繁體（繁体）</li></ul><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> zhconv <span class="hljs-keyword">import</span> convert<br><br>lines = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;1.srt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>).readlines()<br>lines = [convert(line, <span class="hljs-string">&quot;zh-cn&quot;</span>) <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines]<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;2.srt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    f.writelines(lines)<br></code></pre></td></tr></table></figure><h2 id="2-字幕翻译"><a href="#2-字幕翻译" class="headerlink" title="2.字幕翻译"></a>2.字幕翻译</h2><p>网易见外平台、飞书妙记等平台都提供了翻译字幕的功能，但是需要人工一个个上传，大批量操作不方便。可以使用百度翻译接口，注册开发者账号实名认证后每月有100万字符免费使用额度，足够正常使用。</p><p>参照官网给出的接口手册，接口python代码如下。需要<code>requests</code>、<code>random</code>、<code>hashlib</code>、<code>json</code>库。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">trans</span>(<span class="hljs-params">q: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>    url = <span class="hljs-string">&#x27;http://api.fanyi.baidu.com/api/trans/vip/translate&#x27;</span><br><br>    _q = q.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)  <span class="hljs-comment"># 手册要求使用utf-8编码</span><br>    _<span class="hljs-keyword">from</span> = <span class="hljs-string">&#x27;auto&#x27;</span><br>    _to = <span class="hljs-string">&#x27;en&#x27;</span>  <span class="hljs-comment"># 你要转换成的语言</span><br>    _appid = <span class="hljs-string">&#x27;你的百度开发者账号&#x27;</span><br>    _salt = <span class="hljs-built_in">str</span>(random.randint(<span class="hljs-number">123456789</span>, <span class="hljs-number">999999999</span>))  <span class="hljs-comment"># 为了密钥安全必须加盐</span><br>    _sign = hashlib.md5((_appid + q + _salt + <span class="hljs-string">&#x27;你的百度开发者密钥&#x27;</span>).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).hexdigest()<br><br>    params = &#123;<br>        <span class="hljs-string">&#x27;q&#x27;</span>: _q,<br>        <span class="hljs-string">&#x27;from&#x27;</span>: _<span class="hljs-keyword">from</span>,<br>        <span class="hljs-string">&#x27;to&#x27;</span>: _to,<br>        <span class="hljs-string">&#x27;appid&#x27;</span>: _appid,<br>        <span class="hljs-string">&#x27;salt&#x27;</span>: _salt,<br>        <span class="hljs-string">&#x27;sign&#x27;</span>: _sign<br>    &#125;<br><br>    response = requests.get(url=url, params=params).content<br>    english = json.loads(response)<br>    <span class="hljs-keyword">return</span> english[<span class="hljs-string">&#x27;trans_result&#x27;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;dst&#x27;</span>]<br></code></pre></td></tr></table></figure><h2 id="3-统计所有视频总时长"><a href="#3-统计所有视频总时长" class="headerlink" title="3.统计所有视频总时长"></a>3.统计所有视频总时长</h2><p>有时整个文件夹下载下来，文件夹套文件夹，结构很复杂，不知道哪年内能看完。这时候，可以用<code>ffprobe</code>统计视频总时长。需要电脑中安装<code>ffprobe</code>并添加到环境变量（安装过ffmpeg一般会自动安装此依赖项）。</p><p>注意到有些视频文件<strong>元数据受损</strong>（尤其是HLS流爬虫下载下来的视频），使用任何方法直接读取视频时长都会<strong>报错</strong>。使用<code>try...catch...</code>语法直接忽略。</p><p>整个python脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> subprocess<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_duration</span>(<span class="hljs-params">video_path: <span class="hljs-built_in">str</span></span>):<br>    ext = os.path.splitext(video_path)[-<span class="hljs-number">1</span>]<br>    good_format = [<span class="hljs-string">&#x27;.mp4&#x27;</span>, <span class="hljs-string">&#x27;.avi&#x27;</span>, <span class="hljs-string">&#x27;.flv&#x27;</span>, <span class="hljs-string">&#x27;.ts&#x27;</span>]<br>    <span class="hljs-keyword">if</span> ext <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> good_format:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;格式不支持&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    ffprobe_cmd = <span class="hljs-string">&#x27;ffprobe -i &#123;&#125; -show_entries format=duration -v quiet -of csv=&quot;p=0&quot;&#x27;</span><br>    p = subprocess.Popen(<br>        ffprobe_cmd.<span class="hljs-built_in">format</span>(video_path),<br>        stdout=subprocess.PIPE,<br>        stderr=subprocess.PIPE,<br>        shell=<span class="hljs-literal">True</span>)<br>    out, err = p.communicate()<br>    duration_seconds = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">str</span>(out, <span class="hljs-string">&#x27;utf-8&#x27;</span>).strip())<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(duration_seconds)<br><br>all_files = []<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">walkdir</span>(<span class="hljs-params">path: <span class="hljs-built_in">str</span></span>):<br>    filelist = os.listdir(path)<br>    <span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> filelist:<br>        filepath = os.path.join(path, filename)<br>        <span class="hljs-keyword">if</span> os.path.isdir(filepath):<br>            walkdir(filepath)<br>        <span class="hljs-keyword">else</span>:<br>            all_files.append(filepath)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-built_in">dir</span> = sys.argv[<span class="hljs-number">1</span>]<br>    all_time = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">if</span> os.path.isdir(<span class="hljs-built_in">dir</span>):<br>        walkdir(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">dir</span>))<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> all_files:<br>            <span class="hljs-built_in">print</span>(i)<br>            <span class="hljs-keyword">try</span>:<br>                time = get_duration(i)<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                <span class="hljs-built_in">print</span>(e, <span class="hljs-string">&#x27;文件受损，无法计算\n&#x27;</span>)<br>                time = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">if</span> time != <span class="hljs-number">0</span>:<br>                <span class="hljs-built_in">print</span>(time)<br>                all_time += time<br>    <span class="hljs-keyword">elif</span> os.path.isfile(<span class="hljs-built_in">dir</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">dir</span>)<br>        <span class="hljs-keyword">try</span>:<br>            time = get_duration(<span class="hljs-built_in">dir</span>)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(e, <span class="hljs-string">&#x27;文件受损，无法计算\n&#x27;</span>)<br>            time = <span class="hljs-number">0</span><br>        all_time += time<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Are You OK?&quot;</span>)<br>    <span class="hljs-built_in">print</span>(all_time // <span class="hljs-number">3600</span>, all_time % <span class="hljs-number">3600</span> // <span class="hljs-number">60</span>, all_time % <span class="hljs-number">60</span>)<br></code></pre></td></tr></table></figure><p>使用方法：将脚本直接拖到<code>cmd(Windows)</code>或<code>terminal(macOS)</code>中，随后拖入要统计时长的文件夹，按回车即可。如果没有可执行权限请赋予。</p><p>也可以使用alias命令将脚本绝对路径命名为一个常用指令，方便地计算所有视频时长。</p><h2 id="4-无损合并视频"><a href="#4-无损合并视频" class="headerlink" title="4.无损合并视频"></a>4.无损合并视频</h2><p>有些视频爬虫爬下来是分段的，使用ffmpeg无损合并不会重新编码，较快。此方法只适用于mpeg容器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 首先生成一个文件列表(POSIX)</span><br><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;file &#x27;%s&#x27;\n&quot;</span> *.mp4 &gt; merge.txt<br><span class="hljs-comment"># windows用这个指令生成列表</span><br>(<span class="hljs-keyword">for</span> %i <span class="hljs-keyword">in</span> (*.mp4) <span class="hljs-keyword">do</span> @<span class="hljs-built_in">echo</span> file <span class="hljs-string">&#x27;%i&#x27;</span>) &gt; merge.txt<br><span class="hljs-comment"># 使用ffmpeg合并</span><br>ffmpeg -f concat -safe 0 -i merge.txt -c copy out.mp4<br></code></pre></td></tr></table></figure><h2 id="5-视频添加黑边"><a href="#5-视频添加黑边" class="headerlink" title="5.视频添加黑边"></a>5.视频添加黑边</h2><p>使用topaz video enhance对一些视频进行超分辨率时，不合适的分辨率可能使软件直接闪退。使用ffmpeg提前处理一次黑边可以解决这个问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 加黑边。添加右下。10线程，音频不重编码，无损质量视频编码</span><br>ffmpeg -threads 10 -i 1.mp4 -vf <span class="hljs-string">&#x27;pad=目标列数:目标行数:右移列数:下移行数:颜色(默认black)&#x27;</span> -acodec copy -crf 17 2.mp4<br><span class="hljs-comment"># 去黑边。切掉右下。10线程，音频不重编码，无损质量视频编码</span><br>ffmpeg -threads 10 -i 1.mp4 -vf <span class="hljs-string">&#x27;crop=目标列数:目标行数:左移列数:上移行数&#x27;</span> -acodec copy -crf 17 2.mp4<br></code></pre></td></tr></table></figure><p><br></p><h2><font color="black">参考链接</font></h2><ol><li><a href="https://blog.csdn.net/LHJCSDNYL/article/details/122466668">python汉字简繁体转换方法</a></li><li><a href="https://fanyi-api.baidu.com/product/113">通用翻译API接入文档</a></li><li><a href="https://blog.csdn.net/weixin_46085748/article/details/126147080">ffmpeg获取视频时长和分辨率</a></li><li><a href="https://blog.csdn.net/y534560449/article/details/121534481">FFMPEG合并视频文件(无损)</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MongoDB学习笔记</title>
    <link href="/blog/f5b9fe6efd82/"/>
    <url>/blog/f5b9fe6efd82/</url>
    
    <content type="html"><![CDATA[<h1 align="center">MongoDB学习笔记</h1><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h2><h3 id="1-1-Mac安装"><a href="#1-1-Mac安装" class="headerlink" title="1.1.Mac安装"></a>1.1.Mac安装</h3><p><a href="https://www.mongodb.com/try#community"><u><em>官网</em></u></a> 下载可执行文件包。选择本地部署，选择社区版服务端，选择你需要的版本，点击下载即可。</p><blockquote><p>从大版本号6开始Mac版有ARM指令集可选，实际使用速度提升很高，但是截至本文创建时间，还没有形成稳定发布版本。</p></blockquote><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:04:26-14:34:45-image-20220426140104500.png" alt="image-20220426140104500" style="zoom: 33%;" /></p><p>下载得到的压缩包中只有一个<code>bin</code>文件包，内含4个最基本的服务端可执行文件。将<code>mongodb</code>文件夹放至合适的位置，给<code>bin</code>目录加环境变量。</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># mysql也在/usr/local，因此也放在这里，省事</span><br><span class="hljs-built_in">export</span> PATH=/usr/local/mongodb/bin:<span class="hljs-variable">$PATH</span><br></code></pre></td></tr></table></figure><p>创建<code>log</code>和<code>data</code>目录，用于存放日志和数据库数据（叫啥都行，你知道就行）。</p><p>使用以下指令开启和关闭服务端，此时可以命令行输入<code>mongo</code>进入数据库shell。</p><blockquote><p><code>--fork</code>指令用于指定后台运行，而后台运行没有对应的指令一键退出，需要进入shell后输入<code>db.adminCommand(&#123; &quot;shutdown&quot; : 1 &#125;)</code>。如果你确定你的数据库目前没有读写，而且是单机运行，那么也可以直接杀掉进程。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 开启服务端</span><br>mongod --dbpath [data目录] --logpath [<span class="hljs-built_in">log</span>目录/mongo.log] --fork<br><span class="hljs-comment"># 关闭服务端(偷懒)</span><br>killall -9 mongod<br>db.adminCommand(&#123; <span class="hljs-string">&quot;shutdown&quot;</span> : 1 &#125;)<br></code></pre></td></tr></table></figure><h3 id="1-2-数据迁移"><a href="#1-2-数据迁移" class="headerlink" title="1.2.数据迁移"></a>1.2.数据迁移</h3><p>MongoDB提供直接输入输出数据库到文件的功能，可以用于数据库迁移。进行这些操作需要补充可执行文件。官网下载即可。目前数据库工具还没有苹果ARM版本。</p><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:04:26-14:34:45-image-20220426142043224.png" alt="image-20220426142043224" style="zoom:33%;" /></p><p>下载的压缩包中同样只有一个<code>bin</code>文件夹，里面补充了一些可执行文件。将它们复制到你MongoDB的<code>bin</code>目录中。</p><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:04:26-14:34:45-image-20220426142304546.png" alt="image-20220426142304546" style="zoom:50%;" /></p><blockquote><p>数据库导出也可以使用JetBrains全家桶的数据库插件，它可以一次性导出一整个库，效率比较高，但是不提供导入功能。mongodb官方也提供免费的GUI管理器——Compass。它提供完整的数据库操作、分析、导入导出功能。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 带日志地导出整个数据库</span><br>mongodump --host localhost:27017 --oplog<br><br><span class="hljs-comment"># 导入二进制数据库备份文件。不指定数据库默认全导入。导入导出请使用相同版本</span><br>mongorestore --host localhost:27017 --nsInclude=[数据库名].[集合名]  [从哪个目录导入]<br><span class="hljs-comment"># 恢复时重放日志。不指明路径默认转储路径顶层</span><br>mongorestore --oplogReplay [从哪个目录导入] --oplogFile [路径]<br><br><span class="hljs-comment"># 导入Json数据文件</span><br>mongoimport --db [数据库名] --collection [集合名] --file [数据文件]<br><span class="hljs-comment"># 或json数组(JetBrains导出的格式)</span><br>mongoimport --db [数据库名] --collection [集合名] --jsonArray [数据文件]<br></code></pre></td></tr></table></figure><h3 id="1-3-多节点部署"><a href="#1-3-多节点部署" class="headerlink" title="1.3.多节点部署"></a>1.3.多节点部署</h3><p>在单机上模拟多节点配置。对于实际生产环境不建议单机配置。</p><h4 id="1-3-1-配置文件"><a href="#1-3-1-配置文件" class="headerlink" title="1.3.1.配置文件"></a>1.3.1.配置文件</h4><p>创建三个不同的数据文件夹，分别在其内创建配置文件<code>mongod.conf</code>，写入如下配置内容。三个加了注释的地方要根据实际来改动，三个节点不准相同。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># /Users/zql/Desktop/mongodb/data1/mongod.conf</span><br><span class="hljs-attr">systemLog:</span><br>  <span class="hljs-attr">destination:</span> <span class="hljs-string">file</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">/Users/zql/Desktop/mongodb/data1/mongod.log</span>  <span class="hljs-comment"># 日志文件路径</span><br>  <span class="hljs-attr">logAppend:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">storage:</span><br>  <span class="hljs-attr">dbPath:</span> <span class="hljs-string">/Users/zql/Desktop/mongodb/data1</span>  <span class="hljs-comment"># 数据目录</span><br><span class="hljs-attr">net:</span><br>  <span class="hljs-attr">bindIp:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">28017</span> <span class="hljs-comment"># 端口</span><br><span class="hljs-attr">replication:</span><br>  <span class="hljs-attr">replSetName:</span> <span class="hljs-string">rs0</span><br>  <span class="hljs-attr">enableMajorityReadConcern:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">processManagement:</span><br>  <span class="hljs-attr">fork:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h4 id="1-3-2-配置复制集"><a href="#1-3-2-配置复制集" class="headerlink" title="1.3.2.配置复制集"></a>1.3.2.配置复制集</h4><p>命令行中输入以下命令，启动三个mongodb进程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">mongod -f /Users/zql/Desktop/mongodb/data1/mongod.conf &amp;&amp;<br>mongod -f /Users/zql/Desktop/mongodb/data2/mongod.conf &amp;&amp; <br>mongod -f /Users/zql/Desktop/mongodb/data3/mongod.conf<br></code></pre></td></tr></table></figure><p>三个进程目前互相独立，互不知道，因此需要进入shell进行进一步配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mongo --port 28017<br></code></pre></td></tr></table></figure><p>配置方式有如下两种，任一即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 这种方法需要主机名能被解析。使用 hostname -f 来测试</span><br>rs.<span class="hljs-title function_">initiate</span>()<br>rs.<span class="hljs-title function_">add</span>(<span class="hljs-string">&quot;[你的主机名]:28018&quot;</span>) <span class="hljs-comment">//rs.add(&quot;Mac:28018&quot;)</span><br>rs.<span class="hljs-title function_">add</span>(<span class="hljs-string">&quot;[你的主机名]:28019&quot;</span>) <span class="hljs-comment">//rs.add(&quot;Mac:28019&quot;)</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">rs.<span class="hljs-title function_">initiate</span>(&#123;<br>    <span class="hljs-attr">_id</span>: <span class="hljs-string">&quot;rs0&quot;</span>,<br>    <span class="hljs-attr">members</span>: [&#123;<br>        <span class="hljs-attr">_id</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-attr">host</span>: <span class="hljs-string">&quot;localhost:28017&quot;</span><br>    &#125;,&#123;<br>        <span class="hljs-attr">_id</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">host</span>: <span class="hljs-string">&quot;localhost:28018&quot;</span><br>    &#125;,&#123;<br>        <span class="hljs-attr">_id</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-attr">host</span>: <span class="hljs-string">&quot;localhost:28019&quot;</span><br>    &#125;]<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 查看状态</span><br>rs.<span class="hljs-title function_">status</span>()<br></code></pre></td></tr></table></figure><blockquote><p>想要在从节点上读取数据（比如搜索）默认被禁止，如果想启用，请在从节点的命令行输入<code>rs.secondaryOk()</code></p></blockquote><h4 id="1-3-3-调整配置"><a href="#1-3-3-调整配置" class="headerlink" title="1.3.3.调整配置"></a>1.3.3.调整配置</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> conf = rs.<span class="hljs-title function_">conf</span>()<br><span class="hljs-comment">// 将0号节点的优先级调整为10</span><br>conf.<span class="hljs-property">members</span>[<span class="hljs-number">0</span>].<span class="hljs-property">priority</span> = <span class="hljs-number">10</span>;<br><span class="hljs-comment">// 将1号节点调整为hidden节点</span><br>conf.<span class="hljs-property">members</span>[<span class="hljs-number">1</span>].<span class="hljs-property">hidden</span> = <span class="hljs-literal">true</span>;<br><span class="hljs-comment">// hidden节点必须配置&#123;priority: 0&#125;</span><br>conf.<span class="hljs-property">members</span>[<span class="hljs-number">1</span>].<span class="hljs-property">priority</span> = <span class="hljs-number">0</span>;<br><span class="hljs-comment">// 应用以上调整</span><br>rs.<span class="hljs-title function_">reconfig</span>(conf);<br></code></pre></td></tr></table></figure><h2 id="2-shell操作"><a href="#2-shell操作" class="headerlink" title="2.shell操作"></a>2.shell操作</h2><h3 id="2-1-基本操作"><a href="#2-1-基本操作" class="headerlink" title="2.1.基本操作"></a>2.1.基本操作</h3><ul><li><p><code>show dbs</code>，显示所有数据库。<code>use [数据库]</code>，使用某数据库</p></li><li><p><code>db.collection.insertOne([Json])</code>插入一条数据；<code>db.collection.insertMany([Json,Json,Json])</code>同时插入很多条数据。插入后会返回给你<code>ObjectId</code>字段</p></li><li><p>查找</p><ul><li><p><code>db.movies.find().pretty()</code>，显示所有数据，且有缩进</p></li><li><p><code>db.movies.find(&#123;&quot;year&quot;：1975&#125;,&#123;&quot;_id&quot;:0,&quot;title&quot;:1&#125;).sort(&quot;age&quot;:1)</code>，单条件查询，且不返回id返回title，且排序</p></li><li><p><code>db.movies.find(&#123;&quot;year&quot;：1989，&quot;title&quot;：&quot;Batman&#39;&quot;&#125;)</code>，多条件and查询</p></li><li><p><code>db.movies.find($and：[&#123;&quot;title&quot;：&quot;Batman&#125;,&#123;&quot;category&quot;：&quot;action&quot;&#125;])</code>，and的另一形式</p></li><li><p><code>db.movies.find(&#123;$or：[&#123;&quot;year&quot;：1989&#125;，&#123;&quot;title&quot;：&quot;Batman&quot;&#125;])</code>，多条件or查询</p></li><li><p><code>db.movies.find(&#123;&quot;title”：/^B/&#125;)</code>，按正则表达式查找</p></li><li><p>逻辑对照 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:01-00:09:36-image-20220531213055698.png" alt="image-20220531213055698" style="zoom: 35%;" /></p><blockquote><p>子文档中如果有多个属性，搜索时应当搜索「子文档属性是…」，而不是「子文档是 属性…」。二者表达意义不同。</p><p>如果某个属性是一个数组，搜索的元素在此数组中，那么就是可以搜到的。</p><p>对子文档搜索时，使用<code>$elemMatch</code>指定的字段必须在同一条数据里 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:01-00:09:36-image-20220531220848199.png" alt="image-20220531220848199" style="zoom:80%;" /></p></blockquote></li></ul></li><li><p>删除</p><ul><li><code>db.testcol.remove( &#123; a : 1 &#125; )</code>，删除a 等于1的记录 </li><li><code>db.testcol.remove( &#123; a : &#123; $lt : 5 &#125; &#125; )</code>，删除a 小于5的记录 </li><li><code>db.testcol.remove( &#123; &#125; )</code>，删除所有记录 </li><li><code>db.testcol.remove()</code>，报错</li></ul></li><li><p>更新</p><ul><li><code>db.fruit.updateOne(&#123;name: &quot;apple&quot;&#125;, &#123;$set: &#123;from: &quot;China&quot;&#125;&#125;)</code>，查询字段和更新字段都是必须的</li><li>必须有如下操作符至少一个<ul><li><code>$push</code>：增加一个对象到数组底部</li><li><code>$pushAll</code>：增加多个对象到数组底部</li><li><code>$pop</code>：从数组底部删除一个对象</li><li><code>$pull</code>：如果匹配指定的值，从数组中删除相应的对象</li><li><code>$pullAll</code>：如果匹配任意的值，从数据中删除相应的对象</li><li><code>$addToSet</code>：如果不存在则增加一个值到数组</li></ul></li></ul></li><li><p>删除</p><ul><li><code>db.[集合].drop()</code>，删除一个集合</li><li><code>db.dropDatabase()</code>，删除一个数据库</li></ul></li><li><p>索引</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 创建索引</span><br>db.[集合名].<span class="hljs-title function_">createIndex</span>(&#123;<span class="hljs-string">&quot;j&quot;</span>:<span class="hljs-number">1</span>, <span class="hljs-string">&quot;w&quot;</span>:<span class="hljs-number">1</span>&#125;)<br><span class="hljs-comment">// 删除所有索引</span><br>db.[集合名].<span class="hljs-title function_">dropIndexes</span>()<br><span class="hljs-comment">// 查看集合索引</span><br>db.[集合名].<span class="hljs-title function_">getIndexes</span>()<br><span class="hljs-comment">// 查看集合索引大小</span><br>db.[集合名].<span class="hljs-title function_">totalIndexSize</span>()<br></code></pre></td></tr></table></figure><h3 id="2-2-聚合查询"><a href="#2-2-聚合查询" class="headerlink" title="2.2.聚合查询"></a>2.2.聚合查询</h3><ul><li>操作符 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:01-00:09:36-image-20220531224931563.png" alt="image-20220531224931563" style="zoom:80%;" /></li><li>运算符 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:01-00:09:36-image-20220531225004562.png" alt="image-20220531225004562" style="zoom:100%;" /></li><li>特有操作 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:01-00:09:36-image-20220531225045462.png" alt="image-20220531225045462" style="zoom:80%;" /></li><li>例1 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:01-00:09:36-image-20220531225231900.png" alt="image-20220531225231900" style="zoom: 80%;" /> </li><li>例2 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:01-00:09:36-image-20220531225253295.png" alt="image-20220531225253295" style="zoom: 80%;" /></li><li>特有操作 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:01-00:09:36-image-20220531225329233.png" alt="image-20220531225329233" style="zoom: 80%;" /></li><li>自动分组 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:01-00:09:36-image-20220531230448316.png" alt="image-20220531230448316" style="zoom:80%;" /></li><li>一次完成多个分组 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:01-00:09:36-image-20220531230644883.png" alt="image-20220531230644883" style="zoom:80%;" /></li></ul><h3 id="2-3-设计模式"><a href="#2-3-设计模式" class="headerlink" title="2.3.设计模式"></a>2.3.设计模式</h3><ul><li>mongodb使用中，通常直接把数据放到一个表里，除非超过了16M</li><li>分表后可以这样聚合查询 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:02-14:13:01-image-20220601082824461.png" alt="image-20220601082824461" style="zoom: 33%;" /></li><li>只支持<strong>左外连接</strong>，不能是<strong>分片表</strong></li><li><strong>推荐的设计模式</strong><ul><li>表现形式类<ul><li>列转行 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:02-14:13:01-image-20220601085150750.png" alt="image-20220601085150750" style="zoom: 33%;" /><ul><li><code>db.movies.createIndex(&#123;&quot;releases.country&quot;:1,&quot;releases.date&quot;:1&#125;)</code></li></ul></li><li>文档版本</li></ul></li><li>数据访问类<ul><li>子集</li><li>近似处理：每次写操作触发0-9随机数，随机数在0才计数加10。减少写操作</li></ul></li><li>组织结构类<ul><li>预聚合：数据中提前储存统计字段</li><li>分桶：把每分钟的数据改成每小时一个表，其中的数据用数组存</li></ul></li></ul></li></ul><h3 id="2-4-事务"><a href="#2-4-事务" class="headerlink" title="2.4.事务"></a>2.4.事务</h3><ul><li><p>写操作</p><ul><li><p><code>writeConcern</code>：一个写操作落到多少个节点上才算成功。发起写操作的程序将阻塞到写操作到达指定的节点数为止</p><ul><li><code>db.test.insert( &#123;count: 1&#125;, &#123;writeConcern: &#123;w: &quot;majority&quot;, wtimeout:3000 &#125;&#125;)</code></li><li>0：不关心是否成功</li><li>1：写入全部节点</li><li><p>majority：大多数节点</p></li><li><p><code>journal</code>：写操作到达多少个节点才算成功</p><ul><li>true：写操作落到journal文件中才算成功</li><li>false：写操作到达内存即算作成功</li></ul></li></ul></li><li><p>配置延迟节点</p></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">conf=rs.<span class="hljs-title function_">conf</span>() <br>conf.<span class="hljs-property">members</span>[<span class="hljs-number">2</span>].<span class="hljs-property">slaveDelay</span> = <span class="hljs-number">5</span> <br>conf.<span class="hljs-property">members</span>[<span class="hljs-number">2</span>].<span class="hljs-property">priority</span> = <span class="hljs-number">0</span> <br>rs.<span class="hljs-title function_">reconfig</span>(conf)<br></code></pre></td></tr></table></figure><ul><li><p>读操作</p><ul><li><p><code>readPref</code>：决定使用哪一个节点来满足正在发起的读请求</p><ul><li>primary：只选择主节点</li><li>primaryPreferred：优先选择主节点，如果不可用则选择从节点</li><li>secondary：只选择从节点</li><li>secondaryPreferred：优先选择从节点， 如果从节点不可用则选择主节点</li><li>nearest：选择最近的节点</li><li><p>可以自己打标签，例如为3个较好的节点打上<code>&#123;purpose:&quot;online&quot;&#125;</code></p></li><li><p><code>readConcern</code>：决定这个节点上的数据哪些 是可读的，类似于关系数据库的隔离级别</p><ul><li>available：读取所有可用的数据</li><li>local：读取所有可用且属于当前分片的数据</li><li>majority：读取在大多数节点上提交完成的数据</li><li>linearizable：可线性化读取文档。性能一般，一般用不到</li><li>snapshot：读取最近快照中的数据。最高安全级别</li></ul></li></ul></li><li><p><strong>读写分离</strong>提高性能</p><ul><li><code>db.orders.insert(&#123; oid: 101, sku: &quot;kiteboar&quot;, q: 1&#125;, &#123;writeConcern:&#123;w: &quot;majority&quot;&#125;&#125;)</code></li><li><code>db.orders.find(&#123;oid:101&#125;).readPref(&quot;secondary&quot;).readConcern(&quot;majority&quot;)</code></li></ul></li></ul></li></ul><h3 id="2-5-变更流（触发器）"><a href="#2-5-变更流（触发器）" class="headerlink" title="2.5.变更流（触发器）"></a>2.5.变更流（触发器）</h3><ul><li>与触发器不完全相同 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:02-14:13:01-image-20220601140247974.png" alt="image-20220601140247974" style="zoom:80%;" /></li><li><code>db.test.watch( [], &#123;maxAwaitTimeMS:300000&#125; )</code>，通过另一个命令行插入了数据，就会有提示</li></ul><h3 id="2-6-开发要点"><a href="#2-6-开发要点" class="headerlink" title="2.6.开发要点"></a>2.6.开发要点</h3><ul><li>如果一个游标已经遍历完，会自动关闭。如果没有遍历完，则需要手动调用 <code>close()</code> 方法，否则该游标将在服务器上存在 10 分钟(默认值)后超时释放，造成不必要的资源浪费</li><li>索引<ul><li>没有资源隔离，一个没有索引的慢查询可能影响到所有其他操作。尽量使索引覆盖要查询的内容，避免查询数据文件</li><li>使用<code>projection</code> 减少返回到客户端的的文档的内容</li></ul></li><li>写入<ul><li>在 update 语句里只包括需要更新的字段</li><li>尽可能使用批量插入来提升写入性能</li></ul></li><li>文档结构<ul><li>防止使用太长的字段名(浪费空间)</li><li>防止使用太深的数组嵌套(超过2层操作比较复杂)</li><li>不使用中文，标点符号等非拉丁字母作为字段名</li></ul></li><li>分页<ul><li>使用limit限制返回的条数，避免遍历整个数据库 <code>db.coll.find(&#123;x: 100&#125;).limit(50)</code></li><li>分页跳转代替传统遍历 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:02-14:13:01-image-20220601160730729.png" alt="image-20220601160730729" style="zoom:80%;" /></li></ul></li><li>事务<ul><li>尽可能不用</li><li>不要过大（1000个文档更新以内），因为有60s限制</li><li>当必须使用事务时，尽可能让涉及事务的文档分布在同一个分片上</li></ul></li><li><strong>实际操作参数</strong><ul><li>禁用 NUMA，否则在某些情况下会引起突发大量swap交换</li><li>禁用 Transparent Huge Page，否则会影响数据库效率</li><li>tcp_keepalive_time 调整为120秒，避免一些网络问题</li><li>ulimit -n，避免打开文件句柄不足的情况</li><li>关闭 atime，提高数据文件访问效率</li></ul></li></ul><h2 id="3-python操作"><a href="#3-python操作" class="headerlink" title="3.python操作"></a>3.python操作</h2><h3 id="3-1-基本操作"><a href="#3-1-基本操作" class="headerlink" title="3.1.基本操作"></a>3.1.基本操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 连接数据库，创建库和表</span><br><span class="hljs-keyword">from</span> pymongo <span class="hljs-keyword">import</span> MongoClient<br>client = MongoClient(<span class="hljs-string">&quot;mongodb://127.0.0.1:27017&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 插入一条数据</span><br>new_user = &#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;nina&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;xxxx&quot;</span>, <span class="hljs-string">&quot;email&quot;</span>:<span class="hljs-string">&quot;123456@qq.com &quot;</span>&#125;<br>result = client[<span class="hljs-string">&#x27;数据库名&#x27;</span>][<span class="hljs-string">&#x27;表名&#x27;</span>].insert_one(new_user)<br><br><span class="hljs-comment"># 一次插入多条数据</span><br><span class="hljs-comment"># 传入一个数组，数组中每个元素都是一个dict。如果用了json序列化，会变为一个字符串，记得反序列化回来</span><br>datas = [&#123;<span class="hljs-string">&quot;a&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;b&quot;</span>:<span class="hljs-number">1</span>&#125;,&#123;<span class="hljs-string">&quot;a&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;b&quot;</span>:<span class="hljs-number">2</span>&#125;,&#123;<span class="hljs-string">&quot;a&quot;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&quot;b&quot;</span>:<span class="hljs-number">1</span>&#125;,&#123;<span class="hljs-string">&quot;a&quot;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&quot;b&quot;</span>:<span class="hljs-number">2</span>&#125;]<br>result = client[<span class="hljs-string">&#x27;数据库名&#x27;</span>][<span class="hljs-string">&#x27;表名&#x27;</span>].insert_many(datas)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 更新一条数据</span><br>result = client[<span class="hljs-string">&#x27;数据库名&#x27;</span>][<span class="hljs-string">&#x27;表名&#x27;</span>].update_one( &#123; <span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;nina&quot;</span>&#125;,&#123; <span class="hljs-string">&quot;$set&quot;</span>: &#123; <span class="hljs-string">&quot;phone&quot;</span>: <span class="hljs-string">&quot;123456789&quot;</span>&#125; &#125; )<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 搜索数据</span><br>mask = &#123;<span class="hljs-string">&quot;_id&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;c&quot;</span>: <span class="hljs-number">1</span>&#125;<br>query = &#123;<span class="hljs-string">&quot;a&quot;</span>: [条件a], <span class="hljs-string">&quot;b&quot;</span>: [条件b]&#125;<br>result = client[<span class="hljs-string">&#x27;数据库名&#x27;</span>][<span class="hljs-string">&#x27;表名&#x27;</span>].find(query, mask)<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>(result)<br></code></pre></td></tr></table></figure><h3 id="3-2-spark-mongo"><a href="#3-2-spark-mongo" class="headerlink" title="3.2.spark+mongo"></a>3.2.spark+mongo</h3><ul><li>架构图 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:06-13:54:40-image-20220606135415828.png" alt="image-20220606135415828" style="zoom:20%;" /></li><li>具体操作：坑比较多，python对spark的数据格式支持还不是很好。以后再写</li></ul><h2 id="4-架构"><a href="#4-架构" class="headerlink" title="4.架构"></a>4.架构</h2><h3 id="4-1-复制集"><a href="#4-1-复制集" class="headerlink" title="4.1.复制集"></a>4.1.复制集</h3><ul><li><p>原理：mongodb要求奇数个（通常是3）节点来保证投票机制，主节点负责读写，从节点无写入能力，只能读或者从主节点把数据同步过来。当一个修改操作到达主节点时，对数据的操作将被记录下来（经过一些必要的转换），这些记录称为oplog。从节点通过在主节点上打开一个tailable游标不断获取新进入主节点的oplog，并在自己的数据上回放，以此保持跟主节点的数据一致</p></li><li><p>实现：具有投票权的节点之间<strong>两两互相</strong>发送心跳，当<strong>5次心跳</strong>未收到时判断为节点失联。如果失联的是主节点，从节点会发起选举，选出新的主节点；如果失联的是从节点则不会产生新的选举。选举基于RAFT一致性算法实现，选举成功的必要条件是大多数投票节点存活。复制集中最多可以有<strong>50个节点</strong>，但具有投票权的节点<strong>最多7个</strong></p></li><li><p>选举条件</p><ul><li>大多数节点存活</li><li>新的主节点<ul><li>能与多数节点建立连接</li><li>oplog较新</li><li>优先级较高（如果有配置）</li></ul></li></ul></li><li>复制集节点常见选配项<ul><li>是否具有投票权（V参数）</li><li>优先级（priority参数）：越高越好，0不能成为主节点</li><li>隐藏（hidden参数）：复制数据，但对应用不可见。可以具有投票仅，但优先级必须为0</li><li>延迟（slaveDelay参数）：复制n秒之前的数据，保持与主节点的时间差</li></ul></li><li>增加节点不会提高<strong>写操作性能</strong></li></ul><h3 id="4-2-分片集"><a href="#4-2-分片集" class="headerlink" title="4.2.分片集"></a>4.2.分片集</h3><ul><li>需要多种不同类型节点 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:02-14:13:01-image-20220602023731069.png" alt="image-20220602023731069" style="zoom: 25%;" /><ul><li>mongos路由节点，提供唯一访问入口。三台是做了高可用冗余，实际一台也行</li><li>config配置节点，分片集元数据，包括集群分片的索引映射等。三台是做了高可用冗余</li><li>每个分片<strong>必须</strong>是一个复制集</li></ul></li><li>应用透明、自动均衡、动态扩容、提供三种分片方式<ul><li>基于范围：范围查询性能好，但数据分布可能不均匀</li><li>基于哈希：数据分布均匀，写优化，但范围查询效率低。适用于日志，物联网等<strong>高并发</strong>场景</li><li>基于Tag：自定义</li></ul></li><li>额外消耗比较大，管理复杂</li><li>分片数的计算：取最大值<ul><li>总数据量 / 硬盘(&lt;2T)</li><li>热数据+索引 / 内存 * 0.6</li><li>总并发量 / 并发量 * 0.7</li></ul></li></ul><h3 id="4-3-索引"><a href="#4-3-索引" class="headerlink" title="4.3.索引"></a>4.3.索引</h3><ul><li>索引的结构 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:05-00:48:11-image-20220603095944708.png" alt="image-20220603095944708" style="zoom: 33%;" /></li><li>建议优先使用过滤性强的字段作为索引</li><li>查询时后面加上<code>.explain(true)</code>可以打印详细的检索信息</li><li><strong>精确匹配写在最前面，排序字段写中间，范围匹配放在最后</strong>来建索引</li><li>地理位置索引 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:05-00:48:11-image-20220605004751983.png" alt="image-20220605004751983" style="zoom: 33%;" /></li><li>部分索引 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:05-00:58:38-image-20220605005029396.png" alt="image-20220605005029396" style="zoom:33%;" /></li><li>全文索引 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:05-00:58:38-image-20220605005118540.png" alt="image-20220605005118540" style="zoom:33%;" /></li></ul><h3 id="4-4-性能监控"><a href="#4-4-性能监控" class="headerlink" title="4.4.性能监控"></a>4.4.性能监控</h3><ul><li><code>mongostat</code>，监控过去1秒内所有资源使用情况。<strong>脏数据超过20%</strong>或内存占用超过<strong>物理内存的60%的95%</strong>时阻塞新请求</li><li><code>mongotop</code>，排查是哪个表的读写消耗性能</li><li><code>pip install mtools</code>，使用python可视化展示性能情况<ul><li><code>mplotqueries [日志文件]</code>，将所有慢查询通过图表形式展现</li><li><code>mloginfo --queries [日志文件]</code>，总结所有慢查询的模式和出现次数、消耗时间等</li></ul></li></ul><h3 id="4-5-全球集群"><a href="#4-5-全球集群" class="headerlink" title="4.5.全球集群"></a>4.5.全球集群</h3><ul><li>架构图 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:06-13:54:40-image-20220605232341879.png" alt="image-20220605232341879" style="zoom: 25%;" /></li><li>可以做到<strong>多个主节点同时读写</strong></li><li>模型中增加区域字段、分片中加区域标签、给每个区域指定分片块范围</li></ul><p><br></p><h2><font color="black">参考链接</font></h2><ol><li><a href="https://www.mongodb.com/try#community"><u><em>MongoDB官网下载</em></u></a></li></ol>]]></content>
    
    
    <categories>
      
      <category>知识积累</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>使用wget爬取整个网站</title>
    <link href="/blog/a7a8bae9a7ba/"/>
    <url>/blog/a7a8bae9a7ba/</url>
    
    <content type="html"><![CDATA[<h1 align="center">使用wget爬取整个网站</h1><p>本学期恰逢有门课搜索引擎作业需要暴力爬取整个网站。记录一下过程及操作。</p><h2 id="1-安装wget"><a href="#1-安装wget" class="headerlink" title="1.安装wget"></a>1.安装wget</h2><p>Mac下可以使用brew直接安装。但是第一次装好brew没有设置过镜像源、电脑里的git使用过的话，会有一点问题：</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">~ % brew install wget<br>fatal: Could not resolve HEAD to a revision<br>==&gt; Searching <span class="hljs-keyword">for</span> similarly named formulae...<br>Error: No similarly named formulae found.<br>Error: No available formula or cask with the name <span class="hljs-string">&quot;wget&quot;</span>.<br>==&gt; Searching <span class="hljs-keyword">for</span> a previously deleted formula (<span class="hljs-keyword">in</span> the last month)...<br>Error: No previously deleted formula found.<br></code></pre></td></tr></table></figure><p>概括地说，找不到包。这是因为没有更新源。更新源时有以下报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">~ % brew update<br>fatal: Could not resolve HEAD to a revision<br>Already up-to-date.<br></code></pre></td></tr></table></figure><p>这就很清楚了，git找不到目标，给它设置一个即可。查看详细信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">~ % brew update --verbose<br>XXX<br>fatal: unable to access <span class="hljs-string">&#x27;https://github.com/Homebrew/homebrew-cask/&#x27;</span>: Failed to connect to github.com port 443: Operation timed out<br>Error: Fetching /opt/homebrew/Library/Taps/homebrew/homebrew-cask failed!<br>XXX<br></code></pre></td></tr></table></figure><p>打开这个报错的路径：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /opt/homebrew/Library/Taps/homebrew/homebrew-core<br>git fetch --prune origin<br>git pull --rebase origin master<br></code></pre></td></tr></table></figure><p>此时应该可以使用<code>brew update</code>了，下载wget成功。</p><h2 id="2-wget使用参数"><a href="#2-wget使用参数" class="headerlink" title="2.wget使用参数"></a>2.wget使用参数</h2><p>我们要下载一个网站所有的网页，包括所有引用源，但是不要跨域爬取。下面记录一些常用的参数（<strong>不是全部</strong>）。</p><h3 id="2-1-我使用的参数："><a href="#2-1-我使用的参数：" class="headerlink" title="2.1.我使用的参数："></a>2.1.我使用的参数：</h3><ul><li><code>-c</code>，断点续传</li><li><code>-r</code>，递归下载</li><li><code>-p</code>，下载网页所需所有文件</li><li><code>-k</code>，将绝对链接转换为本地相对链接，这样就可以本地脱机浏览网页了</li><li><code>--no-check-certificate</code>，不检查证书（http可能被劫持。隐患换性能）</li><li><code>robots=off</code>，忽略robots协议（真刑啊）</li><li><code>-m</code>，镜像，<code>-N -r -l inf --no-remove-listing</code> 的缩写形式</li></ul><h3 id="2-2-另外的一些常用参数："><a href="#2-2-另外的一些常用参数：" class="headerlink" title="2.2.另外的一些常用参数："></a>2.2.另外的一些常用参数：</h3><ul><li><code>-np</code>，不搜索上层目录</li><li><code>-nd</code>，下载时不创建一层层目录，所有文件下载到当前文件夹中</li><li><code>-H</code>，递归时转到外部主机下载图片或链接（真刑啊）</li><li><code>-l</code>，指定递归深度</li><li><code>-A.[文件拓展名]</code>，下载<code>.[文件拓展名]</code>的文件</li><li>伪装<ul><li><code>--random-wait</code>，获取多个文件时，每次随机等待间隔0.5*WAIT…1.5*WAIT 秒</li><li><code>--referer=URL</code>，在 HTTP 请求头包含‘Referer: URL’（跨域访问有用）</li><li><code>--user-agent=AGENT</code>，设置浏览器头（伪装成浏览器）</li><li><code>--load-cookies=FILE</code>，会话开始前从FILE中载入cookies</li><li><code>--save-cookies=FILE</code>，会话结束后保存cookies至FILE</li><li><code>--keep-session-cookies</code>，载入并保存会话 (非永久) cookies</li></ul></li></ul><h2 id="3-结果"><a href="#3-结果" class="headerlink" title="3.结果"></a>3.结果</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">下载完毕 --2022-04-22 03:37:37--<br>总用时：6h 12m 11s<br>下载了：64832 个文件，22m 10s (2.22 MB/s) 中的 2.9G<br></code></pre></td></tr></table></figure><p>没找到在哪里设置多线程下载，还是挺慢的。还好网站没做反爬🤪</p><p><br></p><h2><font color="black">参考链接</font></h2><ol><li><a href="https://www.jianshu.com/p/b2de788c3c6d"><u><em>简书 brew update 报错 “fatal: Could not resolve HEAD to a revision”</em></u></a></li><li><a href="https://stackoverflow.com/questions/65605282/trying-to-install-hugo-via-homebrew-could-not-resolve-head-to-a-revision"><u><em>StackOverflow Trying to install Hugo via Homebrew - “Could Not Resolve HEAD to a Revision”</em></u></a></li><li><a href="http://www.360doc.com/content/21/0417/07/66759191_972715523.shtml"><u><em>wget递归大部分网站目录</em></u></a></li><li><a href="https://www.cnblogs.com/sx66/p/11887022.html"><u><em>wget命令详解</em></u></a></li><li><a href="https://blog.csdn.net/liuencheng2020/article/details/122759795"><u><em>wget爬取网站</em></u></a></li></ol>]]></content>
    
    
    <categories>
      
      <category>课程作业</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>shell脚本使用笔记</title>
    <link href="/blog/314fb673863f/"/>
    <url>/blog/314fb673863f/</url>
    
    <content type="html"><![CDATA[<h1 align="center">shell脚本使用笔记</h1><h1 id="文章仍在施工中。。。"><a href="#文章仍在施工中。。。" class="headerlink" title="文章仍在施工中。。。"></a><strong>文章仍在施工中。。。</strong></h1><h2 id="1-基础知识"><a href="#1-基础知识" class="headerlink" title="1.基础知识"></a>1.基础知识</h2><ul><li>第一行使用 <code>#!/bin/bash</code> 来指定使用的shell。如果写的那个shell不存在那么默认不会执行。外部指定shell可以覆盖脚本内部指定的</li><li>变量使用<code>$variable</code>来保存，弱类型，默认都是字符串，赋值时等号不要写空格</li><li>父子shell的变量不共用</li><li>环境变量在当前shell以及任意子shell中可以使用</li><li><code>!!</code>为上一条指令</li><li>单引号不能识别特殊语法。需要变量替换要使用双引号</li><li>使用<code>bash</code>会开启一个子shell，使用<code>source</code>不会开启新shell</li><li>反引号括起来的执行结果会被保存下来，其效果相当于<code>a=$(ls)</code></li><li><code>nohup XXX &amp; 1&gt;/dev/null</code> 后台执行命令</li></ul><h2 id="2-变量"><a href="#2-变量" class="headerlink" title="2.变量"></a>2.变量</h2><ul><li>用户个人环境变量配置文件<code>~/.bash_profile</code>，远程登录用户特有<code>~/.bashrc</code>。全局配置文件<code>/etc/profile</code>、<code>/etc/bashrc</code>。系统建议最好创建在<code>/etc/profile.d</code>而不是直接修改全局配置。全局配置影响所有登录用户，个人配置优先生效</li><li>set/declare，输出所有变量，包括全局、局部<ul><li>env，只显示全局变量</li><li>export，显示和设置环境变量值</li></ul></li><li>设置变量前加<code>readonly</code>，那么shell结束前此变量值不可更改</li><li><code>export |awk -F &#39;[ :=]&#39; &#39;&#123;print $3&#125;&#39;</code> 打印环境变量的命令（第三列）</li><li>变量加载顺序：<code>/etc/profile</code>，<code>/etc/profile.d</code>，<code>$HOME/.bash_profile</code>，<code>$HOME/.bashrc</code>，<code>/etc/bashrc</code></li><li><p><strong>特殊参数</strong></p><ul><li><p><code>$0</code>，获取shell脚本文件名，以及脚本路径</p></li><li><p><code>$n</code>，获取shell脚本的第n个参数，n在1~9之间，大于9则需要写<code>$&#123;10&#125;</code>，参数空格隔开</p></li><li><p><code>$#</code>，获取执行的she11脚本后面的参数总个数</p></li><li><p><code>$*</code>，获取shell脚本所有参数，不加引号等同于<code>$@</code>作用，加上引号作用是接收所有参数为单个字符串</p></li><li><p><code>$@</code>，不加引号效果同上；加引号，是接收所有参数为独立字符串</p></li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span><br><span class="hljs-keyword">do</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$var</span>&quot;</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><ul><li><strong>特殊状态</strong><ul><li><code>$?</code>，上一次命令执行状态返回值，正确，非0失败</li><li><code>$$</code>，当前shell脚本的进程号</li><li><code>$!</code>，上一次后台进程的PID</li><li><code>$_</code>，获取上次执行命令最后一个参数</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>[<span class="hljs-variable">$#</span> -ne 2] &amp;&amp; &#123;<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;输入俩参数&quot;</span><br><span class="hljs-built_in">exit</span> 119  <span class="hljs-comment"># 返回值给$?变量</span><br>&#125;<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;OK&quot;</span><br></code></pre></td></tr></table></figure><h2 id="3-shell子串"><a href="#3-shell子串" class="headerlink" title="3.shell子串"></a>3.shell子串</h2><h3 id="3-1-bash基础内置命令"><a href="#3-1-bash基础内置命令" class="headerlink" title="3.1.bash基础内置命令"></a>3.1.bash基础内置命令</h3><ul><li><code>echo</code><ul><li><code>-n</code>，不换行输出</li><li><code>-e</code>，解析字符串中的转义符</li></ul></li><li><code>eval</code>，执行多个命令</li><li><code>exec</code>，不创建子进程，执行后续命令。执行完毕后自动exit</li></ul><h3 id="3-2-子串"><a href="#3-2-子串" class="headerlink" title="3.2.子串"></a>3.2.子串</h3><ul><li><p><code>$&#123;a&#125;</code>，变量值</p></li><li><p><code>$ #a&#125;</code>，变量字符串长度</p><blockquote><p>扩号应该有左半边。别问我为啥没打～问就是mathjax渲染不出来</p></blockquote></li><li><p><code>$&#123;a:start&#125;</code>，变量<strong>start</strong>数值位置以及之后的字符（索引从0开始）</p></li><li><p><code>$&#123;a:start:length&#125;</code>，变量<strong>start</strong>数值之后的<strong>length</strong>长度字符</p></li><li><p><code>$&#123;a#word&#125;</code>，从变量开头，删除最短匹配的<strong>word</strong>子串</p></li><li><p><code>$&#123;a##word&#125;</code>，从变量开头，删除最长匹配的<strong>word</strong></p></li><li><p><code>$&#123;a%word&#125;</code>，从变量结尾删除最短的<strong>word</strong></p></li><li><p><code>$&#123;a%%word&#125;</code>，从变量结尾开始删除最长匹配的<strong>word</strong></p></li><li><p><code>$&#123;a/pattern/string&#125;</code>，用<strong>string</strong>代替第一个匹配的<strong>pattern</strong></p></li><li><p><code>$&#123;a//pattern/string&#125;</code>，用<strong>string</strong>代替所有的<strong>pattern</strong></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>知识积累</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Nginx反向代理</title>
    <link href="/blog/40a2b2317121/"/>
    <url>/blog/40a2b2317121/</url>
    
    <content type="html"><![CDATA[<h1 align="center">Nginx反向代理</h1><p>众所周知Nginx可以做流量转发。本文将介绍手动编译Nginx源码并做反向代理的具体步骤。需要一个域名和一台服务器，最好是境外服务器因为境外服务器不需要ICP备案，比较省事。</p><blockquote><ul><li>为啥不直接用域名解析做转发而要用服务器呢？你懂的。</li><li>据我所知，阿里云的香港服务器仍然有墙</li><li>下文以ubuntu系统为例，使用root用户操作</li></ul></blockquote><h2 id="1-域名解析"><a href="#1-域名解析" class="headerlink" title="1.域名解析"></a>1.域名解析</h2><p>在自己域名的控制台中添加解析条目，随便给一个子域名，IP指向你服务器的地址。</p><blockquote><p>没有ICP备案的域名不能解析指向中国大陆的IP地址。</p></blockquote><h2 id="2-安装软件"><a href="#2-安装软件" class="headerlink" title="2.安装软件"></a>2.安装软件</h2><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 更新软件库、升级已有程序、安装编译工具包和nginx</span><br>apt-get update &amp;&amp; apt-get -y upgrade &amp;&amp; apt-get install -y build-essential nginx<br></code></pre></td></tr></table></figure><p>这一步中，Nginx已经安装好了，但是我们<strong>不打算直接使用它</strong>。因为这样直接使用官方源码编译的对一些插件会不兼容或导致你机器的服务不稳定。安装好后它会在机器内留一套适合你本机器的编译参数，我们将使用这些参数自己编译一个。</p><h2 id="3-查看参数"><a href="#3-查看参数" class="headerlink" title="3.查看参数"></a>3.查看参数</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看参数，记录下来其中的nginx版本和参数</span><br>nginx -V<br></code></pre></td></tr></table></figure><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:04:20-09:46:47-image-20220420091241650.png" alt="image-20220420091241650"></p><h2 id="4-编译源码"><a href="#4-编译源码" class="headerlink" title="4.编译源码"></a>4.编译源码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 此处下载的版本号要和你上面记录的版本号一致</span><br>wget https://nginx.org/download/nginx-1.14.0.tar.gz<br><span class="hljs-comment"># 解压</span><br>tar -xvf nginx-1.14.0.tar.gz &amp;&amp; <span class="hljs-built_in">cd</span> nginx-1.14.0<br><span class="hljs-comment"># 确认参数</span><br>./configure [你刚刚保存那一堆参数]<br></code></pre></td></tr></table></figure><p>确认参数过程中会有很多<code>./configure: error: the XXX module requires the XXX library</code>，不要慌，这是正常的。一个一个去查缺失的这个包怎么安装。一般来说就是<code>apt-get install XXX</code>。重复尝试确认参数，直到最终显示<code>Configuration summary</code>，这说明需要的库已经都安装好了。</p><h2 id="5-安装Nginx"><a href="#5-安装Nginx" class="headerlink" title="5.安装Nginx"></a>5.安装Nginx</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 编译</span><br>make<br><span class="hljs-comment"># 安装</span><br>make install<br><span class="hljs-comment"># 安装文件放入之前nginx的安装目录</span><br><span class="hljs-built_in">cp</span> -rf objs/nginx /usr/sbin/nginx<br></code></pre></td></tr></table></figure><h2 id="6-配置SSL证书"><a href="#6-配置SSL证书" class="headerlink" title="6.配置SSL证书"></a>6.配置SSL证书</h2><p>有SSL证书才能使用https。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># certbot官网给出的操作。使用snap包管理器</span><br>snap install core &amp;&amp; snap refresh core &amp;&amp; snap install --classic certbot<br><span class="hljs-built_in">ln</span> -s /snap/bin/certbot /usr/bin/certbot<br><span class="hljs-comment"># 生成SSL文件</span><br>certbot certonly --nginx -d [你的域名] -m [你的邮箱]<br></code></pre></td></tr></table></figure><p>这个证书90天就会过期。快过期了会给你的邮箱发邮件提醒。所以请使用有效邮箱。</p><ul><li>接下来会有两个确认，第一个是是否同意使用条款，输入<code>yes</code>；第二个是是否同意共享你的一些数据给非盈利组织，输入<code>no</code></li><li>接下来提醒生成成功，并给出了证书和密钥的储存位置。记下这两个位置</li><li>编辑<code>/etc/nginx/nginx.conf</code>，删掉默认配置，写入如下内容</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs json">events <span class="hljs-punctuation">&#123;</span><br>    worker_connections <span class="hljs-number">1024</span>;<br><span class="hljs-punctuation">&#125;</span><br><br>http <span class="hljs-punctuation">&#123;</span><br>    sendfile on;<br>    keepalive_timeout <span class="hljs-number">65</span>;<br>    types_hash_max_size <span class="hljs-number">2048</span>;<br>    <br>    include /etc/nginx/mime.types;<br>    default_type application/octet-stream;<br>    <br>    server <span class="hljs-punctuation">&#123;</span><br>    listen <span class="hljs-number">443</span> ssl;<br>    server_name <span class="hljs-punctuation">[</span>你的域名<span class="hljs-punctuation">]</span>;<br><br>ssl_certificate <span class="hljs-punctuation">[</span>证书地址<span class="hljs-punctuation">]</span>;<br>ssl_certificate_key <span class="hljs-punctuation">[</span>密钥地址<span class="hljs-punctuation">]</span>;<br><br>location / <span class="hljs-punctuation">&#123;</span><br>            proxy_pass <span class="hljs-punctuation">[</span>你要代理的网址<span class="hljs-punctuation">]</span>;<br>        <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="7-测试运行"><a href="#7-测试运行" class="headerlink" title="7.测试运行"></a>7.测试运行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 测试配置文件</span><br>ngixn -t<br><span class="hljs-comment"># 如果测试成功，重启nginx服务</span><br>service nginx restart<br></code></pre></td></tr></table></figure><p>此时应该可以正常反代了，使用你自己的域名访问别的网站。<strong>Happy surfing on the Internet !</strong></p>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>贝叶斯网络学习笔记</title>
    <link href="/blog/05b77b75f2b9/"/>
    <url>/blog/05b77b75f2b9/</url>
    
    <content type="html"><![CDATA[<h1 align="center">贝叶斯网络学习笔记</h1><h2 id="1-贝叶斯网络的思想"><a href="#1-贝叶斯网络的思想" class="headerlink" title="1.贝叶斯网络的思想"></a>1.贝叶斯网络的思想</h2><p>在传统的点估计神经网络中一般是输入一个点得到一个点，它给出一个确定的结果或分类的概率。在使用神经网络进行预测时，也就是对一个偏离训练集的数据进行插值拟合，本质上它是对结果的曲线(高维曲面)向外进行了一个延伸。它预测的结果没有考虑已经偏离的数据其本身带来的不确定性，导致它对结果的预测处于一个过度自信的状态。也就是说它被骗了。</p><p>符合均匀分布的输入数据在复杂的神经网络的变换下其分布可能改变成任意的数据，比如某个物体的图片。这就是为什么很多情况下可以用对抗网络简单地添加一些噪声来大幅度干扰预测结果。</p><p>在传统的点估计神经网络中一般不考虑输入数据本身的影响，也就是默认输入数据符合均匀分布，它得到的结果就是对这个均匀分布进行一定函数变换后得到的新分布。而实际上输入数据很可能服从于某个分布而不是默认的均匀分布。贝叶斯理论认为概率是对可信度的衡量，它是一个根据输入分布发生变化的频谱——不同的确定的自变量分布经过同样的函数变换可以得到不同的新分布。本质上后者是对前者的一个推广，在贝叶斯网络中如果限制自变量符合均匀分布，那么它将得到传统的点估计神经网络得到结果的一个极大似然估计。</p><p>在贝叶斯网络计算时，虽然不知道所有输入数据符合的分布，但是可以实时记录已经输入的数据计算产生的结果，这个就是先验概率。每新输入一组数据进行训练，它都可以根据之前的数据给出一个推测，同时可以知道输入数据的实际分布。这个预测的分布可能和实际的分布有点偏差，贝叶斯网络就可以不断依据这种偏差修正对全部数据分布的估计。当估计相比实际分布偏右时，网络预测的结果也会偏右；当这种估计达到了无偏估计，贝叶斯网络的预测也将在实际分布的顶峰所在自变量处达到一个顶峰。</p><h2 id="2-朴素贝叶斯"><a href="#2-朴素贝叶斯" class="headerlink" title="2.朴素贝叶斯"></a>2.朴素贝叶斯</h2><h3 id="2-1-概念："><a href="#2-1-概念：" class="headerlink" title="2.1.概念："></a>2.1.概念：</h3><ul><li><p>先验概率 $P(Y)$</p></li><li><p>条件概率 $P(X|Y)$</p></li><li><p>后验概率 $P(Y|X)$</p></li></ul><h3 id="2-2-贝叶斯公式"><a href="#2-2-贝叶斯公式" class="headerlink" title="2.2.贝叶斯公式"></a>2.2.贝叶斯公式</h3><p>由贝叶斯公式 $P(y|x)=\frac{P(x,y)}{P(x)}$，但是x和y的联合分布是不知道的，此时可以将公式变形为</p><script type="math/tex; mode=display">P(Y=C_k|X=x)=\frac{P(Y=C_k)P(X=x|C_k)}{\sum\limits_{j=1}^nP(Y=C_j)P(X=x|Y=C_j)}</script><p>其中$C_k$就是结果的各种可能性，x是待预测项目的已知条件，可以有很多个项目。</p><h3 id="2-3-条件独立假设"><a href="#2-3-条件独立假设" class="headerlink" title="2.3.条件独立假设"></a>2.3.条件独立假设</h3><p>在数据量比较小的时候可能符合x的所有$C_k$不是都存在，也就是在2.2的公式中其概率为0，这会导致很大的偏差。如果各个变量都是独立的话，可以依据条件独立假设将其拆开计算。</p><p>$P(X=x|Y=C_k)=P(X^{(1)}=x^{(1)},…X^{(n)}=x^{(n)}|Y=C_k)=\mathop{\Pi}\limits_{j=1}^nP(X^{(j)}=x^{(j)}|Y=C_k)$</p><p>联立上面两个公式，得到</p><script type="math/tex; mode=display">P(Y=C_k|X=x)=\frac{P(Y=C_k)\cdot\mathop{\sum}\limits_jP(X^{(j)}=x^{(j)}|Y=C_k)}{\sum\limits_{k}P(Y=C_k)\cdot\sum\limits_jP(X^{(j)}=x^{(j)}|Y=C_j)}\ k=1,2,...k</script><p>所有结果中，算出概率最大的那个，就是预测的标签。根据全概率公式，分子都是$P(X=x)$，因此计算时分子最大化即可。</p><h2 id="3-基于Flow的贝叶斯网络模型"><a href="#3-基于Flow的贝叶斯网络模型" class="headerlink" title="3.基于Flow的贝叶斯网络模型"></a>3.基于Flow的贝叶斯网络模型</h2><p>如果输入数据$z\sim p(z)$，其结果$x=g(z)$，那么$z=f(x)=g^{-1}(x)$，$p(x)=p(f(x))|det\frac{\partial f(x)}{\partial x}|$  (Jacob行列式)。也就是说如果变换函数g是一一映射而且是可逆的，那么可以通过其反函数和z的分布计算出x的分布。</p><p>构建模型时一个简单的想法是把x分成两份，令$\begin{cases}y_1=x_1\\ y_2=x_2+m(x_1)\end{cases}$，其Jacob行列式为1，且反函数很好算$\begin{cases}x_1=y_1\\ x_2=y_2-m(y_1)\end{cases}$。公式中的m函数是任意一个符合g标准的变换。</p><p>如果想构建复杂的网络，可以把多个像上面这样的函数组合在一起串成一串。输入的自变量每经过一个函数变换其分布都会变复杂一点，经过n个函数变换后其分布足以拟合真实数据的分布。</p><p>这种网络的瓶颈在于为了保持函数是一一映射，其输入输出的维度需要是一样的。</p><h2 id="4-一些示例"><a href="#4-一些示例" class="headerlink" title="4.一些示例"></a>4.一些示例</h2><h3 id="4-1-ZhuSuan库"><a href="#4-1-ZhuSuan库" class="headerlink" title="4.1.ZhuSuan库"></a>4.1.ZhuSuan库</h3><p>珠算平台目前在github开源，处于开发阶段，需要下载后使用<code>pip install .</code>来安装。其主要功能如下$^{[1]}$：</p><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:04:19-22:05:05-zhusuan%E4%B8%BB%E8%A6%81%E5%8A%9F%E8%83%BD.png" alt="zhusuan主要功能" style="zoom:50%;" /></p><h4 id="4-1-1-贝叶斯逻辑回归"><a href="#4-1-1-贝叶斯逻辑回归" class="headerlink" title="4.1.1.贝叶斯逻辑回归"></a>4.1.1.贝叶斯逻辑回归</h4><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> zhusuan <span class="hljs-keyword">as</span> zs<br><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf<br><br><span class="hljs-meta">@zs.meta_bayesian_net(<span class="hljs-params">scope=<span class="hljs-string">&quot;blr&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_blr</span>(<span class="hljs-params">x, alpha, D</span>):<br>    bn = zs.BayesianNet()<br>    w = bn.normal(<span class="hljs-string">&#x27;w&#x27;</span>, mean=tf.zeros([D]), std=alpha, group_ndims=<span class="hljs-number">1</span>)<br>    y_logit = tf.reduce_sum(tf.expand_dims(w, <span class="hljs-number">0</span>)*x, axis=<span class="hljs-number">1</span>)<br>    bn.bernoulli(<span class="hljs-string">&#x27;y&#x27;</span>, y_logit)<br>    <span class="hljs-keyword">return</span> bn<br></code></pre></td></tr></table></figure><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:04:19-22:05:05-image-20220419213317032.png" alt="image-20220419213317032" style="zoom: 33%;" /></p><h4 id="4-1-2-变分自动编码器"><a href="#4-1-2-变分自动编码器" class="headerlink" title="4.1.2.变分自动编码器"></a>4.1.2.变分自动编码器</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 生成网络</span><br><span class="hljs-meta">@zs.meta_bayesian_net(<span class="hljs-params">scope=<span class="hljs-string">&quot;vae&quot;</span>, reuse_variables=<span class="hljs-literal">True</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_vae</span>(<span class="hljs-params">N, D</span>):<br>    bn = zs.BayesianNet()<br>    z_mean = tf.zeros([N,D])<br>    z = bn.normal(<span class="hljs-string">&#x27;z&#x27;</span>, z_mean, std=<span class="hljs-number">1.</span>, group_ndims=<span class="hljs-number">1</span>)<br>    h = tf.layers.dense(z, <span class="hljs-number">500</span>, activation=tf.nn.relu)<br>    x_logits = tf.layers.dense(h, <span class="hljs-number">784</span>)<br>    bn.bernoulli(<span class="hljs-string">&#x27;x&#x27;</span>, x_logits, group_ndims=<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> bn<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 推断网络</span><br><span class="hljs-meta">@zs.reuse_variables(<span class="hljs-params"><span class="hljs-string">&quot;vae_q&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_q_net</span>(<span class="hljs-params">h_dim, z_dim</span>):<br>    bn = zs.BayesianNet()<br>    h = tf.layers.dense(x, h_dim, activation=tf.nn.relu)<br>    z_mean = tf.layers.dense(h, z_dim)<br>    z_logstd = tf.layers.dense(h, z_dim)<br>    bn.normal(<span class="hljs-string">&#x27;z&#x27;</span>, z_mean, logstd=z_logstd, group_ndims=<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> bn<br></code></pre></td></tr></table></figure><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:04:19-22:05:05-image-20220419214301959.png" alt="image-20220419214301959" style="zoom:33%;" /></p><h3 id="4-2-论文"><a href="#4-2-论文" class="headerlink" title="4.2.论文"></a>4.2.论文</h3><ul><li><p><a href="https://arxiv.org/abs/1902.09754"><u><em>Function Space Particle Optimization for Bayesian Neural Networks</em></u></a></p><blockquote><p>使用贝叶斯网络序列预测：预测空气质量</p></blockquote></li><li><p><a href="http://arxiv.org/pdf/1712.06424"><u><em>Learning to Write Stylized Chinese Characters by Reading a Handful of Examples</em></u></a></p><blockquote><p>使用贝叶斯网络做风格迁移：小样本手写汉字字体迁移</p></blockquote></li><li><p><a href="https://arxiv.org/abs/1411.6370"><u><em>Big Learning with Bayesian Methods</em></u></a></p><blockquote><p>贝叶斯网络2017年的综述</p></blockquote></li><li><p><a href="https://arxiv.org/abs/2201.01943v1"><u><em>Machine Learning: Algorithms, Models, and Applications</em></u></a></p><blockquote><p>机器学习热门应用2022年的综述</p></blockquote></li></ul><p><br></p><h2><font color="black">参考链接</font></h2><ol><li><a href="https://www.bilibili.com/video/BV1WK411n7Sw"><u><em>贝叶斯深度学习前沿进展-朱军</em></u></a></li><li><a href="https://www.bilibili.com/video/BV1TL4y187qF"><u><em>神经网络（十三）：贝叶斯神经网络</em></u></a></li><li><a href="https://www.bilibili.com/video/BV1g54y1s7At"><u><em>快速理解朴素贝叶斯法</em></u></a></li><li><a href="https://github.com/thu-ml/zhusuan"><u><em>珠算python库</em></u></a></li><li><a href="https://zhusuan.readthedocs.io"><u><em>珠算库在线文档</em></u></a></li></ol>]]></content>
    
    
    <categories>
      
      <category>知识积累</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ssh不能密钥登陆？记一次BUG排查</title>
    <link href="/blog/818ff15b3655/"/>
    <url>/blog/818ff15b3655/</url>
    
    <content type="html"><![CDATA[<h1 align="center">ssh不能密钥登陆？记一次BUG排查</h1><h2 id="1-问题复述："><a href="#1-问题复述：" class="headerlink" title="1.问题复述："></a>1.问题复述：</h2><p>使用同样的公钥配置root和git用户，root用户轻松免密登陆，git用户却无法使用公钥登陆。</p><h2 id="2-问题背景："><a href="#2-问题背景：" class="headerlink" title="2.问题背景："></a>2.问题背景：</h2><p>书接上回，我在云服务器上搭了一个hexo博客并写了一件配置脚本，方便服务器被人搞了快速重置或者以后换服务器。当时免密登陆没有写在脚本里是因为人们不总是每次重装都重做密钥。</p><p>但时间一长，仍不免觉得输密码太费事。</p><p>在试图配置git用户免密登陆时发现无论如何都无法免密登陆，使用root用户却轻松免密登陆。</p><h2 id="3-解决过程"><a href="#3-解决过程" class="headerlink" title="3.解决过程"></a>3.解决过程</h2><h3 id="3-1-已排查的无效问题"><a href="#3-1-已排查的无效问题" class="headerlink" title="3.1.已排查的无效问题"></a>3.1.已排查的无效问题</h3><ul><li>调整<code>.ssh</code>目录下的公钥各种权限（不起作用）</li><li>在<code>sshd_config</code>中调整一些设置，如选择RSA、选择认证文件位置等（不起作用）</li><li>清除本地ssh的相关<code>known_hosts</code>缓存（不起作用）</li><li>给服务器的git设置用户名和邮箱（不起作用）</li><li>用多种方法将公钥传到服务器尝试chown给不同用户（不起作用）<ul><li>以防回车、空格、EOF等不可见字符导致翻车</li><li>直接传过去重命名、传过去复制到新文件里、从root用户直接拷给git用户</li></ul></li><li>检索阿里云对可以密钥登陆的用户是否有白名单（没有）</li><li>检索是否有在ssh中配置可以密钥登陆用户的白名单（没有）</li><li>检索Mac的ssh是否错误配置密码登陆优先于密钥登陆（没有）</li><li>检索git是否对密钥登陆有一些限制（没有）</li><li>检索linux是否限制两个用户不能用同一个密钥（没有）</li><li>检索密钥认证过程是否会用到其他一些我在防火墙中关闭了的端口（没有）</li><li>检索git-shell是否会导致密钥认证出现问题或者默认配置中优先选择密码（没有）</li></ul><p>以上常规解法都没能解决我的问题。事实上linux确实对<code>.ssh</code>文件夹以及里面的密钥和登陆信息有权限的最低和推荐要求，但是按照官方要求的权限仍然无法解决问题。图片来源于知乎。</p><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:04:18-04:48:56-3.jpg" alt="权限要求" style="zoom: 60%;" /></p><h3 id="3-2-问题锁定"><a href="#3-2-问题锁定" class="headerlink" title="3.2.问题锁定"></a>3.2.问题锁定</h3><p>关闭密码登陆后，root用户仍然顺利登陆，git用户无法登陆，显示 <code>permission denied(publickey)</code>。这一般是公钥错误或找不到情况下产生的回显。接下来排查是否是Mac本地设置的问题。</p><ol><li><p>删除本地电脑中公私钥，发现root依然能登陆，git依然不能登陆。这说明Mac的命令行对密钥确实有缓存。</p></li><li><p>重启电脑，此时不能登陆root了。</p></li><li><p>恢复私钥，又能登陆root，还是不能登陆git。</p></li><li><p>给git用户切换到bash，重复以上步骤。表现依旧。</p></li></ol><p>以上现象表明是git用户的某些设置导致了公钥认证失败。</p><h3 id="3-3-有用的帖子"><a href="#3-3-有用的帖子" class="headerlink" title="3.3.有用的帖子"></a>3.3.有用的帖子</h3><p>我检索到 <a href="https://blog.csdn.net/diaobao3822/article/details/121191599"><u><em>SSH公钥认证失败排错</em></u></a> ，其中提到了“公钥确实发出去了，但是服务器拒绝了”。我决定按照他的调试操作查看公钥到底有没有发过去。如果确实发过去了，那就是服务端认证的问题，否则就是我笔记本电脑的问题。</p><ul><li><p><code>ssh -vvv</code> 查看连接的细节。观察到确实有 <code>receive packet: type 51</code>，也就是说服务端拒绝了密钥</p></li><li><p>在 <code>sshd_config</code> 末尾添加 <code>LogLevel DEBUG</code>，打开ssh的调试模式</p></li><li><p>登陆git用户。果然密钥又认证失败了</p></li><li><p>按照文章中说的使用 <code>journalctl -u sshd |tail -300</code> 查看日志，没有看到任何信息</p></li><li><p>打开<code>/var/log</code>，按照修改时间顺序调整文件，重新尝试登陆git</p><blockquote><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:04:18-04:47:04-1.png" alt="日志" style="zoom:60%;" /></p></blockquote></li><li><p>显然最下面两个文件中应该有相关日志。在 <code>auth.log</code> 中找到了相关调试信息。用户家目录的权限有问题，拒绝认证</p></li><li><blockquote><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:04:18-04:47:04-2.png" alt="拒绝原因" style="zoom: 60%;" /></p></blockquote></li></ul><h3 id="3-4-找到答案"><a href="#3-4-找到答案" class="headerlink" title="3.4.找到答案"></a>3.4.找到答案</h3><p>我之前在别的帖子中看到“权限要设置为XXX，否则不能登陆”，还以为是权限给低了不能读取公钥导致认证失败。但是我git用户家目录给的<code>777</code>权限。显然是权限高了。</p><ul><li>权限递归地调整为<code>700</code>，果然能使用密钥登陆。但hexo上传失败。应该是缺写权限了</li><li>权限递归地调整为<code>720</code>，hexo上传成功，但无法免密登陆。说明不能给其他用户写权限</li><li>权限递归地调整为<code>750</code>，能使用密钥登陆，hexo上传成功。但访问网页时任意一个跳转nginx都会返回错误。说明nginx还需要写权限来运行</li><li><code>/home/git/Blog</code> 目录递归地调整为<code>777</code>权限，问题依旧。</li><li>家目录权限递归地调整为<code>755</code>，<code>/home/git/Blog</code> 目录递归地调整为<code>777</code>权限，所有问题解决。此时能使用密钥登陆，hexo上传成功，网页能正常显示。</li></ul><p><strong>问题成功解决！</strong></p><p><br></p><h2><font color="black">参考文章</font></h2><ol><li><a href="https://blog.csdn.net/diaobao3822/article/details/121191599"><u><em>SSH公钥认证失败排错</em></u></a> </li><li><a href="https://blog.csdn.net/xu710263124/article/details/120285969"><u><em>Linux篇之sshd的日志存储位置以及常见的系统日志介绍</em></u></a> </li></ol>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>在云服务器上部署hexo博客</title>
    <link href="/blog/f6d00ba201e7/"/>
    <url>/blog/f6d00ba201e7/</url>
    
    <content type="html"><![CDATA[<h1 align="center">在云服务器上部署hexo博客</h1><p>hexo这类静态博客可以在github上免费直接部署，而且不用考虑高防、负载均衡等问题；但它的域名必须为<code>用户名.github.io</code>，这使得一些名字过长，而且github的大陆访问速度一直不稳定。</p><blockquote><ul><li>其实根据我的实际体验，GitHub每天凌晨两点以后访问特别稳，页面秒开。</li><li>GitHub也可以自定义域名，选中仓库点击设置，拉到下面就能看到。但是总归是要一个自己的域名。</li></ul></blockquote><p>对于域名过长的问题，有些小伙伴可能想到了去云服务商那里购买一个自己的域名。在这个时候他就会发现一个有趣的问题：没有剩余时长3个月及以上的云服务器，ICP是不发备案号的——也就是说这个域名可以买，但用不了。</p><p>对于此，我在阿里云购买了一个域名和一个云服务器。服务器闲着也是闲着，下面记录一下以阿里云为例如何在云服务器上部署hexo博客。服务器配置已经写成了一键配置脚本。</p><h2 id="1-一些准备"><a href="#1-一些准备" class="headerlink" title="1.一些准备"></a>1.一些准备</h2><h3 id="1-1-域名"><a href="#1-1-域名" class="headerlink" title="1.1.域名"></a>1.1.域名</h3><p>要购买域名必须首先在实名填写一个“信息模版”，需要上传身份证正反面无遮挡高清照片。1-2天后审核通过。</p><p>审核通过后才能购买域名。搜索你喜欢的二级域名，会显示给你搭配不同顶级域名的价格，比如<code>good.com</code>会比<code>good.xyz</code>贵。点击购买按钮时会跳出来一些可选服务，土豪可以购买全程代办，穷学生可以什么都不选。</p><blockquote><p>这里面有一个“云解析DNS”非常让人困惑，让人不清楚是不是买了域名必须要买这个才能正常使用。实际上那个服务是<strong>给你返回你查询这个域名的IP</strong>，而不是<strong>把你的域名映射到指定的IP上</strong>——也就是说和我们搭博客没啥关系。其实在阿里云买域名本身就附带了解析服务。</p></blockquote><p>刚刚购买完域名会显示正在审核，其实此时已经可以做域名到指定IP的映射。2-3小时后审核通过，但此时还是只能做域名到指定IP的映射。如果你尝试使用其他几种映射，比如重定向到另一个域名，就会提示你：没备案，不行。</p><p>域名购买后2-3天才会同步给工信部系统，在此之前是不能ICP备案的。</p><h3 id="1-2-云服务器"><a href="#1-2-云服务器" class="headerlink" title="1.2.云服务器"></a>1.2.云服务器</h3><p>如果是首次购买阿里云服务器，会有99一年的优惠活动，请自行探索。如果已经不是第一次购买——静态博客不需要什么性能，挑最便宜的买就行。首先选地区，推荐上海，网站备案省事（买偏远的服务器会更便宜）。然后选共享型机器（性能突发型），CPU和内存都选最低就行。时长至少选3个月。网络按最低选就行，是固定带宽还是按量付费按需选择即可。</p><p>我个人习惯用ubuntu18.04版本。阿里云的服务器直接给root用户，这很好。设置一下密码，主机名。安全策略里面打开80和443端口。</p><h3 id="1-3-ICP备案"><a href="#1-3-ICP备案" class="headerlink" title="1.3.ICP备案"></a>1.3.ICP备案</h3><p>域名的控制台页面上方应该有一个ICP备案的按钮，点击进入。填写信息后点击“信息校验”。需要通过阿里云手机客户端拍照身份证以及人脸核验。核验通过后可以提交给阿里云初审了。</p><p>两三个小时后就会接到阿里云的电话通知阿里云初审的一些不通过的点，可以让客服帮你改也可以你自己在阿里云网站或手机上改。改好后自动提交管局审核。几小时后收到短信验证码提醒，点击短信中的链接，填写验证码和手机号、身份证号，即可通过手机核验。然后静候管局审批。</p><blockquote><p>一般人“网站名称”这一项第一次填几乎不会通过的🤪。不能有身份信息（姓名），不能有行业信息（计算机），不能有平台暗示（博客、XX学校）。总之，别太认真，反正填什么不影响你的网站内容，这个是给管局看的。据说“[adj.]的[n.]”这样就可以通过了，比如“好看的桌子”。还有人曾经写“奇变偶不变”通过了。</p></blockquote><p>一周左右，短信体提醒备案通过。在网站下面加上备案号，备案完成。</p><h3 id="1-4-本机hexo环境"><a href="#1-4-本机hexo环境" class="headerlink" title="1.4.本机hexo环境"></a>1.4.本机hexo环境</h3><p>参考我以前的文章 <a href="http://lzqlearn.com/blog/6560820db005/"><u><em>hexo博客fluid主题美化</em></u></a>。</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">xcode-select --install <span class="hljs-comment"># 安装git</span><br>sudo npm install hexo-cli hexo-server hexo-deployer-git -g <span class="hljs-comment"># 安装hexo</span><br>hexo init ~/blog <span class="hljs-comment"># 初始化博客项目目录</span><br>npm install hexo-deployer-git --save <span class="hljs-comment"># 安装发布插件</span><br></code></pre></td></tr></table></figure><h2 id="2-配置服务器"><a href="#2-配置服务器" class="headerlink" title="2.配置服务器"></a>2.配置服务器</h2><p>大体上分为安装软件、设置用户、设置git、配置nginx四个步骤。<strong>一键配置脚本如下</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[31mstart apt set\033[0m&quot;</span> &amp;&amp;<br>apt-get update &amp;&amp; apt-get upgrade -y &amp;&amp; apt-get install -y git nginx &amp;&amp; <br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[31mend apt set\033[0m\n&quot;</span> &amp;&amp; <br><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[31mstart user set\033[0m&quot;</span> &amp;&amp;<br>useradd -m git -d /home/git -g root -s /usr/bin/git-shell &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;git:123456&quot;</span>|chpasswd &amp;&amp; <br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[31mend user set\033[0m\n&quot;</span> &amp;&amp;<br><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[31mstart git set\033[0m&quot;</span> &amp;&amp;<br><span class="hljs-built_in">mkdir</span> -p /home/git/Blog/repo /home/git/Blog/hexo /home/git/git-shell-commands &amp;&amp; <span class="hljs-built_in">cd</span> /home/git/Blog/repo &amp;&amp; git init --bare blog.git &amp;&amp; <br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;#\!/bin/bash\ngit --work-tree=/home/git/Blog/hexo --git-dir=/home/git/Blog/repo/blog.git checkout -f&quot;</span> &gt; /home/git/Blog/repo/blog.git/hooks/post-update &amp;&amp; <br><span class="hljs-built_in">chown</span> -R /home/git &amp;&amp; git <span class="hljs-built_in">chmod</span> -R 755 /home/git &amp;&amp; <span class="hljs-built_in">chmod</span> -R 777 /home/git/Blog &amp;&amp; <span class="hljs-built_in">chmod</span> 600 /home/git/git-shell-commands &amp;&amp; <br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[31mend git set\033[0m\n&quot;</span> &amp;&amp;<br><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[31mstart nginx set\033[0m&quot;</span> &amp;&amp;<br><span class="hljs-built_in">mv</span> /etc/nginx/sites-available/default /etc/nginx/sites-available/old_default &amp;&amp; <br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;server &#123;\n    listen    80 default_server;\n    server_name    yourwebsite.com;\n    root    /home/git/Blog/hexo;\n&#125;&quot;</span> &gt; /etc/nginx/conf.d/blog.conf &amp;&amp; <br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;server &#123;\nroot /var/www/html;\nindex index.html index.htm index.nginx-debian.html;\nserver_name _;\nlocation / &#123;\ntry_files \$uri \$uri/ =404;\n&#125;\n&#125;&quot;</span> &gt; /etc/nginx/sites-available/default &amp;&amp; <br>nginx -t &amp;&amp; nginx -s reload &amp;&amp; <br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[31mend nginx set\033[0m\nAll sets are finished!&quot;</span> <br></code></pre></td></tr></table></figure><p>下面对每一条命令具体解释。</p><h3 id="2-1-安装软件"><a href="#2-1-安装软件" class="headerlink" title="2.1.安装软件"></a>2.1.安装软件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt-get update <span class="hljs-comment"># 更新apt库</span><br>apt-get upgrade -y <span class="hljs-comment"># 更新本机已安装软件</span><br>apt-get install -y git nginx <span class="hljs-comment"># 安装git和nginx</span><br></code></pre></td></tr></table></figure><h3 id="2-2-设置用户"><a href="#2-2-设置用户" class="headerlink" title="2.2.设置用户"></a>2.2.设置用户</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 新建用户，名为git，登陆目录为/home/git，加入root用户组，默认终端为git终端（权限低）</span><br>useradd -m git -d /home/git -g root -s /usr/bin/git-shell <br><br><span class="hljs-comment"># 设置用户密码</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;git:123456&quot;</span>|chpasswd <span class="hljs-comment"># </span><br></code></pre></td></tr></table></figure><h3 id="2-3-设置git"><a href="#2-3-设置git" class="headerlink" title="2.3.设置git"></a>2.3.设置git</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在git用户家目录下新建Blog文件夹，里面repo文件夹用于储存git信息，hexo文件夹用于储存网页，最后一个文件夹用来允许git命令</span><br><span class="hljs-built_in">mkdir</span> -p /home/git/Blog/repo /home/git/Blog/hexo /home/git/git-shell-commands<br><span class="hljs-built_in">cd</span> /home/git/Blog/repo<br><br><span class="hljs-comment"># 在repo文件夹下初始化git，新建一个blog仓库</span><br>git init --bare blog.git<br><br><span class="hljs-comment"># 写入配置文件工作目录和发布目录</span><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;#\!/bin/bash\ngit --work-tree=/home/git/Blog/hexo --git-dir=/home/git/Blog/repo/blog.git checkout -f&quot;</span> &gt; /home/git/Blog/repo/blog.git/hooks/post-update<br><br><span class="hljs-comment"># 方便给git更高权限</span><br><span class="hljs-built_in">chown</span> -R /home/git<br><span class="hljs-comment"># 不要给777，会导致密钥认证失败。755是下限，不给组外读权限会导致nginx无法展示网页</span><br><span class="hljs-built_in">chmod</span> -R 755 /home/git<br><span class="hljs-comment"># 给权限，不然上传文章会失败或nginx无法展示网页</span><br><span class="hljs-built_in">chmod</span> -R 777 /home/git/Blog<br><span class="hljs-comment"># 默认不给git-shell执行权限，有需求的人可以给执行权限，这样就可以ssh git用户执行操作</span><br><span class="hljs-built_in">chmod</span> 600 /home/git/git-shell-commands <br></code></pre></td></tr></table></figure><h3 id="2-4-配置nginx"><a href="#2-4-配置nginx" class="headerlink" title="2.4.配置nginx"></a>2.4.配置nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># nginx默认的配置有点问题，需要修改一个文件，因此先备份原文件</span><br><span class="hljs-built_in">mv</span> /etc/nginx/sites-available/default /etc/nginx/sites-available/old_default<br><br><span class="hljs-comment"># nginx的配置，确定你的浏览器地址栏显示的名称和你网页的位置</span><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;server &#123;\n    listen    80 default_server;\n    server_name    yourwebsite.com;\n    root    /home/git/Blog/hexo;\n&#125;&quot;</span> &gt; /etc/nginx/conf.d/blog.conf<br><br><span class="hljs-comment"># 修改nginx原本的陪配置，关掉这里所有监听的80端口，否则会由于端口冲突运行不起来</span><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;server &#123;\nroot /var/www/html;\nindex index.html index.htm index.nginx-debian.html;\nserver_name _;\nlocation / &#123;\ntry_files \$uri \$uri/ =404;\n&#125;\n&#125;&quot;</span> &gt; /etc/nginx/sites-available/default<br><br><span class="hljs-comment"># 测试nginx，启动</span><br>nginx -t &amp;&amp; nginx -s reload<br></code></pre></td></tr></table></figure><h2 id="3-本地配置"><a href="#3-本地配置" class="headerlink" title="3.本地配置"></a>3.本地配置</h2><p>修改hexo根目录下<code>_config.yml</code>文件，设置git目标：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@[你主机的IP地址或者域名]:/home/git/Blog/repo/blog.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><p>此时应该已经可以使用了，在hexo根目录下使用<code>hexo clean &amp;&amp; hexo g -d</code>重新编译博客并发布。浏览器输入域名可以访问。</p><h2 id="4-一些后话"><a href="#4-一些后话" class="headerlink" title="4.一些后话"></a>4.一些后话</h2><ul><li><p>没配置密钥登陆，有需求的小伙伴可以自己改一改脚本。</p></li><li><p>自己测试我的博客在单核0.5G内存1M带宽的机器上可以流畅访问，对于博客小白来说性能应该没什么问题，20G的硬盘只用了3G多。建议把主题的资源文件和博客的图片都扔到图床中，这样对服务器的空间、计算压力、网络压力都有极大缓解。</p></li><li><p>没测试过高并发能抗多少。或许以后有时间可以试试。</p></li><li>还没找到所安装环境的干净完全卸载方法。nginx使用apt卸载后不会清除etc目录下的配置，使用apt重新安装也不会重建那个目录。所以环境搞坏了请重置云服务器。</li></ul>]]></content>
    
    
    <categories>
      
      <category>知识积累</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>汉明码纠错原理</title>
    <link href="/blog/ac173d5009b2/"/>
    <url>/blog/ac173d5009b2/</url>
    
    <content type="html"><![CDATA[<p><h1 align="center">计算机网络-课程报告</h1></p><h3 align="center" style="color:black;">汉明码纠错原理</h3><p>本文主要参考了3blue1brown大佬的 <a href="https://www.bilibili.com/video/BV1WK411N7kz?spm_id_from=333.337.search-card.all.click"><u><em>汉明码，如何克服噪声</em></u></a> 和 <a href="https://www.bilibili.com/video/BV1pV411y7E8?spm_id_from=333.999.0.0"><u><em>汉明码，优雅的全貌</em></u></a>。</p><h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1.引言"></a>1.引言</h2><p>光盘有了划痕却仍然能正确显示存储的内容，除非被划得遍体鳞伤。 原因是光盘存储数据有冗余，可以通过数学的方式恢复少量被破坏的数据。图像、视频、音乐等等媒体格式都设计有纠错的方案。所有数据在计算机中的存储最终都是一串0和1的序列，很容易想到一种最简单的纠错方案，就是把所有数据都存储3份。机器读取数据时比较这3份比特序列，如果有差别就以相同的那两个为准。但这就意味着有$\frac{2}{3}$的空间是冗余的，而且即使浪费了这么多空间，仍然不能可靠地解决3份数据里两个都被破坏了的情况。</p><p>所以问题来了：如何设计一种纠错策略，既能纠正错误，又能尽可能减少空间占用？纠错的基本原则就是，在所有可能的消息所组成的巨大空间中，只有一些子集才算得上是有效信息。举个例子，单词”Hello World”被拼写为”Helho Worhd”人们仍然能够识别出。当一条信息被修改时，接收方需要把错误信息纠正回最接近的有效信息。</p><h2 id="2-奇偶校验"><a href="#2-奇偶校验" class="headerlink" title="2.奇偶校验"></a>2.奇偶校验</h2><p>首先介绍一下前置知识：奇偶校验。奇偶校验过程中，发送方会调整数据块的一个比特位，其余的比特位被用作存放信息。这个被调整的比特位唯一的用途是确保这条信息中有偶数个1——如果其余比特位中1的总数是奇数，就将这个校验位调整为1，否则调整为0。通过这个方法，信息中任意一位的翻转都会导致1的个数变为奇数。这样接收方收到这条信息就可以确定其中有错误。</p><p>此方法有一个问题：偶数个位发生翻转时，接收方无法确定信息中是否有错误。两个错误都不能保证可靠也许听起来很差劲，但事实上在足够多的错误下任何纠错策略都不能保证信息准确，我们要做的是在给定最大错误数$N$的情况下，保证数据可靠。奇偶校验虽然很脆弱，但是把一个信息块转化为一个比特的思想可以作为更复杂方案的强大基础。下文将介绍一种纠错方案，在256个比特中仅仅占用9个比特，在有一处比特位错误时能够纠正它；在有两处比特位错误时虽然无法纠正，但是可以探测到有两个错误。之后会讨论如何把这个策略放大到更大的数据块。</p><h2 id="3-汉明码"><a href="#3-汉明码" class="headerlink" title="3.汉明码"></a>3.汉明码</h2><p>为了找到发生错误的位置而不仅仅是知道错误存在，汉明(Richard Hamming)想到了一个好方法，在做奇偶校验时不是对整块信息作校验，而是对其中精心挑选的一部分作校验，这样就可以通过一系列的验证来逐步定位发生错误的具体位置。这种校验的基本思想是如何通过多次奇偶校验来二分查找出错误所在。</p><p>举个例子：只对第2列和第4列这些奇数编号位置做校验，如果校验位有错误，那么接收方就可以把错误锁定在更小的范围内；如果校验位无误，那么要么整个信息没有错误，要么错误出在偶数编号位上。对一半的数据做校验看起来更低效了（因为这一块数据需要两个校验位而不是原本的一个），实际上通过有设计的组合，校验可以做到更高效。</p><p>我们举一个$4\times4$矩阵的例子，将这些比特位标记为0-15，只用其中的12个实际存储数据，4个纠错码分布在位置编号1248，也就是$2^n$位置。暂时假设错误最多只有1处。</p><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:04:08-03:49:24-image-20220408013736031.png" alt="image-20220408013736031" style="zoom: 30%;" /></p><p>在做奇偶校验时必须有一些用来控制整组数据奇偶性的特殊位，第一次校验通过1号位检查第2第4列，第二次检查通过2号位检查第3第4列。通过这两次检查可以将错误锁定在某一列。同样的道理，通过4号位和8号位的两次检查可以将错误锁定在某一行，此时成功确定了错误的位置。推广到 $16\times16=256$ 的数组上，只要8个校验位就可以确定错误所在的位置。</p><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:04:08-03:49:24-image-20220408015924841.png" alt="image-20220408015924841" style="zoom:33%;" /></p><p>说回$4\times4$矩阵，4个校验位有16种可能的数值组合，对应于16个位置任意一个出错的16种情况。那么用什么来表达第17种情况——没有数据出错呢？我们选择舍弃0号位，也就是校验计算的时候根本不把0号位算在内，这样16种校验组合可以和16种情况一一对应。这种对15位数据进行处理表达了11位有效数据的方式称为<strong>(15,11)汉明码</strong>。</p><p>0号位其实还可以发挥一点作用：将其作为整块数据的奇偶校验码，这样我们就可以检测到2位的错误，虽然没有办法修复它。这个操作被称为<strong>扩展汉明码</strong>。</p><h2 id="4-另一种理解"><a href="#4-另一种理解" class="headerlink" title="4.另一种理解"></a>4.另一种理解</h2><p>观察上文的简单示例，或许你已经发现了，四个校验位的数组拼在一起成为一个二进制数，其十进制值就是对应的位置号，例如四个校验位倒着排，0111，恰好代表7号位出错。通过这个特性可以使得硬件实现惊人的简单。这个特性并不是巧合，如果将16个二进制数填进对应的位置，那么仅有4个数是只包含一个1的，分别是1、2、4、8号位置。对它们的校验事实上就是在检查“错误是否出现在这一位上”。</p><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:04:08-03:49:24-image-20220408023027907.png" alt="image-20220408023027907" style="zoom:33%;" /></p><p>异或运算XOR，可以有以下三种理解方式：</p><ul><li>运算的两个二进制数中有且只有一个为1时结果为1，否则为0</li><li>两个数不同结果为1，相同结果为0</li><li>模二的加法，或不进位的二进制加法</li></ul><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:04:08-03:49:24-image-20220408024159314.png" alt="image-20220408024159314" style="zoom:33%;" /></p><p>对很多串数的的异或运算实际上就是在做奇偶校验，并把结果作为一串数保留下来。因此对汉明码的计算还可以有另一种理解方式：把数组中所有值为1的位取出来，它们对应的位置为一个二进制数，把这些二进制数放在一列，对每一位做异或运算，得到的比特编码实际上就是之前奇偶性检验出来的位置。</p><p>数据发送方直接调整刚刚校验出来需要调平的位置，这样整个数组再进行校验的结果就是0000。传输过程中任意一位的0翻转成1都会导致那一位对应的位置编码被加进需要异或运算的序列中，计算结果也就从0000变成了错误那一位的位置编码。同样的道理，1翻转成0会导致那一位对应的位置编码被移出需要异或运算的序列中，计算结果同样从0000变成了错误那一位的位置编码。</p><h2 id="5-对多个块的组织"><a href="#5-对多个块的组织" class="headerlink" title="5.对多个块的组织"></a>5.对多个块的组织</h2><p>可以观察到，每多一个校验位，数据块的大小就可以翻倍。也就是说，数据块越大，冗余信息占比越小。但数据块不是越大越好，因为上面提到的汉明码只能纠正一个位的错误、指示两个位的错误，而数据块越大其中有多个错误的可能性就越高。实际上错误一旦产生往往会影响很多个位，导致整个块被毁掉。因此实际的处理中会把多个块的数据交替排列，这样可以把一连串的错误交错打散到许多个数据块中。当然现在已经有Reed Solomon等更先进的编码来处理这种问题。</p><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:04:08-03:49:24-image-20220408030947794.png" alt="image-20220408030947794" style="zoom: 33%;" /></p><h2 id="6-后记"><a href="#6-后记" class="headerlink" title="6.后记"></a>6.后记</h2><p>在此引用3blue1brown的话：</p><p>聪明的想法往往看起来尤其简洁，甚至会让人们以为理所当然。通过本篇介绍，希望汉明码这种算法存在的合理性对你来说已经显而易见。但千万不要草率地以为这些算法真的显而易见，因为这绝不简单。</p><p>聪明的想法看似太简单是因为我们只看到了最终的结果，清理掉了过程中的琐事，缄口不提其中的错误岔路，一笔带过解决问题的伊始和前路上无穷的可以探索的可能性，包括所有这一切。对一些特别的发明发现而言，大体上总是有第二个更深层次的原因——人们会忘记欣赏。</p><p>把信息当作比特位这种想法直到1948年才被集中整理成完整的理论收集在克劳德·香农独创的信息论论文中，这篇论文的发表和汉明提出他的算法是同时发生的。某种意义上讲，正是这篇奠定基础的论文展示了有效的纠错方式在理论上是永远可行的，无论出现错误的概率有多高。</p><p>几十年的快速发展，许多人已经习惯于把比特和信息放在一起思考，很容易忽视掉这两者是多么的不同。可悲的是，那些深远地影响了未来人们思想的想法最终会被年轻一代视作平淡无奇。</p>]]></content>
    
    
    <categories>
      
      <category>课程作业</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>hexo博客fluid主题美化</title>
    <link href="/blog/6560820db005/"/>
    <url>/blog/6560820db005/</url>
    
    <content type="html"><![CDATA[<h1 align="center">hexo博客fluid主题美化</h1><p>本人不才，没学过前端，课程作业中没有用到过太复杂的前端，修改主题全靠敲过三年代码的直觉。可能我的某些设置是没用的，或者是我错误的理解，或者有更好的解决方案。Anyway，总归是希望我折腾主题美化的经验和踩过的坑能对大家有所帮助。</p><h2 id="1-安装hexo"><a href="#1-安装hexo" class="headerlink" title="1.安装hexo"></a>1.安装hexo</h2><p>hexo是一个静态个人博客框架，“静态”顾名思义，不支持交互功能。这使得hexo整个项目的配置和功能非常简洁，性能也比较好。静态博客可以免费部署在github、gitee等平台。</p><p>要使用 <a href="https://hexo.io/zh-cn/docs/"><u><em>hexo</em></u></a> 首先需要一些环境：<a href="https://nodejs.org/en/"><u><em>node.js</em></u></a>、<a href="https://git-scm.com"><u><em>git</em></u></a>。具体步骤可以观看 <u><em><a href="https://www.bilibili.com/video/BV1Yb411a7ty">程序羊的视频</a></em></u> ，除了git配置之外非常详细。具体使用方法可以查看官方文档，本文中已经通过超链接给出，可以点击跳转查看。</p><p>博客安装好后最常用的命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 新建一个博客文件，markdown格式，默认目录在 [博客根目录]/source/_posts</span><br>hexo new <span class="hljs-string">&quot;[File Name]&quot;</span><br><span class="hljs-comment"># 清理上一次生成的临时文件</span><br>hexo clean<br><span class="hljs-comment"># 生成博客</span><br>hexo g<br><span class="hljs-comment"># 在本地查看生成效果</span><br>hexo s<br><span class="hljs-comment"># 部署到远端</span><br>hexo d<br></code></pre></td></tr></table></figure><p>默认的主题是landscape，很简洁，有些简陋。我个人推荐使用fluid主题，官方注释详细，功能丰富，对大多数人来说可以做到<strong>“开箱即用”</strong>。</p><p>目前fluid主题的优势有：</p><ul><li>优雅的颜值，使用 Material Design 风格突出层次感，但又不失简约，让用户能专注于写作；</li><li>提供大量定制化配置项，使每个用户使用该主题都能具有独特的样式；</li><li>响应式页面，适配手机、平板等设备，包括极端的分辨率都能轻松应对；</li><li>主题中少有的整合了 LaTeX 和 mermaid 的支持</li></ul><p>目前fluid主题支持以下功能特性：</p><ul><li>图片懒加载</li><li>自定义代码高亮方案</li><li>内置多语言</li><li>支持多款评论插件</li><li>支持使用数据文件存放配置</li><li>自定义静态资源 CDN</li><li>无比详实的用户文档</li><li>内置文章搜索</li><li>页脚备案信息</li><li>网页访问统计</li><li>支持 LaTeX 数学公式</li><li>支持 mermaid 流程图</li></ul><h2 id="2-修改主题"><a href="#2-修改主题" class="headerlink" title="2.修改主题"></a>2.修改主题</h2><h3 id="2-1-切换主题"><a href="#2-1-切换主题" class="headerlink" title="2.1.切换主题"></a>2.1.切换主题</h3><p>切换主题很简单，可以从github <a href="https://github.com/fluid-dev/hexo-theme-fluid/releases"><u><em>直接下载</em></u></a> 整个主题包放入themes文件夹下，或者<code>npm install --save hexo-theme-fluid</code>直接安装。在hexo博客根目录下创建<code>_config.fluid.yml</code>文件，并将主题包内部的<code>_config.yml</code>内容全部复制进去。如果是使用npm安装的，主题包路径为<code>[博客根目录]/node_modules/hexo-theme-fluid</code>。最后在<code>_config.yml</code>文件中将主题修改为fluid：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Extensions</span><br><span class="hljs-comment">## Plugins: https://hexo.io/plugins/</span><br><span class="hljs-comment">## Themes: https://hexo.io/themes/     landscape-plus</span><br><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span><br></code></pre></td></tr></table></figure><p>此时重新生成博客，已经可以观看到效果。</p><h3 id="2-2-修改配置"><a href="#2-2-修改配置" class="headerlink" title="2.2.修改配置"></a>2.2.修改配置</h3><h4 id="2-2-1-主题内置功能包"><a href="#2-2-1-主题内置功能包" class="headerlink" title="2.2.1.主题内置功能包"></a>2.2.1.主题内置功能包</h4><p>主题配置文件中本身已经配置了很多可选项，每一行代码都有详细的配置。推荐初次使用的人详细阅读完整个配置文件，按需开关功能。<a href="https://hexo.fluid-dev.com/docs/"><u><em>fluid官方文档</em></u></a> 对所有功能做了详细的解释，点击链接跳转。</p><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:04:07-14:03:03-image-20220407112140493.png" alt="image-20220407112140493"></p><p>主题中的资源可以进行一些替换，将默认字体替换为自己习惯的字体，路径从<code>source</code>下开始。推荐把默认背景图片可以替换为图床中的链接，这样加载比较快，否则半天加载不出来背景。用户可以自己添加自己的css，在其中覆盖一些默认样式。另外，博客中用到的所有图片最好都 <a href="https://picgo.github.io/PicGo-Core-Doc/zh/guide/config.html#默认配置文件"><u><em>上传图床</em></u></a> ，这样hexo比较容易管理资源，用起来也更流畅。</p><h3 id="2-3-公式支持"><a href="#2-3-公式支持" class="headerlink" title="2.3.公式支持"></a>2.3.公式支持</h3><p>写博客，行内公式和行间公式必不可少。然而hexo默认的引擎对latex公式渲染有点问题。请按照以下步骤修改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm uninstall hexo-renderer-marked --save<br>npm install hexo-renderer-kramed --save<br></code></pre></td></tr></table></figure><p>打开<code>/node_modules/hexo-renderer-kramed/lib/renderer.js</code>，将</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Change inline math rule</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">formatText</span>(<span class="hljs-params">text</span>) &#123;<br>    <span class="hljs-comment">// Fit kramed&#x27;s rule: $$ + \1 + $$</span><br>    <span class="hljs-keyword">return</span> text.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/`\$(.*?)\$`/g</span>, <span class="hljs-string">&#x27;$$$$$1$$$$&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>替换为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Change inline math rule</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">formatText</span>(<span class="hljs-params">text</span>) &#123;<br>    <span class="hljs-keyword">return</span> text;<br>&#125;<br></code></pre></td></tr></table></figure><p>打开<code>/node_modules/hexo-renderer-mathjax/mathjax.html</code>，将最后一行的<code>&lt;script&gt;</code>改为</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_CHTML&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>打开<code>/node_modules\kramed\lib\rules\inline.js</code>，更改第12行和22行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">escape</span>: <span class="hljs-regexp">/^\\([`*\[\]()#$+\-.!_&gt;])/</span>,<br><span class="hljs-attr">em</span>: <span class="hljs-regexp">/^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span>,<br></code></pre></td></tr></table></figure><p>在主题配置文件中将mathjax设为true，此时已经可以完美渲染行内和行间公式。</p><p>有些文章中写道<strong>卸载hexo-math安装mathjax这一步骤，本主题中不需要这样做</strong>，这样反而会导致渲染公式出问题，字体漂移。</p><h3 id="2-4-自定义css"><a href="#2-4-自定义css" class="headerlink" title="2.4.自定义css"></a>2.4.自定义css</h3><p>主题默认设置虽然动效和框体等都设计得很好，但是在文章显示方面白底黑字，太素了。为了更方便阅读，我们可以自定义css，在其中修改对markdown格式的渲染，更方便阅读。</p><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:04:07-14:03:03-image-20220407121130949.png" alt="image-20220407121130949"></p><p>在<code>sources/css</code>下新建一个<code>fluid-extention.css</code>文件，向其中添加内容。整体的css配置文件如下，此配置文件是我直接从typora主题的github.css下复制出来并修改了一部分得到的。下面来讲解每一段的配置要点和含义。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.col-lg-8</span><span class="hljs-selector-class">.nopadding-x-md</span> &gt; <span class="hljs-selector-class">.container</span><span class="hljs-selector-class">.nopadding-x-md</span> &gt; <span class="hljs-selector-id">#board</span><span class="hljs-selector-class">.py-5</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">123%</span>;<br>    <span class="hljs-attribute">left</span>: -<span class="hljs-number">23%</span>; <br>&#125;<br><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">767px</span>) &#123;<br>    <span class="hljs-selector-class">.col-lg-8</span><span class="hljs-selector-class">.nopadding-x-md</span> &gt; <span class="hljs-selector-class">.container</span><span class="hljs-selector-class">.nopadding-x-md</span> &gt; <span class="hljs-selector-id">#board</span><span class="hljs-selector-class">.py-5</span> &#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>        <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>; <br>    &#125;<br>&#125;<br><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">424px</span>) &#123;<br>    <span class="hljs-selector-class">.col-lg-8</span><span class="hljs-selector-class">.nopadding-x-md</span> &gt; <span class="hljs-selector-class">.container</span><span class="hljs-selector-class">.nopadding-x-md</span> &gt; <span class="hljs-selector-id">#board</span><span class="hljs-selector-class">.py-5</span> &#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>        <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>; <br>    &#125;<br>&#125;<br><br><span class="hljs-selector-class">.tocbot-active-link</span> &#123;<br>    <span class="hljs-attribute">font-weight</span>: bold;<br>    <span class="hljs-comment">/*color var(--link-hover-color)*/</span><br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#800000</span>;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#FA807233</span>;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;<br>&#125;<br><span class="hljs-selector-class">.toc-list-item</span><span class="hljs-selector-pseudo">::before</span> &#123;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#800000</span>;<br>&#125;<br><br><span class="hljs-selector-tag">figure</span><span class="hljs-selector-class">.highlight</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    background: #21252b;</span><br><span class="hljs-comment">    background: rgb(246,248,250);</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">246</span>,<span class="hljs-number">248</span>,<span class="hljs-number">250</span>);<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">8px</span>;<br>    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">1px</span> <span class="hljs-number">2px</span> <span class="hljs-number">22px</span> <span class="hljs-number">1px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, .<span class="hljs-number">3</span>);<br>    <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">25px</span>;<br>    <span class="hljs-attribute">z-index</span>:<span class="hljs-number">998</span>;<br>&#125;<br><br><span class="hljs-selector-tag">figure</span><span class="hljs-selector-class">.highlight</span><span class="hljs-selector-pseudo">::before</span> &#123;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#fc625d</span>;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">20px</span> <span class="hljs-number">0</span> <span class="hljs-number">#fdbc40</span>, <span class="hljs-number">40px</span> <span class="hljs-number">0</span> <span class="hljs-number">#35cd4b</span>;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27; &#x27;</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">12px</span>;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">12px</span>;<br>    <span class="hljs-attribute">margin-top</span>: -<span class="hljs-number">15px</span>;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">12px</span>;<br>    <span class="hljs-attribute">z-index</span>:<span class="hljs-number">999</span>;<br>&#125;<br><br><span class="hljs-selector-tag">a</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#173774</span>;<br>&#125;<br><span class="hljs-selector-tag">h1</span>,<br><span class="hljs-selector-tag">h2</span>,<br><span class="hljs-selector-tag">h3</span>,<br><span class="hljs-selector-tag">h4</span>,<br><span class="hljs-selector-tag">h5</span>,<br><span class="hljs-selector-tag">h6</span> &#123;<br>    <span class="hljs-attribute">position</span>: relative;<br>    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">1rem</span>;<br>    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">1rem</span>;<br>    <span class="hljs-attribute">font-weight</span>: bold;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.4</span>;<br>    <span class="hljs-attribute">cursor</span>: text;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br><span class="hljs-selector-tag">h1</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.anchor</span>,<br><span class="hljs-selector-tag">h2</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.anchor</span>,<br><span class="hljs-selector-tag">h3</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.anchor</span>,<br><span class="hljs-selector-tag">h4</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.anchor</span>,<br><span class="hljs-selector-tag">h5</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.anchor</span>,<br><span class="hljs-selector-tag">h6</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.anchor</span> &#123;<br>    <span class="hljs-attribute">text-decoration</span>: none;<br>&#125;<br><span class="hljs-selector-tag">h1</span> tt,<br><span class="hljs-selector-tag">h1</span> <span class="hljs-selector-tag">code</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: inherit;<br>&#125;<br><span class="hljs-selector-tag">h2</span> tt,<br><span class="hljs-selector-tag">h2</span> <span class="hljs-selector-tag">code</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: inherit;<br>&#125;<br><span class="hljs-selector-tag">h3</span> tt,<br><span class="hljs-selector-tag">h3</span> <span class="hljs-selector-tag">code</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: inherit;<br>&#125;<br><span class="hljs-selector-tag">h4</span> tt,<br><span class="hljs-selector-tag">h4</span> <span class="hljs-selector-tag">code</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: inherit;<br>&#125;<br><span class="hljs-selector-tag">h5</span> tt,<br><span class="hljs-selector-tag">h5</span> <span class="hljs-selector-tag">code</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: inherit;<br>&#125;<br><span class="hljs-selector-tag">h6</span> tt,<br><span class="hljs-selector-tag">h6</span> <span class="hljs-selector-tag">code</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: inherit;<br>&#125;<br><span class="hljs-selector-tag">h1</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">2.25em</span>;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.2</span>;<br>    <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#eee</span>;<br>&#125;<br><span class="hljs-selector-tag">h2</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.75em</span>  ;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.1</span>;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    border-bottom: 0px solid #eee;</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#7e3131</span>;<br>&#125;<br><br><span class="hljs-selector-tag">h3</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.5em</span>;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.1</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-built_in">RGB</span>(<span class="hljs-number">47</span>,<span class="hljs-number">85</span>,<span class="hljs-number">151</span>);<br>&#125;<br><span class="hljs-selector-tag">h4</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.25em</span>;<br>&#125;<br><span class="hljs-selector-tag">h5</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1em</span>;<br>&#125;<br><span class="hljs-selector-tag">h6</span> &#123;<br>   <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1em</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#777</span>;<br>&#125;<br><br><span class="hljs-selector-tag">p</span>,<br><span class="hljs-selector-tag">blockquote</span>,<br><span class="hljs-selector-tag">ul</span>,<br><span class="hljs-selector-tag">ol</span>,<br><span class="hljs-selector-tag">dl</span>,<br><span class="hljs-selector-tag">table</span>&#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0.8em</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">text-indent</span>: <span class="hljs-number">2em</span>; <span class="hljs-comment">/*首行缩进*/</span><br>&#125;<br><span class="hljs-selector-tag">li</span> &gt; <span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">text-indent</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.markdown-body</span> &gt; <span class="hljs-selector-tag">strong</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#be0000</span>;<br>    <span class="hljs-attribute">font-weight</span>: bold;<br>&#125;<br><br><br><span class="hljs-selector-tag">li</span>&gt;<span class="hljs-selector-tag">ol</span>,<br><span class="hljs-selector-tag">li</span>&gt;<span class="hljs-selector-tag">ul</span> &#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">text-indent</span>: <span class="hljs-number">0</span>;<br>&#125;<br>hr &#123;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">2px</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">16px</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#e7e7e7</span>;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">0</span> none;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br>    <span class="hljs-attribute">box-sizing</span>: content-box;<br>&#125;<br><br><span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.first</span> &#123;<br>    <span class="hljs-attribute">display</span>: inline-block;<br>    <span class="hljs-attribute">text-indent</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-tag">ul</span>,<br><span class="hljs-selector-tag">ol</span> &#123;<br>    <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">30px</span>;<br>&#125;<br><span class="hljs-selector-tag">ul</span><span class="hljs-selector-pseudo">:first</span>-child,<br><span class="hljs-selector-tag">ol</span><span class="hljs-selector-pseudo">:first</span>-child &#123;<br>    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">text-indent</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-tag">ul</span><span class="hljs-selector-pseudo">:last-child</span>,<br><span class="hljs-selector-tag">ol</span><span class="hljs-selector-pseudo">:last-child</span> &#123;<br>    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">text-indent</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-tag">blockquote</span> &#123;<br>    <span class="hljs-attribute">border-left</span>: <span class="hljs-number">4px</span> solid <span class="hljs-number">#dfe2e5</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">15px</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#777777</span>;<br>&#125;<br><span class="hljs-selector-tag">blockquote</span> <span class="hljs-selector-tag">blockquote</span> &#123;<br>    <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-tag">table</span> &#123;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">word-break</span>: initial;<br>    <span class="hljs-attribute">overflow-x</span>: auto;<br>    <span class="hljs-attribute">max-height</span>: <span class="hljs-number">22em</span>;<br>    <span class="hljs-attribute">overflow-y</span>: auto <span class="hljs-meta">!important</span>;<br>&#125;<br><span class="hljs-selector-tag">table</span> <span class="hljs-selector-tag">tr</span> &#123;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#dfe2e5</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-tag">table</span> <span class="hljs-selector-tag">tr</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>n),<br><span class="hljs-selector-tag">thead</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f8f8f8</span>;<br>&#125;<br><span class="hljs-selector-tag">table</span> <span class="hljs-selector-tag">th</span> &#123;<br>    <span class="hljs-attribute">font-weight</span>: bold;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#dfe2e5</span>;<br>    <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">6px</span> <span class="hljs-number">13px</span>;<br>&#125;<br><span class="hljs-selector-tag">table</span> <span class="hljs-selector-tag">td</span> &#123;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#dfe2e5</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">6px</span> <span class="hljs-number">13px</span>;<br>&#125;<br><span class="hljs-selector-tag">table</span> <span class="hljs-selector-tag">th</span><span class="hljs-selector-pseudo">:first</span>-child,<br><span class="hljs-selector-tag">table</span> <span class="hljs-selector-tag">td</span><span class="hljs-selector-pseudo">:first</span>-child &#123;<br>    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-tag">table</span> <span class="hljs-selector-tag">th</span><span class="hljs-selector-pseudo">:last-child</span>,<br><span class="hljs-selector-tag">table</span> <span class="hljs-selector-tag">td</span><span class="hljs-selector-pseudo">:last-child</span> &#123;<br>    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.CodeMirror-lines</span> &#123;<br>    <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">4px</span>;<br>    <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;font/CONSOLA.TTF&quot;</span>;<br>&#125;<br><br><span class="hljs-selector-class">.code-tooltip</span> &#123;<br>    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">1px</span> <span class="hljs-number">1px</span> <span class="hljs-number">0</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">28</span>,<span class="hljs-number">36</span>,.<span class="hljs-number">3</span>);<br>    <span class="hljs-comment">/* border-top: 1px solid #eef2f2; */</span><br>&#125;<br><br><span class="hljs-selector-class">.md-fences</span>,<br><span class="hljs-selector-tag">code</span>,<br>tt &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    border: 1px solid #e7eaed;</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    background-color: #f8f8f8;</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0px</span> <span class="hljs-number">0px</span> <span class="hljs-number">0px</span> <span class="hljs-number">0px</span>;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.9em</span>;<br>    <span class="hljs-attribute">text-indent</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-tag">code</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#dddddde6</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">0px</span> <span class="hljs-number">0</span> <span class="hljs-number">0px</span>;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;<br>    <span class="hljs-attribute">text-indent</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#e17523</span>;<br>&#125;<br><br><span class="hljs-selector-class">.md-fences</span> &#123;<br>    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">15px</span>;<br>    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">15px</span>;<br>    <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">8px</span>;<br>    <span class="hljs-attribute">padding-bottom</span>: <span class="hljs-number">6px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.md-task-list-item</span> &gt; <span class="hljs-selector-tag">input</span> &#123;<br>  <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">1.3em</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="2-4-1-Mac风格代码块"><a href="#2-4-1-Mac风格代码块" class="headerlink" title="2.4.1.Mac风格代码块"></a>2.4.1.Mac风格代码块</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">figure</span><span class="hljs-selector-class">.highlight</span> &#123; <span class="hljs-comment">/* 控制代码框顶栏颜色、宽度、圆角等 */</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    background: #21252b;</span><br><span class="hljs-comment">    background: rgb(246,248,250);</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">246</span>,<span class="hljs-number">248</span>,<span class="hljs-number">250</span>);<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">8px</span>;<br>    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">1px</span> <span class="hljs-number">2px</span> <span class="hljs-number">22px</span> <span class="hljs-number">1px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, .<span class="hljs-number">3</span>);<br>    <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">25px</span>;<br>    <span class="hljs-attribute">z-index</span>:<span class="hljs-number">998</span>;<br>&#125;<br><br><span class="hljs-selector-tag">figure</span><span class="hljs-selector-class">.highlight</span><span class="hljs-selector-pseudo">::before</span> &#123; <span class="hljs-comment">/* 绘制三个小圆点 */</span><br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#fc625d</span>;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">20px</span> <span class="hljs-number">0</span> <span class="hljs-number">#fdbc40</span>, <span class="hljs-number">40px</span> <span class="hljs-number">0</span> <span class="hljs-number">#35cd4b</span>;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27; &#x27;</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">12px</span>;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">12px</span>;<br>    <span class="hljs-attribute">margin-top</span>: -<span class="hljs-number">15px</span>;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">12px</span>;<br>    <span class="hljs-attribute">z-index</span>:<span class="hljs-number">999</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>此段代码修改自 <a href="https://jin-yuhan.github.io/posts/60584518/"><u><em>jin-yuhan同学</em></u></a>。他实际上只制作了代码框的顶栏，没有和原本的框匹配。我对代码进行了一点修改：更改了颜色，缩减了顶栏宽度，为解决图标覆盖问题添加了<code>z-index</code>来使其置于最上层显示。对代码框还有一些修改，我将在后面介绍。</p><h4 id="2-4-2-标题颜色"><a href="#2-4-2-标题颜色" class="headerlink" title="2.4.2.标题颜色"></a>2.4.2.标题颜色</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 此段代码修改了行高和div溢出隐藏。如果不设置溢出隐藏那么标题的div框会覆盖上下的文字</span><br><span class="hljs-comment">   这些文字无法选中，链接无法点开，十分影响使用体验 */</span><br><span class="hljs-selector-tag">h1</span>,<span class="hljs-selector-tag">h2</span>,<span class="hljs-selector-tag">h3</span>,<span class="hljs-selector-tag">h4</span>,<span class="hljs-selector-tag">h5</span>,<span class="hljs-selector-tag">h6</span> &#123;<br>    <span class="hljs-attribute">position</span>: relative;<br>    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">1rem</span>;<br>    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">1rem</span>;<br>    <span class="hljs-attribute">font-weight</span>: bold;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.4</span>;<br>    <span class="hljs-attribute">cursor</span>: text;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 此段代码修改了六个等级标题、多行引用、行内代码的样式，在颜色和行高字号上产生区分 */</span><br><span class="hljs-selector-tag">h1</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">2.25em</span>;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.2</span>;<br>    <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#eee</span>;<br>&#125;<br><span class="hljs-selector-tag">h2</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.75em</span>  ;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.1</span>;<br>    <span class="hljs-comment">/* border-bottom: 0px solid #eee; */</span><br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#7e3131</span>;<br>&#125;<br><span class="hljs-selector-tag">h3</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.5em</span>;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.1</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-built_in">RGB</span>(<span class="hljs-number">47</span>,<span class="hljs-number">85</span>,<span class="hljs-number">151</span>);<br>&#125;<br><span class="hljs-selector-tag">h4</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.25em</span>;<br>&#125;<br><span class="hljs-selector-tag">h5</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1em</span>;<br>&#125;<br><span class="hljs-selector-tag">h6</span> &#123;<br>   <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1em</span>;<br>   <span class="hljs-attribute">color</span>: <span class="hljs-number">#777</span>;<br>&#125;<br><span class="hljs-selector-tag">blockquote</span> &#123;<br>    <span class="hljs-attribute">border-left</span>: <span class="hljs-number">4px</span> solid <span class="hljs-number">#dfe2e5</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">15px</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#777777</span>;<br>&#125;<br><span class="hljs-selector-tag">code</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#dddddde6</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">0px</span> <span class="hljs-number">0</span> <span class="hljs-number">0px</span>;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;<br>    <span class="hljs-attribute">text-indent</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#e17523</span>;<br>&#125;<br><span class="hljs-selector-tag">strong</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#be0000</span>;<br>    <span class="hljs-attribute">font-weight</span>: bold;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-4-3-首行缩进"><a href="#2-4-3-首行缩进" class="headerlink" title="2.4.3.首行缩进"></a>2.4.3.首行缩进</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">text-indent</span>: <span class="hljs-number">2em</span>; <span class="hljs-comment">/*首行缩进*/</span><br>&#125;<br><span class="hljs-selector-tag">li</span> &gt; <span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">text-indent</span>: <span class="hljs-number">0</span>; <span class="hljs-comment">/*防止列表也被缩进*/</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>也可以使用<code>&amp;emsp;&amp;emsp;</code>来手动缩进。</p></blockquote><h4 id="2-4-4-代码框表格框折叠"><a href="#2-4-4-代码框表格框折叠" class="headerlink" title="2.4.4.代码框表格框折叠"></a>2.4.4.代码框表格框折叠</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 代码和表格设置最大高度，高度或宽度超出都不会显示在页面中，可以通过滚动条查看 */</span><br><span class="hljs-selector-tag">table</span> &#123;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">word-break</span>: initial;<br>    <span class="hljs-attribute">overflow-x</span>: auto;<br>    <span class="hljs-attribute">max-height</span>: <span class="hljs-number">22em</span>;<br>    <span class="hljs-attribute">overflow-y</span>: auto <span class="hljs-meta">!important</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>顺带一提，我本来想实现的效果是这样的：</p><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:04:07-14:03:03-image-20220407130641231.png" alt="image-20220407130641231" style="zoom:50%;" /></p><p>但是 <a href="https://blog.jijian.link/2020-02-26/hexo-article-code-add-unfold/"><u><em>这个博客</em></u></a> 对landscape主题的修改不适合于fluid主题。对他的方法记录如下，有兴趣的小伙伴可以自己探索一下。</p><p>添加文件 <code>themes/landscape/source/js/code-unfold.js</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">CODE_MAX_HEIGHT</span> = <span class="hljs-number">200</span>;<br><span class="hljs-keyword">const</span> containers = [];<br><br><span class="hljs-comment">// 展开</span><br>$(<span class="hljs-string">&#x27;body&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-string">&#x27;.js_unfold_code_btn&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">closest</span>(<span class="hljs-string">&#x27;.js_highlight_container&#x27;</span>).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&#x27;on&#x27;</span>);<br>&#125;);<br><span class="hljs-comment">// 收起</span><br>$(<span class="hljs-string">&#x27;body&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-string">&#x27;.js_retract_code_btn&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> $container = $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">closest</span>(<span class="hljs-string">&#x27;.js_highlight_container&#x27;</span>).<span class="hljs-title function_">removeClass</span>(<span class="hljs-string">&#x27;on&#x27;</span>);<br>  <span class="hljs-keyword">const</span> winTop = $(<span class="hljs-variable language_">window</span>).<span class="hljs-title function_">scrollTop</span>();<br>  <span class="hljs-keyword">const</span> offsetTop = $container.<span class="hljs-title function_">offset</span>().<span class="hljs-property">top</span>;<br>  $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;top&#x27;</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">if</span> (winTop &gt; offsetTop) &#123;<br>    <span class="hljs-comment">// 设置滚动条位置</span><br>    $(<span class="hljs-string">&#x27;body, html&#x27;</span>).<span class="hljs-title function_">animate</span>(&#123;<br>      <span class="hljs-attr">scrollTop</span>: $container.<span class="hljs-title function_">offset</span>().<span class="hljs-property">top</span> - <span class="hljs-variable constant_">CODE_MAX_HEIGHT</span><br>    &#125;, <span class="hljs-number">600</span>);<br>  &#125;<br>&#125;);<br><span class="hljs-comment">// 滚动事件，触发动画效果</span><br>$(<span class="hljs-variable language_">window</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;scroll&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> scrollTop = $(<span class="hljs-variable language_">window</span>).<span class="hljs-title function_">scrollTop</span>();<br>  <span class="hljs-keyword">const</span> temp = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; containers.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">const</span> item = containers[i];<br>    <span class="hljs-keyword">const</span> &#123; $container, height, $hide, hasHorizontalScrollbar &#125; = item;<br>    <span class="hljs-keyword">if</span> ($container.<span class="hljs-title function_">closest</span>(<span class="hljs-string">&#x27;body&#x27;</span>).<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-comment">// 如果 $container 元素已经不在页面上, 则删除该元素</span><br>      <span class="hljs-comment">// 防止pjax页面跳转之后，元素未删除</span><br>      <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    temp.<span class="hljs-title function_">push</span>(item);<br>    <span class="hljs-keyword">if</span> (!$container.<span class="hljs-title function_">hasClass</span>(<span class="hljs-string">&#x27;on&#x27;</span>)) &#123;<br>      <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    <span class="hljs-keyword">const</span> offsetTop = $container.<span class="hljs-title function_">offset</span>().<span class="hljs-property">top</span>;<br>    <span class="hljs-keyword">const</span> hideBtnHeight = $hide.<span class="hljs-title function_">outerHeight</span>();<br>    <span class="hljs-comment">// 减去按钮高度，减去底部滚动条高度</span><br>    <span class="hljs-keyword">const</span> maxTop = <span class="hljs-built_in">parseInt</span>(height - (hasHorizontalScrollbar ? <span class="hljs-number">17</span> : <span class="hljs-number">0</span>) - hideBtnHeight);<br>    <span class="hljs-keyword">let</span> top = <span class="hljs-built_in">parseInt</span>(<br>      <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(<br>        <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(scrollTop - offsetTop, <span class="hljs-number">0</span>), <span class="hljs-comment">// 如果小于 0 ，则取 0</span><br>        maxTop,<span class="hljs-comment">// 如果大于 height ，则取 height</span><br>      )<br>    );<br>    <span class="hljs-comment">// 根据 sin 曲线设置&quot;收起代码&quot;位置</span><br>    <span class="hljs-keyword">const</span> halfHeight = <span class="hljs-built_in">parseInt</span>($(<span class="hljs-variable language_">window</span>).<span class="hljs-title function_">height</span>() / <span class="hljs-number">2</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sin</span>((top / maxTop) * <span class="hljs-number">90</span> * (<span class="hljs-number">2</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>/<span class="hljs-number">360</span>)));<br>    $hide.<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;top&#x27;</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(top + halfHeight, maxTop));<br>  &#125;<br>  containers = temp;<br>&#125;);<br><br><span class="hljs-comment">// 添加隐藏容器</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">addCodeWrap</span> = (<span class="hljs-params">$node</span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> $container = $node.<span class="hljs-title function_">wrap</span>(<span class="hljs-string">&#x27;&lt;div class=&quot;js_highlight_container highlight-container&quot;&gt;&lt;div class=&quot;highlight-wrap&quot;&gt;&lt;/div&gt;&lt;/div&gt;&#x27;</span>).<span class="hljs-title function_">closest</span>(<span class="hljs-string">&#x27;.js_highlight_container&#x27;</span>);<br><br>  <span class="hljs-comment">// 底部 &quot;展开代码&quot; 与 侧边栏 &quot;收起代码&quot;</span><br>  <span class="hljs-keyword">const</span> $btn = $(<span class="hljs-string">`</span><br><span class="hljs-string">    &lt;div class=&quot;highlight-footer&quot;&gt;</span><br><span class="hljs-string">      &lt;a class=&quot;js_unfold_code_btn show-btn&quot; href=&quot;javascript:;&quot;&gt;展开代码&lt;i class=&quot;fa fa-angle-down&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/a&gt;</span><br><span class="hljs-string">    &lt;/div&gt;</span><br><span class="hljs-string">    &lt;a class=&quot;js_retract_code_btn hide-btn&quot; href=&quot;javascript:;&quot;&gt;&lt;i class=&quot;fa fa-angle-up&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;收起代码&lt;/a&gt;</span><br><span class="hljs-string">  `</span>);<br><br>  $container.<span class="hljs-title function_">append</span>($btn);<br>  <span class="hljs-keyword">return</span> $container;<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">ret</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  $(<span class="hljs-string">&#x27;.highlight&#x27;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 防止重复渲染</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">__render__</span> === <span class="hljs-literal">true</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">__render__</span> = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">const</span> $this = $(<span class="hljs-variable language_">this</span>);<br>    <span class="hljs-keyword">const</span> height = $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">outerHeight</span>();<br>    <span class="hljs-keyword">if</span> (height &gt; <span class="hljs-variable constant_">CODE_MAX_HEIGHT</span>) &#123;<br>      <span class="hljs-comment">// 添加展开&amp;收起容器</span><br>      <span class="hljs-keyword">const</span> $container = <span class="hljs-title function_">addCodeWrap</span>($this, height);<br>      containers.<span class="hljs-title function_">push</span>(&#123;<br>        $container,<br>        height,<br>        <span class="hljs-attr">$hide</span>: $container.<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;.js_retract_code_btn&#x27;</span>),<br>        <span class="hljs-attr">hasHorizontalScrollbar</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">scrollWidth</span> &gt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">offsetWidth</span>,<br>      &#125;);<br>    &#125;<br>  &#125;);<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> ret;<br></code></pre></td></tr></table></figure><p>引入js并执行，修改文件 <code>themes/landscape/source/js/search.js</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">+ <span class="hljs-keyword">import</span> codeUnfold <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./code-unfold&#x27;</span>;<br>+ <span class="hljs-title function_">codeUnfold</span>();<br></code></pre></td></tr></table></figure><p>添加样式，修改文件 <code>themes/landscape/source/css/_partial/highlight.styl</code>。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// 展开收起效果</span><br><span class="hljs-selector-class">.highlight-container</span><br>  <span class="hljs-attribute">position</span>: relative<br>  <span class="hljs-attribute">background-color</span>: highlight-background<br>  &amp;<span class="hljs-selector-class">.on</span><br>    <span class="hljs-selector-class">.highlight-footer</span><br>      <span class="hljs-attribute">display</span>: none<br>    <span class="hljs-selector-class">.hide-btn</span><br>      <span class="hljs-attribute">display</span>: flex<br>    <span class="hljs-selector-class">.highlight-wrap</span><br>      <span class="hljs-attribute">max-height</span>: none<br>  <span class="hljs-selector-class">.highlight-wrap</span><br>    <span class="hljs-attribute">overflow</span>: hidden<br>    <span class="hljs-attribute">max-height</span>: <span class="hljs-number">200px</span><br>  <span class="hljs-selector-class">.highlight-footer</span><br>    <span class="hljs-attribute">position</span> absolute<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span><br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span><br>    <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span><br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">60px</span><br>    <span class="hljs-attribute">background-image</span>: <span class="hljs-string">&#x27;linear-gradient(-180deg, rgba(255,255,255,0) 0%, %s 65%)&#x27;</span> % highlight-background;<br>    <span class="hljs-attribute">text-align</span>: center<br>  <span class="hljs-selector-class">.show-btn</span><br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span><br>    <span class="hljs-attribute">position</span>: absolute<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span><br>    <span class="hljs-attribute">transform</span>: translateX(-<span class="hljs-number">50%</span>)<br>    <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span><br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">2.6em</span><br>    <span class="hljs-attribute">text-decoration</span>: none<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">0.8em</span><br>    <span class="hljs-selector-pseudo">&amp;:hover</span><br>      <span class="hljs-attribute">text-decoration</span>: none<br>  <span class="hljs-selector-class">.hide-btn</span><br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span><br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span><br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">22px</span><br>    <span class="hljs-attribute">position</span>: absolute<br>    <span class="hljs-attribute">left</span>: -<span class="hljs-number">21px</span><br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span><br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1em</span><br>    <span class="hljs-attribute">text-decoration</span>: none<br>    <span class="hljs-attribute">text-align</span>: center<br>    <span class="hljs-attribute">display</span>: none<br>    <span class="hljs-attribute">flex-direction</span>: column<br>    <span class="hljs-attribute">background-color</span>: highlight-background<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">4px</span><br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0.1em</span> <span class="hljs-number">0</span> <span class="hljs-number">0.6em</span><br>    <span class="hljs-attribute">transition</span>: top ease <span class="hljs-number">0.35s</span><br>    <span class="hljs-selector-pseudo">&amp;:hover</span><br>      <span class="hljs-attribute">text-decoration</span>: none<br>  <span class="hljs-selector-class">.fa-angle-up</span>,<br>  <span class="hljs-selector-class">.fa-angle-down</span><br>    <span class="hljs-attribute">font-family</span>: font-icon<br>    <span class="hljs-attribute">font-style</span>: normal<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#ca0c16</span><br>  <span class="hljs-selector-class">.fa-angle-up</span><span class="hljs-selector-pseudo">:before</span><br>    <span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;\f106&quot;</span><br>  <span class="hljs-selector-class">.fa-angle-down</span><span class="hljs-selector-pseudo">:before</span><br>    <span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;\f107&quot;</span><br>    <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">0.5em</span><br></code></pre></td></tr></table></figure><p>重启项目，查看效果。</p><h4 id="2-4-5-修改光标样式"><a href="#2-4-5-修改光标样式" class="headerlink" title="2.4.5.修改光标样式"></a>2.4.5.修改光标样式</h4><p>将鼠标样式更改为这个可爱的形状。</p><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:04:09-01:13:45-image-20220409011325987.png" alt="image-20220409011325987" style="zoom: 50%;" /></p><p>在自定义css中添加如下代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span>, <span class="hljs-selector-tag">header</span>, <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.mask</span><span class="hljs-selector-class">.flex-center</span>, <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.scroll-down-bar</span>, <span class="hljs-selector-id">#banner</span><span class="hljs-selector-class">.banner</span>, <span class="hljs-selector-tag">h1</span>,<span class="hljs-selector-tag">h2</span>,<span class="hljs-selector-tag">h3</span>,<span class="hljs-selector-tag">h4</span>,<span class="hljs-selector-tag">h5</span>,<span class="hljs-selector-tag">h6</span> &#123;<br>    <span class="hljs-attribute">cursor</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/a11.cur</span>), auto;<br>&#125;<br><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span>, <span class="hljs-selector-tag">button</span><span class="hljs-selector-pseudo">:hover</span>, <span class="hljs-selector-tag">i</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>    <span class="hljs-attribute">cursor</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/a22.cur</span>), auto;<br>&#125;<br><br><span class="hljs-selector-id">#rightside</span>&gt;<span class="hljs-selector-tag">div</span>&gt;<span class="hljs-selector-tag">button</span>,<br><span class="hljs-selector-id">#rightside</span>&gt;<span class="hljs-selector-tag">div</span>&gt;<span class="hljs-selector-tag">a</span> &#123;<br>    <span class="hljs-attribute">display</span>: block;<br>    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">2px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">30px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--btn-color);<br>    <span class="hljs-attribute">text-align</span>: center;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br>    <span class="hljs-attribute">cursor</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/a22.cur</span>), auto;<br>&#125;<br><br><span class="hljs-comment">/* 文章标签 */</span><br><span class="hljs-selector-class">.layout_post</span> <span class="hljs-selector-class">.tag_share</span> <span class="hljs-selector-class">.post-meta__tags</span> &#123;<br>    <span class="hljs-attribute">cursor</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/a22.cur</span>), auto;<br>&#125;<br><span class="hljs-comment">/* 评论区 */</span><br><span class="hljs-selector-class">.vcol</span> * &#123;<br>    <span class="hljs-attribute">cursor</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/a22.cur</span>), auto;<br>&#125;<br><span class="hljs-selector-class">.v</span><span class="hljs-selector-attr">[data-class=v]</span> <span class="hljs-selector-class">.vicon</span> &#123;<br>    <span class="hljs-attribute">cursor</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/a22.cur</span>), auto;<br>&#125;<br><span class="hljs-selector-class">.v</span><span class="hljs-selector-attr">[data-class=v]</span> <span class="hljs-selector-class">.vbtn</span> &#123;<br>    <span class="hljs-attribute">cursor</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/a22.cur</span>), auto;<br>&#125;<br><span class="hljs-comment">/* 回复 */</span><br><span class="hljs-selector-class">.vat</span> &#123;<br>    <span class="hljs-attribute">cursor</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/a22.cur</span>), auto;<br>&#125;<br><span class="hljs-comment">/*分页器*/</span><br><span class="hljs-selector-id">#pagination</span> <span class="hljs-selector-class">.page-number</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>    <span class="hljs-attribute">cursor</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/a22.cur</span>), auto;<br>&#125;<br><span class="hljs-comment">/* 分页器的三个点(...) */</span><br><span class="hljs-selector-class">.space</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#00c4b6</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在有链接的地方光标形状会变为一个小手，其余地方光标会是一个小箭头。实质上是在css中规定了光标在什么位置用什么图片来显示光标。代码的前三行尽可能覆盖了所有位置，确保光标显示不会失效；其余的代码都是在判断各种需要跳转链接的条件。注意进行此项美化会导致<strong>大量的网络请求</strong>（虽然不会有大数据传输，但大量请求仍然很慢），其直观表现就是<strong>网页加载变慢</strong>。</p><h4 id="2-4-6-加宽文章显示框"><a href="#2-4-6-加宽文章显示框" class="headerlink" title="2.4.6.加宽文章显示框"></a>2.4.6.加宽文章显示框</h4><p>fluid主题默认的文本主体框在中间，右边是目录，左边空着。这样既不好看，空间利用也不好。打开浏览器检查页面元素，可以看到文章主体的“盒子”名称为<code>#board.py-5</code>。可以直接在自定义css中修改其属性，向左偏移，宽度增加。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.col-lg-8</span><span class="hljs-selector-class">.nopadding-x-md</span> &gt; <span class="hljs-selector-class">.container</span><span class="hljs-selector-class">.nopadding-x-md</span> &gt; <span class="hljs-selector-id">#board</span><span class="hljs-selector-class">.py-5</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">123%</span>;<br>    <span class="hljs-attribute">left</span>: -<span class="hljs-number">23%</span>; <br>&#125;<br><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">767px</span>) &#123;<br>    <span class="hljs-selector-class">.col-lg-8</span><span class="hljs-selector-class">.nopadding-x-md</span> &gt; <span class="hljs-selector-class">.container</span><span class="hljs-selector-class">.nopadding-x-md</span> &gt; <span class="hljs-selector-id">#board</span><span class="hljs-selector-class">.py-5</span> &#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>        <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>; <br>    &#125;<br>&#125;<br><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">424px</span>) &#123;<br>    <span class="hljs-selector-class">.col-lg-8</span><span class="hljs-selector-class">.nopadding-x-md</span> &gt; <span class="hljs-selector-class">.container</span><span class="hljs-selector-class">.nopadding-x-md</span> &gt; <span class="hljs-selector-id">#board</span><span class="hljs-selector-class">.py-5</span> &#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>        <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>; <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意此主体所有中间页面都叫这个名称，但是在除了文章页以外的地方没有右侧的目录，所以需要用父类确定是文章页的文章主体盒子。</p><p>在稍窄的屏幕上（对应于平板竖屏）右侧的目录栏不显示，在更窄的屏幕上（对应于手机竖屏）文章主体框塞满屏幕。此时再偏移会导致无法阅读，因此应当对屏幕分辨率不同时做不同设计，没有目录时也不加偏移。</p><h4 id="2-4-7-修改目录样式"><a href="#2-4-7-修改目录样式" class="headerlink" title="2.4.7.修改目录样式"></a>2.4.7.修改目录样式</h4><p>默认的目录样式不会改变字体颜色，只是左边有一个小线提醒。这样不够显眼，用起来不方便。我们可以将其改成字体和底色都带颜色的样式。观察定义文章样式的源码文件<code>Blog/node_modules/hexo-theme-fluid/source/css/_pages/_post/post.styl</code>，可以发现定义目录的css块类名。在自定义css中添加如下代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.tocbot-active-link</span> &#123;<br>    <span class="hljs-attribute">font-weight</span>: bold;<br>    <span class="hljs-comment">/*color var(--link-hover-color)*/</span><br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#800000</span>;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#FA807233</span>;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;<br>&#125;<br><span class="hljs-selector-class">.toc-list-item</span><span class="hljs-selector-pseudo">::before</span> &#123;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#800000</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用上述代码可以将背景改为粉色，字体和左侧提示线都是红色，且加上了圆角。</p><h3 id="2-5-自定义js"><a href="#2-5-自定义js" class="headerlink" title="2.5.自定义js"></a>2.5.自定义js</h3><h4 id="2-5-1-光标跟随小星星"><a href="#2-5-1-光标跟随小星星" class="headerlink" title="2.5.1.光标跟随小星星"></a>2.5.1.光标跟随小星星</h4><p>如图所示，移动光标时后面跟随产生小星星。</p><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:04:09-01:43:44-image-20220409014335320.png" alt="image-20220409014335320" style="zoom:50%;" /></p><p>在<code>[Blog]/sources</code>文件夹下新建js文件夹，新建<code>star.js</code>文件，写入如下代码。修改<code>_config.fluid.yml</code>文件，添加自定义js文件。<code>custom_js: &quot;/js/star.js&quot;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">t</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title function_">i</span>(),<br>        <span class="hljs-title function_">a</span>()<br>    &#125;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">i</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;mousemove&quot;</span>, o),<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;touchmove&quot;</span>, e),<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;touchstart&quot;</span>, e),<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;resize&quot;</span>, n)<br>    &#125;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">n</span>(<span class="hljs-params">t</span>) &#123;<br>        d = <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>,<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span><br>    &#125;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">e</span>(<span class="hljs-params">t</span>) &#123;<br>        <span class="hljs-keyword">if</span> (t.<span class="hljs-property">touches</span>.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; t.<span class="hljs-property">touches</span>.<span class="hljs-property">length</span>; i++) <span class="hljs-title function_">s</span>(t.<span class="hljs-property">touches</span>[i].<span class="hljs-property">clientX</span>, t.<span class="hljs-property">touches</span>[i].<span class="hljs-property">clientY</span>, r[<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * r.<span class="hljs-property">length</span>)])<br>    &#125;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">o</span>(<span class="hljs-params">t</span>) &#123;<br>        u.<span class="hljs-property">x</span> = t.<span class="hljs-property">clientX</span>,<br>        u.<span class="hljs-property">y</span> = t.<span class="hljs-property">clientY</span>,<br>        <span class="hljs-title function_">s</span>(u.<span class="hljs-property">x</span>, u.<span class="hljs-property">y</span>, r[<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * r.<span class="hljs-property">length</span>)])<br>    &#125;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">s</span>(<span class="hljs-params">t, i, n</span>) &#123;<br>        <span class="hljs-keyword">var</span> e = <span class="hljs-keyword">new</span> l;<br>        e.<span class="hljs-title function_">init</span>(t, i, n),<br>        f.<span class="hljs-title function_">push</span>(e)<br>    &#125;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">h</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> t = <span class="hljs-number">0</span>; t &lt; f.<span class="hljs-property">length</span>; t++) f[t].<span class="hljs-title function_">update</span>();<br>        <span class="hljs-keyword">for</span> (t = f.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>; t &gt;= <span class="hljs-number">0</span>; t--) f[t].<span class="hljs-property">lifeSpan</span> &lt; <span class="hljs-number">0</span> &amp;&amp; (f[t].<span class="hljs-title function_">die</span>(), f.<span class="hljs-title function_">splice</span>(t, <span class="hljs-number">1</span>))<br>    &#125;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title function_">requestAnimationFrame</span>(a),<br>        <span class="hljs-title function_">h</span>()<br>    &#125;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">l</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">character</span> = <span class="hljs-string">&quot;*&quot;</span>,<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">lifeSpan</span> = <span class="hljs-number">100</span>, <span class="hljs-comment">// 就靠它调整速度啦</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">initialStyles</span> = &#123;<br>            <span class="hljs-attr">position</span>: <span class="hljs-string">&quot;fixed&quot;</span>,<br>            <span class="hljs-attr">top</span>: <span class="hljs-string">&quot;0&quot;</span>,<br>            <span class="hljs-attr">display</span>: <span class="hljs-string">&quot;block&quot;</span>,<br>            <span class="hljs-attr">pointerEvents</span>: <span class="hljs-string">&quot;none&quot;</span>,<br>            <span class="hljs-string">&quot;z-index&quot;</span>: <span class="hljs-string">&quot;10000000&quot;</span>, <span class="hljs-comment">// 覆盖在最上层显示</span><br>            <span class="hljs-attr">fontSize</span>: <span class="hljs-string">&quot;20px&quot;</span>,<br>            <span class="hljs-string">&quot;will-change&quot;</span>: <span class="hljs-string">&quot;transform&quot;</span><br>        &#125;,<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">init</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">t, i, n</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">velocity</span> = &#123;<br>                <span class="hljs-attr">x</span>: (<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() &lt; <span class="hljs-number">.5</span> ? -<span class="hljs-number">1</span> : <span class="hljs-number">1</span>) * (<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">1.25</span>), <span class="hljs-comment">// 横向发散的程度</span><br>                <span class="hljs-attr">y</span>: <span class="hljs-number">1</span><br>            &#125;,<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">position</span> = &#123;<br>                <span class="hljs-attr">x</span>: t - <span class="hljs-number">5</span>, <span class="hljs-comment">// 出小星星相对于光标尖尖的位置</span><br>                <span class="hljs-attr">y</span>: i - <span class="hljs-number">15</span><br>            &#125;,<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">initialStyles</span>.<span class="hljs-property">color</span> = n,<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(n),<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">element</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;span&quot;</span>),<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">element</span>.<span class="hljs-property">innerHTML</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">character</span>,<br>            <span class="hljs-title function_">c</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">element</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">initialStyles</span>),<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">update</span>(),<br>            <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">element</span>)<br>        &#125;,<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">update</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">position</span>.<span class="hljs-property">x</span> += <span class="hljs-variable language_">this</span>.<span class="hljs-property">velocity</span>.<span class="hljs-property">x</span>,<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">position</span>.<span class="hljs-property">y</span> += <span class="hljs-variable language_">this</span>.<span class="hljs-property">velocity</span>.<span class="hljs-property">y</span>,<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">lifeSpan</span>--,<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">element</span>.<span class="hljs-property">style</span>.<span class="hljs-property">transform</span> = <span class="hljs-string">&quot;translate3d(&quot;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">position</span>.<span class="hljs-property">x</span> + <span class="hljs-string">&quot;px,&quot;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">position</span>.<span class="hljs-property">y</span> + <span class="hljs-string">&quot;px,0) scale(&quot;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">lifeSpan</span> / <span class="hljs-number">120</span> + <span class="hljs-string">&quot;)&quot;</span><br>        &#125;,<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">die</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">element</span>.<span class="hljs-property">parentNode</span>.<span class="hljs-title function_">removeChild</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">element</span>)<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">c</span>(<span class="hljs-params">t, i</span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> n <span class="hljs-keyword">in</span> i) t.<span class="hljs-property">style</span>[n] = i[n]<br>    &#125;<br>    <span class="hljs-keyword">var</span> r = [<span class="hljs-string">&quot;#D61C59&quot;</span>, <span class="hljs-string">&quot;#E7D84B&quot;</span>, <span class="hljs-string">&quot;#1B8798&quot;</span>],<br>    d = <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>,<br>    u = (<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>, &#123;<br>        <span class="hljs-attr">x</span>: d / <span class="hljs-number">2</span>,<br>        <span class="hljs-attr">y</span>: d / <span class="hljs-number">2</span><br>    &#125;),<br>    f = [];<br>    <span class="hljs-title function_">t</span>()<br>&#125;)();<br></code></pre></td></tr></table></figure><p>修改代码中的数字可以自定义显示效果（已经给出注释）。顺带一提，听说<strong>js写成一行运行效率高</strong>。对js序列化时别忘了去掉注释，否则注释后面的代码就全注释掉了。</p><h4 id="2-5-2-看板娘"><a href="#2-5-2-看板娘" class="headerlink" title="2.5.2.看板娘"></a>2.5.2.看板娘</h4><p>在页面右下角添加一个人偶，添加后如图所示。人物的眼神可以跟着鼠标走，点击可以发出声音并显示对话框（我嫌占地方，没配置对话框）。</p><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:04:09-19:52:05-image-20220409171852339.png" alt="image-20220409171852339" style="zoom: 33%;" /></p><p>制作2D会动的人物一般需要自己制作模型或者购买模型。官方有几个免费的模型，我们直接使用。添加自定义js如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Live</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;script&#x27;</span>);<br><span class="hljs-title class_">Live</span>.<span class="hljs-property">src</span> = <span class="hljs-string">&quot;https://eqcn.ajz.miesnfu.com/wp-content/plugins/wp-3d-pony/live2dw/lib/L2Dwidget.min.js&quot;</span>;<br><span class="hljs-title class_">Live</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    L2Dwidget.<span class="hljs-title function_">init</span>(&#123;<br>        <span class="hljs-string">&quot;model&quot;</span>: &#123;<br>            <span class="hljs-attr">jsonPath</span>: <span class="hljs-string">&quot;https://unpkg.com/live2d-widget-model-shizuku@1.0.5/assets/shizuku.model.json&quot;</span>,<br>            <span class="hljs-string">&quot;scale&quot;</span>: <span class="hljs-number">1</span><br>        &#125;,<br>        <span class="hljs-string">&quot;display&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;position&quot;</span>: <span class="hljs-string">&quot;right&quot;</span>,<br>            <span class="hljs-string">&quot;width&quot;</span>: <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">clientWidth</span> * <span class="hljs-number">0.07</span>,<br>            <span class="hljs-string">&quot;height&quot;</span>: <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">clientWidth</span> * <span class="hljs-number">0.14</span>,<br>            <span class="hljs-string">&quot;hOffset&quot;</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-string">&quot;vOffset&quot;</span>: -<span class="hljs-number">30</span><br>        &#125;,<br>        <span class="hljs-string">&quot;mobile&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;show&quot;</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-string">&quot;scale&quot;</span>: <span class="hljs-number">0.5</span><br>        &#125;,<br>        <span class="hljs-string">&quot;react&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;opacityDefault&quot;</span>: <span class="hljs-number">0.7</span>,<br>            <span class="hljs-string">&quot;opacityOnHover&quot;</span>: <span class="hljs-number">0.2</span><br>        &#125;<br>    &#125;);<br>&#125;;<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(<span class="hljs-title class_">Live</span>);<br></code></pre></td></tr></table></figure><p>需要修改模型的话直接更改第六行的模型名称即可。共有如下可选项。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs json">live2d-widget-model-chitose<br>live2d-widget-model-epsilon2_1<br>live2d-widget-model-gf<br>live2d-widget-model-haru/<span class="hljs-number">01</span> (use npm install --save live2d-widget-model-haru)<br>live2d-widget-model-haru/<span class="hljs-number">02</span> (use npm install --save live2d-widget-model-haru)<br>live2d-widget-model-haruto<br>live2d-widget-model-hibiki<br>live2d-widget-model-hijiki<br>live2d-widget-model-izumi<br>live2d-widget-model-koharu<br>live2d-widget-model-miku<br>live2d-widget-model-ni-j<br>live2d-widget-model-nico<br>live2d-widget-model-nietzsche<br>live2d-widget-model-nipsilon<br>live2d-widget-model-nito<br>live2d-widget-model-shizuku<br>live2d-widget-model-tororo<br>live2d-widget-model-tsumiki<br>live2d-widget-model-unitychan<br>live2d-widget-model-wanko<br>live2d-widget-model-z16<br></code></pre></td></tr></table></figure><h3 id="2-6-修改主题源码"><a href="#2-6-修改主题源码" class="headerlink" title="2.6.修改主题源码"></a>2.6.修改主题源码</h3><p><strong>注意</strong>：直接对主题的样式配置文件<code>Blog/node_modules/hexo-theme-fluid/source/css/_pages/_base/rewrite.styl</code>的修改有可能在主题升级的时候被覆盖而丢失。我修改这个文件完全是因为我无法通过css的方式来修改某些属性。</p><blockquote><p><strong>2022.4.9更新</strong> 我学会用css啦，以后不必再修改主题源码，修改自定义css就好，这样更改不会被更新覆盖掉。</p></blockquote><h4 id="2-6-1-图片阴影和圆角"><a href="#2-6-1-图片阴影和圆角" class="headerlink" title="2.6.1.图片阴影和圆角"></a>2.6.1.图片阴影和圆角</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// hexo-theme-fluid/source/css/_pages/_base/rewrite.styl</span><br><span class="hljs-selector-tag">p</span> &gt; <span class="hljs-selector-tag">img</span>, <span class="hljs-selector-tag">p</span> &gt; <span class="hljs-selector-tag">a</span> &gt; <span class="hljs-selector-tag">img</span><br>    <span class="hljs-attribute">max-width</span> <span class="hljs-number">90%</span><br>    <span class="hljs-attribute">margin</span> <span class="hljs-number">1.3rem</span> auto<br>    <span class="hljs-attribute">display</span> block<br>    <span class="hljs-comment">/* box-shadow $img-shadow */</span><br>    <span class="hljs-attribute">box-shadow</span> <span class="hljs-number">1px</span> <span class="hljs-number">2px</span> <span class="hljs-number">26px</span> <span class="hljs-number">1px</span> rgba(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, .<span class="hljs-number">3</span>)<br>    <span class="hljs-attribute">border-radius</span> <span class="hljs-number">12px</span><br>    <span class="hljs-attribute">background-color</span> transparent<br></code></pre></td></tr></table></figure><p>将其原本的<code>p &gt; img</code>属性修改成这样，添加了圆角和阴影，使其与代码块风格一致。</p><h4 id="2-6-2-修改代码块样式"><a href="#2-6-2-修改代码块样式" class="headerlink" title="2.6.2.修改代码块样式"></a>2.6.2.修改代码块样式</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// hexo-theme-fluid/source/css/_pages/_base/rewrite.styl</span><br><span class="hljs-selector-tag">figure</span><span class="hljs-selector-class">.highlight</span><br>  <span class="hljs-attribute">position</span> relative<br><br>  <span class="hljs-selector-tag">table</span><br>    <span class="hljs-attribute">border</span> <span class="hljs-number">0</span><br>    <span class="hljs-attribute">margin</span> <span class="hljs-number">0</span><br>    <span class="hljs-attribute">margin-top</span>: -<span class="hljs-number">0.4em</span><br>    <span class="hljs-attribute">width</span> auto<br>    <span class="hljs-attribute">border-radius</span> <span class="hljs-number">8px</span><br>    <span class="hljs-attribute">background-color</span> rgb(<span class="hljs-number">246</span>,<span class="hljs-number">248</span>,<span class="hljs-number">250</span>)<br></code></pre></td></tr></table></figure><p>修改了代码块的下圆角（上圆角在自定义css中上栏那里控制）以及背景颜色，减小了上间距以便配合上栏。如果想要将其修改为vscode默认深色主题那样，可以在此处和自定义css中一起修改背景色，并在主题配置文件<code>_config.fluid.yml</code>中修改代码高亮方案。</p><blockquote><p>实际上这么做有点问题，代码块由三部分组成，顶栏，左侧的行号，以及代码部分。三个部分的交界处会露出一条底色线：博客亮色显示下，黑代码块露色，灰代码块看不出来；博客暗色显示下，灰代码块露色，黑代码块看不出来。印象中给div块加一个几px的边框可以解决这个问题，但我尝试加边框并没有看到效果。</p></blockquote><p>下面是对代码块更具体的设置：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// hexo-theme-fluid/source/css/_pages/_base/rewrite.styl</span><br><span class="hljs-selector-tag">td</span><span class="hljs-selector-class">.gutter</span><br>    <span class="hljs-attribute">display</span> table-cell<br>    <span class="hljs-attribute">position</span> sticky<br>    <span class="hljs-attribute">left</span> <span class="hljs-number">0</span><br>    <span class="hljs-attribute">z-index</span> <span class="hljs-number">1</span><br><span class="hljs-comment">// 左侧的行号 底色</span><br>    <span class="hljs-selector-pseudo">&amp;:not</span>(.hljs)<br>      <span class="hljs-attribute">border-top-right-radius</span> <span class="hljs-number">0</span><br>      <span class="hljs-attribute">border-bottom-right-radius</span> <span class="hljs-number">0</span><br>      <span class="hljs-attribute">background-color</span> rgb(<span class="hljs-number">246</span>,<span class="hljs-number">248</span>,<span class="hljs-number">250</span>) // <span class="hljs-number">#f6f8fa00</span><br><span class="hljs-comment">// 左侧的行号 字体</span><br>    pre<br>      <span class="hljs-attribute">text-align</span> right<br>      <span class="hljs-attribute">overflow-x</span> none<br>      <span class="hljs-attribute">overflow-y</span> none<br>      <span class="hljs-attribute">padding</span> <span class="hljs-number">0</span> <span class="hljs-number">0.75rem</span><br>      <span class="hljs-attribute">line-height</span> <span class="hljs-number">1.45</span> // 酌情调整，和代码行高不一样会导致对不齐<br>      <span class="hljs-attribute">background-color</span> inherit<br>      <span class="hljs-attribute">border-radius</span> initial<br>      <span class="hljs-attribute">border-right</span> <span class="hljs-number">1px</span> solid <span class="hljs-number">#999</span> // 行号右侧的分割线，暗色主题下可以改成白色<br>  <span class="hljs-comment">// 右侧代码区域     </span><br><span class="hljs-selector-tag">td</span><span class="hljs-selector-class">.code</span> &gt; pre<br>    <span class="hljs-attribute">border-top-left-radius</span> <span class="hljs-number">0</span><br>    <span class="hljs-attribute">border-bottom-left-radius</span> <span class="hljs-number">0</span><br>    <span class="hljs-attribute">border-style</span> <span class="hljs-number">3px</span> solid rgb(<span class="hljs-number">246</span>,<span class="hljs-number">248</span>,<span class="hljs-number">250</span>)<br>    <span class="hljs-attribute">background-color</span> rgb(<span class="hljs-number">246</span>,<span class="hljs-number">248</span>,<span class="hljs-number">250</span>)<br></code></pre></td></tr></table></figure><h4 id="2-6-3-加粗样式"><a href="#2-6-3-加粗样式" class="headerlink" title="2.6.3.加粗样式"></a>2.6.3.加粗样式</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// hexo-theme-fluid/source/css/_pages/_base/rewrite.styl</span><br><span class="hljs-comment">// Rewrite github-markdown.css</span><br><span class="hljs-selector-class">.markdown-body</span> <span class="hljs-comment">// 在下面添加以下控制加粗的样式</span><br><span class="hljs-selector-tag">strong</span><br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#be0000</span><br>    <span class="hljs-attribute">font-weight</span>: bold<br></code></pre></td></tr></table></figure><p>只能修改<code>markdown-body</code>类下的<code>strong</code>，不能全局修改<code>strong</code>，不然博客标题也会调用这个样式变成红色。</p><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:04:07-14:03:03-image-20220407140138411.png" alt="image-20220407140138411"></p><h4 id="2-6-4-减小文字页边距"><a href="#2-6-4-减小文字页边距" class="headerlink" title="2.6.4.减小文字页边距"></a>2.6.4.减小文字页边距</h4><p>fluid主题本来中间文字框已经不大了，再加上边距，实际文字占宽度一半不到。这或许美观，但不实用。可以将页边距从10%改为5%，视觉上内容会充实许多。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// hexo-theme-fluid/source/css/_pages/_post/post.styl</span><br><span class="hljs-selector-class">.post-content</span>, post-custom<br>  <span class="hljs-attribute">box-sizing</span> border-box<br>  <span class="hljs-attribute">padding-left</span> <span class="hljs-number">5%</span><br>  <span class="hljs-attribute">padding-right</span> <span class="hljs-number">5%</span><br></code></pre></td></tr></table></figure><p>$\ $</p><h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><ol><li><a href="https://hexo.io/zh-cn/docs/"><u><em>hexo官方文档</em></u></a></li><li><a href="https://nodejs.org/en/"><u><em>node.js官方文档</em></u></a></li><li><a href="https://git-scm.com"><u><em>git官网</em></u></a></li><li><a href="https://www.bilibili.com/video/BV1Yb411a7ty"><u><em>程序羊的hexo博客搭建视频</em></u></a></li><li><a href="https://github.com/fluid-dev/hexo-theme-fluid/releases"><u><em>fluid主题官方下载</em></u></a></li><li><a href="https://hexo.fluid-dev.com/docs/"><u><em>fluid官方文档</em></u></a> </li><li><a href="https://picgo.github.io/PicGo-Core-Doc/zh/guide/config.html#默认配置文件"><u><em>picgo官方配置文档</em></u></a></li><li><a href="https://jin-yuhan.github.io/posts/60584518/"><u><em>jin-yuhan的博客</em></u></a></li><li><a href="https://blog.jijian.link/2020-02-26/hexo-article-code-add-unfold/"><u><i> linx(544819896@qq.com)的博客</i></u></a></li><li><a href="https://blog.csdn.net/printf_hello/article/details/115453735"><u><em>Live2D看板娘使用&amp;示例</em></u></a></li></ol>]]></content>
    
    
    <categories>
      
      <category>知识积累</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Mac中一些有用的冷门命令</title>
    <link href="/blog/e7beb15ab2ea/"/>
    <url>/blog/e7beb15ab2ea/</url>
    
    <content type="html"><![CDATA[<h1 align="center">Mac中一些有用的冷门命令</h1><p>苹果系统自带的设置可以调整许多设置，但不是全部。有些设置隐藏在“百度区”中，只有在受其困扰遂上网搜索时才会发现。本文收集了一些我自己用到过的指令并解释了其用法，希望能对大家有所帮助。打开Terminal，输入本文提到的命令，探索新大陆。</p><p><strong>不要随便在命令行中输入你不了解的指令</strong>，正如不要随便安装你不了解的软件。它们可能会修改系统文件对你的使用体验造成不可逆的影响，也可能在系统中你不知道的位置留下一点足迹（俗称“拉屎”），日积月累磁盘空间就被蚕食掉了。本文提到的指令都配套了与之对应的解除此设置的指令，如果你不喜欢某设置可以改回去，<strong>不会对你的系统造成影响</strong>。</p><h2 id="1-日常"><a href="#1-日常" class="headerlink" title="1.日常"></a>1.日常</h2><h3 id="1-1-解决软件打不开"><a href="#1-1-解决软件打不开" class="headerlink" title="1.1.解决软件打不开"></a>1.1.解决软件打不开</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">sudo xattr -r -d com.apple.quarantine [你软件的.app绝对路径]<br><span class="hljs-comment"># 强制加签名</span><br>sudo codesign --force --deep --sign - 文件位置（直接将应用拖进去即可）<br></code></pre></td></tr></table></figure><p>系统会自动为一些文件打上“备份”的属性标签，包括来自网络的文件以及自己写的脚本等。被打上此标签的可执行程序是不允许执行的。例如，如果你写了一个脚本就像在Windows和Linux中常做的那样，无论是执行需要何种权限的命令，也无论脚本类型是<code>.sh</code>,<code>.command</code>,<code>.bash</code>或者是根本没有拓展名，你的脚本是根本不可能双击执行的，一定会显示权限不够。</p><p>这条语句可以去除这个“备份”标签，解除这个障碍（当然你得手动给你的脚本<code>+x</code>的权限，这在任何系统中都一样）。这不会对你正常使用文件产生任何影响。</p><blockquote><p><strong>2022.4.16更新</strong>，command脚本如果在第一行指定了<code>#!/bin/zsh</code>那么给执行权限就可以执行，就不需要删除<code>com.apple.quarantine</code>属性了。否则就需要那样操作才能执行脚本。</p></blockquote><p>如果破解软件由于没有签名无法启动，可以通过手动强制本地签名的方式为其签名。</p><h3 id="1-2-解决conda环境自动激活"><a href="#1-2-解决conda环境自动激活" class="headerlink" title="1.2.解决conda环境自动激活"></a>1.2.解决conda环境自动激活</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda config --<span class="hljs-built_in">set</span> auto_activate_base <span class="hljs-literal">true</span><br>conda config --<span class="hljs-built_in">set</span> auto_activate_base <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>有时我们不希望所有的环境都混在一起，但是自从安装了conda，每次打开命令行都会自动激活base环境。可以通过以上语句控制base环境是否自动开启。</p><h3 id="1-3-控制Dock栏自动隐藏的动画速度"><a href="#1-3-控制Dock栏自动隐藏的动画速度" class="headerlink" title="1.3.控制Dock栏自动隐藏的动画速度"></a>1.3.控制Dock栏自动隐藏的动画速度</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo defaults write com.apple.Dock autohide-delay -<span class="hljs-built_in">float</span> 0 &amp;&amp; killall Dock<br>sudo defaults delete com.apple.Dock autohide-delay &amp;&amp; killall Dock<br></code></pre></td></tr></table></figure><p>苹果默认的动画很丝滑，但不是所有人都愿意看过渡动画。有些人就是喜欢“来也匆匆去也匆匆”的系统，那么可以使用以上指令修改系统关闭或开启此动画。也可以尝试修改其中的值来调整到合适的速度。</p><p>注意<code>&amp;&amp;</code>用来连接先后执行的两条指令，在此设置中<code>killall Dock</code>必不可少，只有Dock自动重启后修改的设置才会生效。</p><h3 id="1-4-修改启动台图标数量"><a href="#1-4-修改启动台图标数量" class="headerlink" title="1.4.修改启动台图标数量"></a>1.4.修改启动台图标数量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo defaults write com.apple.dock springboard-columns -int 10<br>sudo defaults write com.apple.dock springboard-rows -int 8<br>killall Dock<br></code></pre></td></tr></table></figure><p>启动台图标很大，有些人安装了很多软件以至于想要使用时不好找（当然也可以用“聚焦”来快速搜索，但是谁能记住所有软件的名字呢）。使用上述指令可以调整启动台默认展示图标的列数、行数。只有Dock自动重启后修改的设置才会生效。</p><p>注意行列数改多不会让图标间隔变小，只会让图标变小。苹果的图标全部是按照像素点点对点制作，缩放后可能看着有点模糊。默认的数值是5行7列，我实际体验下来还是默认的最好用。</p><h3 id="1-5-在Dock栏上添加空白分隔"><a href="#1-5-在Dock栏上添加空白分隔" class="headerlink" title="1.5.在Dock栏上添加空白分隔"></a>1.5.在Dock栏上添加空白分隔</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">defaults write com.apple.dock persistent-apps -array-add <span class="hljs-string">&#x27;&#123;&quot;tile-type&quot;=&quot;spacer-tile&quot;;&#125;&#x27;</span>; killall Dock<br>defaults write com.apple.dock persistent-others -array-add <span class="hljs-string">&#x27;&#123;tile-data=&#123;&#125;; tile-type=&quot;spacer-tile&quot;;&#125;&#x27;</span>; killall Dock<br></code></pre></td></tr></table></figure><p>Dock栏上有时软件会很多，看起来眼花缭乱不方便找软件，此时可以使用上面的指令为Dock栏添加几个空白，可以随意将它们拖到合适的地方。如果不需要这空白了，只要像移除Dock栏上的其他图标一样拖出去即可删除。本质上此指令是修改Dock栏配置文件，添加一个不指向任何东西的空白图标。</p><p>注意Dock栏中的短竖线左侧为软件区域，右侧为文件及文件夹区域，左右两侧的空白不互通，对应的两条指令也不同。</p><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:04:03-13:56:18-image-20220403135431099.png" alt="image-20220403135431099" style="zoom:50%;" /></p><h3 id="1-6-查看系统唤醒"><a href="#1-6-查看系统唤醒" class="headerlink" title="1.6.查看系统唤醒"></a>1.6.查看系统唤醒</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pmset -g assertions<br></code></pre></td></tr></table></figure><p>一般来说苹果电脑关盖就会进入睡眠状态，立即将所有内存数据写入磁盘，几个小时后断开除内存外其他所有硬件的电源。这种睡眠方式理论上是非常省电的，但是系统有可能会被一些情况唤醒，甚至是频繁唤醒，导致电量快速消耗。使用此指令可以检查电脑被什么进程唤醒了，如果是系统进程可以考虑是否要关闭，如果是第三方软件可以考虑是否要卸载（本人有强迫症对流氓软件零容忍）。</p><h3 id="1-7-设置电脑名称"><a href="#1-7-设置电脑名称" class="headerlink" title="1.7.设置电脑名称"></a>1.7.设置电脑名称</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo scutil --<span class="hljs-built_in">set</span> HostName Mac<br></code></pre></td></tr></table></figure><p>一般来说命令行会显示你在系统偏好设置“共享”中设置的电脑名，但是也有些特殊情况，比如路由器DHCP服务突然挂了，它会给电脑分配一个169.254网段的地址，电脑此时就会自动改名为“bongu”，网络恢复后不会恢复，更改共享中的电脑名也不会恢复。不影响什么，但是使用命令行时看着心里不舒服。此时可以使用这条指令改名。</p><h3 id="1-8-显示隐藏文件"><a href="#1-8-显示隐藏文件" class="headerlink" title="1.8.显示隐藏文件"></a>1.8.显示隐藏文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo defaults write com.apple.finder AppleShowAllFiles TRUE &amp;&amp; killall Finder<br></code></pre></td></tr></table></figure><p>一般来说苹果电脑会自动隐藏掉<code>隐藏文件</code>，因为那些配置文件和软件运行库文件夹不是普通用户需要操心的，隐藏掉看起来会非常整洁。不过我等程序员显然不喜欢自己电脑用起来像别人的电脑。虽然使用<code>⌘+⇧+.</code>可以临时控制显示或者隐藏文件，但是每次重启电脑都要重新选择显示所有文件，这样不够elegant。使用此命令可以直接设置默认始终显示隐藏文件。参考前面的几条指令，将<code>TRUE</code>替换为<code>FALSE</code>可以设置默认不显示隐藏文件，将<code>write</code>替换为<code>delete</code>可以删除刚刚设置的默认配置。</p><h3 id="1-9-设置环境变量"><a href="#1-9-设置环境变量" class="headerlink" title="1.9.设置环境变量"></a>1.9.设置环境变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#/Library/Java/JavaVirtualMachines/jdk1.8.0_311.jdk/Contents/Home/</span><br><span class="hljs-built_in">export</span> JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_311.jdk/Contents/Home/<br><span class="hljs-built_in">export</span> CLASSPAHT=.:<span class="hljs-variable">$JAVA_HOME</span>/lib/dt.jar:<span class="hljs-variable">$JAVA_HOME</span>/lib/tools.jar<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$JAVA_HOME</span>/bin:<span class="hljs-variable">$PATH</span><br><br><span class="hljs-comment">#/Library/Java/apache-maven-3.8.4</span><br><span class="hljs-built_in">export</span> MAVEN_HOME=/Library/Java/apache-maven-3.8.4/<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$JAVA_HOME</span>/bin:<span class="hljs-variable">$MAVEN_HOME</span>/bin:<span class="hljs-variable">$PATH</span><br><br><span class="hljs-comment">#/usr/local/mysql</span><br><span class="hljs-built_in">export</span> PATH=/usr/local/mysql/bin:<span class="hljs-variable">$PATH</span><br><br><span class="hljs-comment">#/usr/local/mongodb</span><br><span class="hljs-built_in">export</span> PATH=/usr/local/mongodb/bin:<span class="hljs-variable">$PATH</span><br><br><span class="hljs-built_in">alias</span> ll=<span class="hljs-string">&#x27;ls -l&#x27;</span><br><span class="hljs-built_in">alias</span> python=<span class="hljs-string">&#x27;python3&#x27;</span><br><span class="hljs-built_in">alias</span> aaasss=<span class="hljs-string">&#x27;cd ~/Desktop/桌面文件/Blog&#x27;</span><br><span class="hljs-built_in">alias</span> aaaddd=<span class="hljs-string">&#x27;open ~/Desktop/桌面文件/Blog/source/_posts&#x27;</span><br><br><span class="hljs-comment"># /usr/local/lib/node_modules/picgo/bin/picgo</span><br><span class="hljs-built_in">export</span> PATH=/usr/local/bin:/usr/local/sbin:<span class="hljs-variable">$PATH</span><br><span class="hljs-built_in">export</span> PATH=/usr/local/lib/node_modules/picgo/bin:<span class="hljs-variable">$PATH</span><br></code></pre></td></tr></table></figure><p>显示隐藏文件后，在用户家目录下可以看到一个隐藏文件<code>.bash_profile</code>，这就是用户环境变量，你可以仿照我的写法写适合你自己的环境变量。还能看到一个隐藏文件名为<code>.zshrc</code>，这是zsh的默认配置文件，在用户打开Terminal时自动加载。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># &gt;&gt;&gt; conda initialize &gt;&gt;&gt;</span><br><span class="hljs-comment"># !! Contents within this block are managed by &#x27;conda init&#x27; !!</span><br>__conda_setup=<span class="hljs-string">&quot;<span class="hljs-subst">$(&#x27;/Users/zql/miniforge3/bin/conda&#x27; &#x27;shell.zsh&#x27; &#x27;hook&#x27; 2&gt; /dev/null)</span>&quot;</span><br><span class="hljs-keyword">if</span> [ $? -eq 0 ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;<span class="hljs-variable">$__conda_setup</span>&quot;</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-keyword">if</span> [ -f <span class="hljs-string">&quot;/Users/zql/miniforge3/etc/profile.d/conda.sh&quot;</span> ]; <span class="hljs-keyword">then</span><br>        . <span class="hljs-string">&quot;/Users/zql/miniforge3/etc/profile.d/conda.sh&quot;</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">export</span> PATH=<span class="hljs-string">&quot;/Users/zql/miniforge3/bin:<span class="hljs-variable">$PATH</span>&quot;</span><br>    <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-built_in">unset</span> __conda_setup<br><span class="hljs-comment"># &lt;&lt;&lt; conda initialize &lt;&lt;&lt;</span><br><br><span class="hljs-built_in">source</span> ~/.bash_profile<br></code></pre></td></tr></table></figure><p>​    <code>.zshrc</code>中的前14行都由我安装Miniforge时自动生成，这是控制conda环境的语句。第16行由我自己添加，这一句的意思是，每次打开黑窗口时自动刷新一次环境变量。使用这个方法可以在日常使用开发工具时解决复杂的环境问题，也可以使用<code>alias</code>语法自定义常用的指令。</p><p>注意使用此方式配置的环境变量只能在用户自己点击Terminal时使用。软件在调用命令时不会加载环境变量，因此找不到目录时可能要考虑使用完整绝对路径。例如我在使用typora搭配picgo配置图床时typora一直显示找不到指令。</p><h3 id="1-10-切换最高权限"><a href="#1-10-切换最高权限" class="headerlink" title="1.10.切换最高权限"></a>1.10.切换最高权限</h3><p>Mac购买之初会要求创建一个用户，此用户为管理员账户，但在Terminal中一般运行在普通权限下，需要特殊权限比如<code>sudo</code>的时候会要求用户输入密码。在图形界面下不能指定使用管理员用户，也就是不能像linux直接使用root用户操作那样。但是在Terminal中可以切换到管理员权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo su <span class="hljs-comment"># 管理员权限</span><br><span class="hljs-built_in">exit</span> <span class="hljs-comment"># 退出此状态</span><br></code></pre></td></tr></table></figure><p>值得注意的是，此状态权限仍小于“系统权限”，比如<code>/usr/bin</code>这个目录无论如何你是无法编辑的，因为Mac有系统完整性保护(SIP)。而且最新的机器似乎保护更严格，即使关闭了SIP仍然不能编辑系统某些内容（比如删掉系统自带某些软件），因为它们是“只读的镜像”，这可能是通过其特殊的文件系统实现的。</p><p>顺带一提，电脑中<strong>只有一个用户时不要给用户改名</strong>。如果想改名可以通过新建一个用户然后将其加入管理员用户组。直接改名会导致直接失去管理员权限，然后你就没权限新建一个管理员了🤪。当然已经跳坑了也有办法解决，进启动界面用安全模式命令行新建一个管理员账户。这个操作在M1芯片和Intel芯片的Mac上不同，具体请参考官方客服。</p><h3 id="1-11-修改终端默认样式"><a href="#1-11-修改终端默认样式" class="headerlink" title="1.11.修改终端默认样式"></a>1.11.修改终端默认样式</h3><p>Mac默认的shell是zsh，默认是白底黑字的。在<code>.bash_profile</code>中添加如下语句并刷新环境变量可以使终端高亮并使用linux默认颜色配置模式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> CLICOLOR=<span class="hljs-string">&#x27;Yes&#x27;</span><br><span class="hljs-comment"># export LS_OPTIONS=&#x27;--color=auto&#x27;</span><br><span class="hljs-built_in">export</span> LSCOLORS=<span class="hljs-string">&#x27;ExGxFxdaCxDaDahbadacec&#x27;</span><br><span class="hljs-comment"># 指定颜色，Linux配色方案</span><br></code></pre></td></tr></table></figure><p>在自己的电脑上使用终端可能不需要那么多的输入提示，例如“abc@mac ~%”，此时可以编辑<code>.zshrc</code>修改默认配置样式，使用<code>source .zshrc</code>刷新设置后生效。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># %n是用户名，%m是主机名</span><br><span class="hljs-comment"># %1是当前目录，用户家目录会被替换为～</span><br><span class="hljs-built_in">export</span> PROMPT=<span class="hljs-string">&#x27;%n@%m %1~ %#  &#x27;</span><br></code></pre></td></tr></table></figure><p>默认提示也可以改点颜色：</p><ul><li><code>%F&#123;color&#125;</code> 是配置颜色，{}中color是256色的颜色值，也可以使用<code>black，red，green，yellow，blue，magenta，cyan和white</code>等常用色</li><li><code>%f</code> 表示后面恢复默认颜色</li><li><code>%B</code> 粗体 </li><li><code>%b</code> 表示后面恢复默认字重</li></ul><p>我的个人配置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> PROMPT=<span class="hljs-string">&#x27;%F&#123;13&#125;%1~ %F&#123;50&#125;%B%# %f%b&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="1-12-查看硬盘寿命"><a href="#1-12-查看硬盘寿命" class="headerlink" title="1.12.查看硬盘寿命"></a>1.12.查看硬盘寿命</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装smartmontools</span><br>brew install smartmontools<br><span class="hljs-comment"># 打开S.M.A.R.T监控</span><br>smartctl -s on disk0<br><span class="hljs-comment"># 查看硬盘信息</span><br>smartctl -a disk0<br></code></pre></td></tr></table></figure><h3 id="1-13-取消系统截图阴影"><a href="#1-13-取消系统截图阴影" class="headerlink" title="1.13.取消系统截图阴影"></a>1.13.取消系统截图阴影</h3><p>系统自带的截图是唯一一个能截出圆角的截图方式，然而一般会带着窗口阴影一起截下来。使用下面指令可以取消阴影。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 取消系统截图阴影</span><br>defaults write com.apple.screencapture disable-shadow -bool TRUE<br><span class="hljs-comment"># 恢复系统截图阴影</span><br>defaults write com.apple.screencapture disable-shadow -bool FALSE<br></code></pre></td></tr></table></figure><h2 id="2-defaults命令"><a href="#2-defaults命令" class="headerlink" title="2.defaults命令"></a>2.defaults命令</h2><p>plist文件在macOS中被用来记录系统的各种<strong>偏好设置</strong>，所有与系统有关的设置项文件都在<code>/Library/Preferences</code>中。使用defaults命令可以修改这些设置甚至是写入自己的设置。设置项可能导致软件崩溃，移除设置项可以直接删除配置文件或者使用给出的命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 读取所有设置项</span><br>defaults <span class="hljs-built_in">read</span> [DOMAIN]<br><span class="hljs-comment"># 读取某设置项</span><br>defaults <span class="hljs-built_in">read</span> [DOMAIN] [PROPERTY_NAME]<br><span class="hljs-comment"># 设置某设置项</span><br>defaults write [DOMAIN] [PROPERTY_NAME] [VALUE] <br><span class="hljs-comment"># 重制某个设置项</span><br>defaults delete [DOMAIN] [PROPERTY_NAME] <br><span class="hljs-comment"># 重制某个设置</span><br>defaults delete [DOMAIN] <br></code></pre></td></tr></table></figure><h2 id="3-xattr命令"><a href="#3-xattr命令" class="headerlink" title="3.xattr命令"></a>3.xattr命令</h2><p>Mac OS X 10.4及更高版本通过使用HFS+文件系统属性文件B<em>树功能支持<em>*扩展属性</em></em>。每个属性由一个名称和相关数据组成，该名称是一个以<code>\0</code>截止的Unicode字符串。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 显示所有扩展属性名称，效果与&quot;ls -l@&quot;相同</span><br>xattr [-lrsvx] file ...<br><span class="hljs-comment"># 显示与给定属性名称关联的值。通常是字符串，但如果有空值则以16进制显示</span><br>xattr -p [-lrsvx] attr_name file ...<br><span class="hljs-comment"># 给一个属性设置一个值</span><br>xattr -w [-rsx] attr_name attr_value file ...<br><span class="hljs-comment"># 将某属性以及与之对应的值一起删除</span><br>xattr -d [-rsv] attr_name file ...<br><span class="hljs-comment"># 清除所有属性以及与之对应的值</span><br>xattr -c [-rsv] file ...<br><span class="hljs-comment"># 显示一个简短的帮助信息并立即退出</span><br>xattr -h | --<span class="hljs-built_in">help</span><br></code></pre></td></tr></table></figure><p>可选选项：</p><ul><li><code>-l</code>，将表单和值对应起来进行显示</li><li><code>-r</code>，递归地处理</li><li><code>-s</code>，如果文件参数是符号链接，对符号链接本身采取行动而不是它指向的文件</li><li><code>-v</code>，强制运行结果中显示文件名（默认只有一个文件时不现实文件名）</li><li><code>-x</code>，强制属性值用16进制表示</li></ul><p>这个东西官方还做了C语言的API，但是咱平时也用不着，这里就不写了，官方文档放上：<a href="https://www.unix.com/man-page/mojave/2/listxattr"><u><em>显示xattr</em></u></a>，<a href="https://www.unix.com/man-page/mojave/2/getxattr"><u><em>获取xattr</em></u></a>，<a href="https://www.unix.com/man-page/mojave/2/setxattr"><u><em>设置xattr</em></u></a>，<a href="https://www.unix.com/man-page/mojave/2/removexattr"><u><em>移除xattr</em></u></a>。</p><h2 id="4-pmset命令"><a href="#4-pmset命令" class="headerlink" title="4.pmset命令"></a>4.pmset命令</h2><p>在macOS中系统偏好设置提供的<strong>电源设置</strong>项显然太少了。您能分辨这些情况下电脑中的程序是否还会运行吗？</p><ul><li>不关盖，放至黑屏后</li><li>不关盖，按指纹键锁屏</li><li>插着电源关盖</li><li>插着电源关盖，然后拔出电源</li><li>不插电源关盖，然后插入电源</li></ul><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:04:05-19:21:19-image-20220405174159263.png" alt="image-20220405174159263" style="zoom: 33%;" /></p><p>实际上，macOS的<code>pmset</code>命令为我们提供了更丰富的设定。以下介绍参考了<a href="https://en.wikipedia.org/wiki/Pmset"><u><em>维基百科</em></u></a>。</p><h3 id="4-1-选择设置对象"><a href="#4-1-选择设置对象" class="headerlink" title="4.1.选择设置对象"></a>4.1.选择设置对象</h3><p>设置的对象默认为全部场景，否则请指定场景。指定场景命令不能单独使用，必须和其他指令组合使用，否则不会生效。</p><ul><li><code>-c</code>（充电器），调整连接到充电器时使用的设置</li><li><code>-b</code>（电池），调整使用本机电池时使用的设置</li><li><code>-u</code>（UPS），调整运行UPS时使用的设置</li><li><code>-a</code>（所有，默认）调整所有场景的设置</li></ul><h3 id="4-2-设置唤醒、睡眠、开机或关机"><a href="#4-2-设置唤醒、睡眠、开机或关机" class="headerlink" title="4.2.设置唤醒、睡眠、开机或关机"></a>4.2.设置唤醒、睡眠、开机或关机</h3><p>可以根据一周中任意的一天和时间组合重复发生，也可以设置在未来的日期和时间。语法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pmset [repeat, schedule] [<span class="hljs-built_in">sleep</span>, wake, poweron, shutdown, wakeorpoweron] [&lt;MTWRFSU&gt; &lt;<span class="hljs-built_in">date</span>/time&gt;]<br></code></pre></td></tr></table></figure><p>schedule参数用于设置一次性电源事件，repeat用于设置每日或每周事件。事件的调度只能由特权用户完成。每次设置都会覆盖以前的设置，因此想要设置多个触发事件必须在一个命令字符串中输入它们。schedule参数识别以下附加参数：</p><ul><li>类型。sleep、wake、poweron、shutdown或wakeorpoweron</li><li>日期和时间（仅限schedule）。格式为”MM/dd/yy HH:mm:ss”必须为24小时格式，必须加引号</li><li>时间（仅repeat）。格式为HH:mm:ss；必须为24小时格式，但不必加引号</li><li>工作日。MTWRFSU的子集，如M、MTWRF、weekdays、weekends和everyday都可以</li><li>所有者。描述是谁正在安排电源事件的人或程序（可选）</li></ul><blockquote><p>举例：要将一周中每天的关机事件设置为23:59，并将一周中每天的唤醒或开机事件设置为7:00</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pmset repeat shutdown MTWRFSU 23:59:00 wakeorpoweron MTWRFSU 7:00:00<br></code></pre></td></tr></table></figure></blockquote><p>语法限制很严格，任何错误都将导致命令失败，并将显示一条简短的帮助消息。计划事件设置存储在专用硬件中，因此“黑苹果”上此功能可能不稳定。重复事件存储在<code>/Library/Preferences/SystemConfiguration/com.apple.AutoWake.plist</code>中，此文件可以使用<code>defaults</code>命令手动编辑，但更改有可能被覆盖；更改后不会立即生效。</p><h3 id="4-3-查看所有电源管理配置项"><a href="#4-3-查看所有电源管理配置项" class="headerlink" title="4.3.查看所有电源管理配置项"></a>4.3.查看所有电源管理配置项</h3><p><code>-g</code>显示有关当前电源管理配置的信息，或最近活动的日志。如果没有提供其他参数，仅显示当前设置；如果后面跟了其他参数则显示此参数的详细设置项。如果提供了多个参数，那么只有第一个参数是有用的，多余的参数会被忽略。</p><ul><li><code>-g live</code>，显示当前正在使用的设置</li><li><code>-g custom</code>，显示所有电源的自定义设置</li><li><code>-g cap</code>，显示机器支持哪些电力管理功能</li><li><code>-g sched</code>，显示计划启动、唤醒或关闭、睡眠事件</li><li><code>-g ps / batt</code>，显示电池和 UPS 的状态</li><li><code>-g pslog</code>，显示电源（电池或者 UPS）状态的连续日志</li><li><code>-g rawlog</code>，显示直接读取电池的电池状态的连续日志</li><li><code>-g therm</code>，显示影响 CPU 速度的温度阈值。不适用于全部平台</li><li><code>-g thermlog</code>，显示影响 CPU 速度的温度的通知日志。不适用于全部平台</li><li><code>-g assertions</code>，显示电量提醒的概要。此提醒可以阻止系统睡眠或显示器睡眠。适用于 10.6 及更新版本</li><li><code>-g assertionslog</code>，显示电量提醒的日志。适用于 10.6 及更新版本</li><li><code>-g sysload</code>，显示“系统负载顾问”——。适用于 10.6 及更新版本</li><li><code>-g ac/adapter</code>，显示关于交流电源适配器的详情。只有 MacBoook 和 MacBook Pro 支持。</li><li><code>-g log</code>，显示睡眠，唤醒及其他电源管理时间的历史。这个日志只提供给管理员和调试目的</li><li><code>-g uuid</code>，显示当前活跃的睡眠、唤醒的 UUID。</li><li><code>-g uuidlog</code>，显示当前活跃的睡眠、唤醒的 UUID，并且打印一个新的被系统设置的 UUID</li><li><code>-g history</code>，一个调试工具。当使用启动参数 io=0x3000000 被启用时，打印系统睡眠唤醒的 UUID 的时间线。</li><li><code>-g powerstate</code>，打印当前为 IO Kit 驱动电源状态。调用者应该至少提供一个 IO Kit 类名来作为参数。如果没有类名被听过，它将打印全部驱动的电源状态。</li><li><code>-g stats</code>，打印自系统启动以来睡眠和唤醒系统的计数。</li><li><code>-g systemstate</code>，打印当前系统的电量状态和可用能力。</li><li><code>-g everything</code>，打印每个参数。这是一个有用的快速收集所有 pmset 提供的输出。适用于 10.8。</li></ul><h3 id="4-4-配置休眠和安全睡眠选项"><a href="#4-4-配置休眠和安全睡眠选项" class="headerlink" title="4.4.配置休眠和安全睡眠选项"></a>4.4.配置休眠和安全睡眠选项</h3><p>pmset可以识别以下参数，它们可以按任何顺序给出。任何错误的语法或无法识别的参数都将导致整个命令失败，这会在屏幕上打出一个log和一个简短的帮助文档。电源管理设置只能使用sudo权限修改。</p><p>通过pmset进行的所有更改都将保存在<code>/Library/Preferences/SystemConfiguration/com.apple.PowerManagement.plist</code>的持久首选项文件中。可以使用<code>defaults</code>命令手动修改此文件，但电源管理系统不会立即处理这些更改。对配置文件的手动编辑有可能被覆盖。<code>pmset touch</code>命令将从磁盘上重读现有设置并应用。</p><ul><li><code>displaysleep</code>，控制显示器无操作几分钟后灭屏，0以禁用显示睡眠</li><li><code>disksleep</code>，控制磁盘几分钟无操作后自动断电，0以禁用磁盘睡眠</li><li><code>sleep</code>，无操作几分钟后系统睡眠（所有程序暂停），0以禁用睡眠</li><li><code>womp</code>，允许以太网数据包唤醒，设为1以启用或0以禁用。只有当设备插入电源时才会显示此设置，否则运行“pmset -g”时不会有womp设置项</li><li><code>hibernatemode</code>，更改休眠模式。（<strong>0/3/25以外的选项慎用</strong>）<ul><li>0，休眠时只有内存通电</li><li>1，内存数据写入磁盘，然后电脑完全断电</li><li>3，内存数据写入磁盘，同时保持内存供电</li><li>5，与模式1大致相同，但适合安全地处理虚拟内存的数据</li><li>7，与模式3大致相同，但适合安全地处理虚拟内存的数据</li><li>25，与模式1大致相同，用于Mac OS X 10.7中的休眠</li></ul></li><li><code>hibernatefile</code>，更改休眠时内存映象储存的位置。只能位于根卷上</li><li><code>ring</code>，允许通过调制解调器唤醒，1启用或0禁用</li><li><code>autorestart</code>，电池寿命检测到损耗时自动重启，1启用或0禁用</li><li><code>dps</code>，根据负载动态地调整处理器速度，1启用或0禁用</li><li><code>reduce</code>，保持降低处理器速度，1启用或0禁用</li><li><code>powerbutton</code>，按下电源键时进入睡眠而不是关机，1启用或0禁用</li><li><code>powernap</code>，让机器即使在睡眠时也能保持最新状态（接收更新和时钟同步等），1可以启用，0可以禁用</li><li><code>lidwake</code>，（仅限笔记本）开盖时唤醒机器，1启用或0禁用</li><li><code>acwake</code>，（仅限笔记本）当电源更换（插上或拔下充电线）时唤醒机器，1启用或0禁用</li><li><code>lessbright</code>，（仅限笔记本）切换到指定电源时略微调低显示屏亮度，1启用或0禁用</li><li><code>halfdim</code>，显示器睡眠时将亮度调到一半，1启用或0禁用</li><li><code>sms</code>，（仅支持笔记本）感受到加速度时自动锁定机械硬盘的磁头，1启用或0禁用</li><li><code>haltlevel</code>，（仅限UPS）当UPS仅剩某百分比电量时电脑自动关机</li><li><code>haltafter</code>，（仅限UPS）使用UPS供电指定分钟数后电脑自动关机</li><li><code>haltremain</code>，（仅限UPS）当UPS仅剩指定分钟数时电脑自动关机</li><li><code>ttyskeepawake</code>，当任何tty（例如远程登录会话）处于活动状态时阻止空闲系统睡眠，除非其空闲时间超过系统睡眠计时器，1启用或0禁用时，tty才处于非活动状态</li><li><code>autopoweroff</code>，（交流电源）如果系统支持的话，默认启用欧洲标准的能源节省计划。进入睡眠后超过设置的时间后，内存数据写入磁盘，进入低功率芯片组睡眠。从这种状态唤醒比从正常睡眠中醒来需要更长的时间。如果连接任何外设、或系统处于电池供电状态、或系统联网并启用了唤醒网络访问，系统将不会自动关机。1启用或0禁用</li><li><code>autopoweroffdelay</code>，（交流电源）设置进入自动关机模式前的时间，整数，以秒为单位</li><li><code>standbydelaylow</code>，将休眠映像写入磁盘并内存断电的等待时长。低电量时启用，整数，以秒为单位</li><li><code>standbydelayhigh</code>，将休眠映像写入磁盘并内存断电的等待时长。高电量时启用，整数，以秒为单位</li><li><code>networkoversleep</code>，此设置会影响macOS是否在睡眠期间显示共享网络服务。并非所有平台都使用此设置；不支持更改其值</li><li><code>destroyfvkeyonstandby</code>，进入睡眠模式时销毁文件保险库密钥。默认情况下，即使系统处于待机状态，文件保险库键也会保留。如果密钥被销毁，将提示用户在退出待机模式时输入密码。1 - 销毁，0 - 保留。由于系统必须完全关机，您还需要将“hibernatemode”设置为25。</li></ul><blockquote><p>举例：设置仅由电池供电时，10 分钟后进入睡眠状态，并在 5 分钟后将显示屏设置为睡眠状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pmset -b <span class="hljs-built_in">sleep</span> 10 displaysleep 5<br></code></pre></td></tr></table></figure><p>举例：当连着充电器时，设置30分钟后入睡，显示器设置为永不入睡</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pmset -c <span class="hljs-built_in">sleep</span> 30 displaysleep 0<br></code></pre></td></tr></table></figure></blockquote><p>$\ $</p><h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><ol><li><a href="https://www.unix.com/man-page/mojave/2/listxattr"><u><em>unix官方文档：显示xattr</em></u></a></li><li><a href="https://www.unix.com/man-page/mojave/2/getxattr"><u><em>unix官方文档：获取xattr</em></u></a></li><li><a href="https://www.unix.com/man-page/mojave/2/setxattr"><u><em>unix官方文档：设置xattr</em></u></a></li><li><a href="https://www.unix.com/man-page/mojave/2/removexattr"><u><em>unix官方文档：移除xattr</em></u></a></li><li><a href="https://en.wikipedia.org/wiki/Pmset"><u><em>维基百科：pmset</em></u></a></li></ol>]]></content>
    
    
    <categories>
      
      <category>知识积累</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>制作视频外挂字幕</title>
    <link href="/blog/9dd8d2cc97df/"/>
    <url>/blog/9dd8d2cc97df/</url>
    
    <content type="html"><![CDATA[<h1 align="center">制作视频外挂字幕</h1><p>不知道有多少小伙伴有和我一样看网上视频课程喜欢下载下来（爬下来）看？这样视频倍速播放较为自由，还可以做音频处理、自己加字幕等等操作，让学习过程更为愉快。本文主要探讨加字幕过程。</p><h2 id="1-方案调研"><a href="#1-方案调研" class="headerlink" title="1.方案调研"></a>1.方案调研</h2><p>视频加上了外挂字幕后，字幕形式可以随意调整成自己喜欢的样式，英文课程也可以使用机翻。对于课程加速后不容易听清的问题，加字幕也是一个很有效的辅助。但是如何制作字幕却是一个问题。我探索了一下github，看起来没什么很成熟可以拿来直接用的神经网络，网上也搜不到成熟的商业软件可以一站式解决这个需求。目前据我所知所有可行的方案有：</p><ul><li>Windows系统中使用华为电脑管家的智能字幕功能。不能自定义格式，可以中英翻译，略有滞后，准确性一般。</li><li>使用云服务商的实时语音转文本接口。大部分云服务商都提供完全免费的或数千小时免费的实时语音转文本服务。需要自己写程序和接口交互，需要自己处理分词间隔等问题，较麻烦，准确率一般，略有滞后，不支持翻译。</li><li>苹果App Store中由<code>Hangzhou Duoziwei Technology Co.Ltd</code>开发的软件<code>YPlayer</code>和<code>BeMyEars</code>软件。两个软件使用同一套引擎，前者是一个能实时显示多语言AI字幕的简陋播放器，支持文本导出（不是字幕导出。导出的文本没有时间戳），性能很差导出长视频字幕时会内存溢出卡死；后者是一个将麦克风音频实时识别字幕显示在屏幕上的纯实时字幕软件，性能同样很差，不支持导出，支持多语言识别。想要使用<code>BeMyEars</code>识别正在播放视频的字幕必须使用第三方Mac音频流控制软件如 <a href="https://github.com/ExistentialAudio/BlackHole"><u><em>BlackHole</em></u></a> 等将电脑扬声器重定向到电脑麦克风。</li><li><a href="https://jianwai.youdao.com"><strong><u>网易见外平台</u></strong></a>。一个免费的字幕制作平台，支持上传视频或者音频自动生成中英文srt字幕，但每天总时长不能超过两个小时。支持字幕中英机翻，不限量。</li><li><strong>剪映</strong>。字节跳动旗下的一款视频制作软件，有AI生成字幕功能，不限量，但字幕不能导出。</li></ul><p>截至本文上传日期，剪映仍然通过将音频分离出来上传到服务器再由服务器发回字幕的方式生成字幕，同时字幕在本地是实时缓存在文件中的，也就是说可以通过抓包或者读取本地项目缓存文件的方式获得字幕，然后解析其格式化文本生成srt字幕即可。获得srt字幕后可以在网易见外平台上翻译也可以在播放器中自定义喜欢的格式（比如我个人比较喜欢老莱视频中那样白字蓝边灰底的样式）。</p><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:04:04-02:00:25-image-20220404011306278.png" alt="image-20220404011306278" style="zoom:50%;" /></p><h2 id="2-解析字幕"><a href="#2-解析字幕" class="headerlink" title="2.解析字幕"></a>2.解析字幕</h2><p>抓包比较麻烦，但得到的单个<code>json</code>文件字幕内容和时间戳在一起，比较容易处理；分析本地文件则比较复杂，因为剪映将字幕的内容和时间戳分开保存，需要一一配对生成字幕。下面演示分析本地文件生成字幕的方法。</p><p>使用剪映生成字幕很简单，这里略过。字幕生成成功后，通过这个我制作的<a href="/my-html/剪映字幕导出.html"><u><em>转换网页</em></u></a>，本地打开下载下来的<code>html文件</code>即可，按照网页中指示找到你使用的剪映版本项目缓存文件所在目录。里面众多<code>json</code>文件中会有一个<strong>体积明显比较大</strong>，就是它。</p><p>打开网页，调整设置。网页完全根据我自己的电脑分辨率适配，如果你的电脑上输入框溢出看不到右边的按钮，可以修改网页源代码40行和111行，修改其中的行列数值。</p><p>如果想要生成适合Linux中使用的字幕文件，换行符选择<code>\n</code>,其他系统中选择<code>\r\n</code>。这一设置影响不大，一般的播放器都能识别。按照你使用的剪映版本<strong>调整时间单位</strong>，电脑版选微秒，安卓版选毫秒。错误的设置生成的字幕会无法使用。网页提供了一个示例来测试你的设备是否能使用它。点击“生成srt”按钮，下方会生成字幕，有一个下载字幕的按钮可以调用浏览器下载功能将文件保存到本地。测试完成后点击“清空”按钮<strong>清空输入框内容</strong>。</p><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:04:04-02:00:25-image-20220404014103436.png" alt="image-20220404014103436"></p><p>使用文本编辑器打开那个剪映项目缓存文件，将其中全部内容复制出来（<code>ctrl+A</code>,<code>ctrl+C</code>），粘贴到网页输入框中。由于文件通常很大，这个过程可能很卡，要卡半天。冷静、理智、稳重，<strong>慢慢等</strong>。复制完成后点击“生成srt”按钮，很快就会生成字幕。在下方生成的字幕旁边有下载字幕的按钮，点击下载即可。</p><p>接下来，enjoy your watching！</p><h4 id="Json向Srt转换网页"><a href="#Json向Srt转换网页" class="headerlink" title="Json向Srt转换网页"></a>Json向Srt转换网页</h4><p><a href="/my-html/剪映字幕导出.html"><u><em>转换网页</em></u></a></p>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>408-操作系统-基础笔记</title>
    <link href="/blog/edf4f8bf2394/"/>
    <url>/blog/edf4f8bf2394/</url>
    
    <content type="html"><![CDATA[<h1 align="center">408-操作系统-基础笔记</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><ul><li>管理<strong>系统资源</strong><ul><li>功能：处理机管理、存储器管理、文件管理、设备管理</li><li>目标：安全、高效</li></ul></li><li>向上层提供服务<ul><li>命令接口<ul><li>联机（交互式）：command</li><li>脱机：批处理</li><li>狭义的定义中，<strong>不包含GUI</strong></li></ul></li><li>程序接口：系统调用（又称为 广义指令）</li></ul></li></ul><h3 id="1-1-四个特征"><a href="#1-1-四个特征" class="headerlink" title="1.1.四个特征"></a>1.1.四个特征</h3><blockquote><p>并发和共享是两个最基本特征，二者互为存在条件</p></blockquote><ul><li><p>并发</p><ul><li><p>宏观上同时，微观上交替</p><blockquote><p>并行：同时发生</p></blockquote></li></ul></li><li><p>共享：系统中的资源可供内存中多个并发执行的进程共同使用</p><ul><li><p>互斥共享：在一个时间段内，这个资源只允许一个进程来使用</p></li><li><p>同时共享：在一个时间段内，允许多个的进程同时对它进行访问</p><blockquote><p>所谓「同时」是宏观上的</p></blockquote></li></ul></li><li><p>虚拟：没有并发性那虚拟性就没有存在的意义</p><ul><li>空分复用：如虚拟存储</li><li>时分复用：如虚拟处理器</li></ul></li><li><p>异步：进程的执行走走停停，以不可预知的进度前进。有了并发性才有异步性</p></li></ul><h3 id="1-2-发展和分类"><a href="#1-2-发展和分类" class="headerlink" title="1.2.发展和分类"></a>1.2.发展和分类</h3><ul><li>手工操作系统</li><li>批处理系统<ul><li>单道批处理系统：引入<strong>脱机输入/输出</strong>技术（外围机+磁带），并由<strong>监督程序</strong>负责控制作业的输入、输出</li><li>多道批处理系统（操作系统开始出现）<ul><li>资源利用率大幅提升</li><li>响应时间长，不能人机交互</li></ul></li></ul></li><li>分时操作系统：计算机以<strong>时间片</strong>为单位<strong>轮流</strong>为各个用户/作业服务，各个用户可通过终端与计算机进行<strong>交互</strong><ul><li>解决了人机交互</li><li>感受不到别人的存在</li><li>完全公平，不区分紧急性</li></ul></li><li>实时操作系统：<strong>及时性，可靠性</strong><ul><li>硬实时 系统：必须在绝对严格的规定时间内完成处理，如导弹、自动驾驶</li><li>软实时系统：能接受偶尔违反时间规定</li></ul></li><li><del>网络操作系统</del></li><li><del>分布式操作系统</del></li><li><del>个人计算机操作系统</del></li></ul><h3 id="1-3-基本原理"><a href="#1-3-基本原理" class="headerlink" title="1.3.基本原理"></a>1.3.基本原理</h3><ul><li><p>运行机制</p><ul><li>两种指令<ul><li>特权：只有内核程序可以使用</li><li>非特权</li></ul></li><li>两种处理器状态<ul><li>核心态（管态）-&gt;用户态：一条特权指令，修改PSW中的状态字，意味着让出使用权</li><li>用户态（目态）-&gt;核心态：中断</li></ul></li><li>两种程序<ul><li>内核程序</li><li>应用程序</li></ul></li></ul></li><li><p>中断和异常</p><ul><li>中断作用<ul><li>“中断”是让<strong>操作系统内核夺回CPU使用权的唯一途径</strong></li><li>没有中断技术就没办法实现多道程序并发</li></ul></li><li>类型<ul><li>内中断（异常）：和当前执行指令有关<ul><li>陷入 trap：陷入指令，系统调用</li><li>故障 fault：错误条件引发，可以修复。如<strong>缺页</strong></li><li>终止 abort：致命错误引发，无法修复。如<strong>除0、非法使用特权指令</strong></li></ul></li><li>外中断：和当前执行指令无关<ul><li>时钟</li><li>IO设备</li></ul></li></ul></li><li>中断机制的原理<ul><li>检查时间<ul><li>内中断：执行指令时会检查是否有异常发生</li><li>外中断：每个指令周期末尾，CPU都会检查是否有外中断信号需要处理</li></ul></li><li>查询<strong>中断向量表</strong>，找到对应的处理程序</li></ul></li></ul></li><li><p>系统调用</p><blockquote><p>凡是与<strong>共享资源</strong>有关的操作（如存储分配、/O操作、文件管理等），都必须通过<strong>系统调用</strong>的方式向操作系统内核提出服务请求，由操作系统<strong>内核代为完成</strong>。这样可以保证系统的<strong>稳定性和安全性</strong>，防止用户进行非法操作</p></blockquote><ul><li>设备管理：完成 设备 的请求/释放/启动 等</li><li>文件管理：完成 文件 的读/写/创建/删除 等</li><li>进程控制：完成 进程 的创建/撤销/阻塞/唤醒 等</li><li>进程通信：完成 进程 之间的消息传递/信号传递 等 </li><li><p>内存管理：完成 内存 的分配/回收 等</p><blockquote><p><strong>陷入指令</strong>是在<strong>用户态</strong>执行的，执行陷入指令（访管指令）之后立即引发一个<strong>内中断</strong>，使CPU进入<strong>核心态</strong><br><strong>发出系统调用</strong>请求是在用户态，而对<strong>系统调用的相应处理</strong>在<strong>核心态</strong>下进行</p></blockquote></li></ul></li></ul><h3 id="1-4-体系结构"><a href="#1-4-体系结构" class="headerlink" title="1.4.体系结构"></a>1.4.体系结构</h3><ul><li>内核结构 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:07:14-10:01:07-image-20220702200347438.png" alt="image-20220702200347438" style="zoom:50%;" /></li><li>微内核：频繁转换用户态和内核态，影响性能</li></ul><h2 id="2-进程"><a href="#2-进程" class="headerlink" title="2.进程"></a>2.进程</h2><h3 id="2-1-进程"><a href="#2-1-进程" class="headerlink" title="2.1.进程"></a>2.1.进程</h3><h4 id="2-1-1-概念"><a href="#2-1-1-概念" class="headerlink" title="2.1.1.概念"></a>2.1.1.概念</h4><ul><li>程序：<strong>静态的</strong>，存放在磁盘里的可执行文件，指令的集合</li><li>进程：<strong>动态的</strong>，程序的一次执行过程<ul><li>进程实体：PCB+程序段+数据段</li><li><strong>进程</strong>是进程实体的<strong>运行过程</strong>，是系统进行<strong>资源分配</strong>和<strong>调度</strong>的一个独立单位</li></ul></li><li>PCB：是进程存在的唯一标志</li></ul><h4 id="2-1-2-特征"><a href="#2-1-2-特征" class="headerlink" title="2.1.2.特征"></a>2.1.2.特征</h4><ul><li>动态性：进程是程序的一次执行过程，进程的<strong>最基本特性</strong></li><li>并发性：内存中有多个进程实体，各进程可并发执行</li><li>独立性：进程是能独立运行、独立获得资源、独立接受调度的基本单位</li><li>异步性：各进程按各自独立的、不可预知的速度向前推进，操作系统要提供“进程同步机制“来解决异步问题</li><li>结构性：每个进程都会配置一个PCB。结构上看，进程由程序段、数据段、PCB组成</li></ul><h4 id="2-1-3-状态"><a href="#2-1-3-状态" class="headerlink" title="2.1.3.状态"></a>2.1.3.状态</h4><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:07:14-10:01:07-image-20220702213837931.png" alt="image-20220702213837931" style="zoom:40%;" /></p><ul><li>创建：分配空间，初始化PCB</li><li>就绪</li><li>运行</li><li>阻塞：主动地等待某个事件</li><li><p>终止：CPU做善后，回收资源</p></li><li><p>组织方式</p><ul><li>链式：运行、就绪各有一个指针，指向一个队列，高优先级放在队头。阻塞由于原因不同可以有多个指针</li><li>索引表：就绪和阻塞各有一个索引表，表项是指向一个个进程的指针</li></ul></li></ul><h4 id="2-1-4-进程控制"><a href="#2-1-4-进程控制" class="headerlink" title="2.1.4.进程控制"></a>2.1.4.进程控制</h4><p>创建、销毁、状态转换</p><ul><li>创建原语：申请空白PCB，分配资源，初始化PCB，PCB插入就绪队列<ul><li>用户登录：分时系统中，用户登录成功，系统会建立为其建立一个新的进程</li><li>作业调度：多道批处理系统中，有新的作业放入内存时，会为其建立一个新的进程</li><li>提供服务：用户向操作系统提出某些请求时，会新建一个进程处理该请求</li><li>应用请求：由用户进程主动请求创建一个子进程</li></ul></li><li>撤销原语：找到PCB，[剥夺CPU]，终止所有子进程、资源归还父进程或操作系统、删除PCB<ul><li>正常结束：exit调用</li><li>异常结束：被强行杀掉</li><li>外界干预：用户选择杀掉进程</li></ul></li><li>阻塞原语：找到PCB，保护进程运行现场，将PCB状态信息设置为“阻塞态”，将PCB插入<strong>相应事件</strong>的等待队列<ul><li>需要等待分配资源</li><li>需要等待其他进程</li></ul></li><li>唤醒原语：找到PCB，从等待队列移除，设置进程为就绪态，PCB插入就绪队列<ul><li>等待的事件发生</li></ul></li><li>切换原语：运行环境存入PCB，PCB移入相应队列，选择另一个程序并更新PCB，根据PCB恢复所需的运行环境<ul><li>当前进程时间片到</li><li>有更高优先级的进程到达</li><li>当前进程主动阻塞</li><li>当前进程终止</li></ul></li></ul><h4 id="2-1-5-进程通信"><a href="#2-1-5-进程通信" class="headerlink" title="2.1.5.进程通信"></a>2.1.5.进程通信</h4><ul><li><p>共享存储：对其的访问应当是<strong>互斥的</strong>，自己负责实现 </p><blockquote><p>只需要加一个段表或页表 </p></blockquote><ul><li>基于数据结构：可以理解为「特殊的全局变量」。灵活性差、速度慢</li><li>基于存储区</li></ul></li><li><p>消息传递：消息头包含发送pid、接收pid、消息长度等格式化信息</p><ul><li>直接通信：直接指明接受消息的pid，接收也需要指明是谁发的 </li><li>间接通信：发送方完善消息体，然后指明发送给哪个信箱 ；接收方指明从哪个信箱中接收数据 </li></ul></li><li><p>管道通信：pipe文件（内存中开辟大小固定的缓冲区（循环队列）），FIFO</p><blockquote><p>两个方向的管道互斥，由操作系统保证</p><p>管道写满了，写数据的进程会阻塞， 直到管道里有空位了</p><p>管道空，读进程阻塞，直到管道里有数据了</p><p> 一旦读出，数据彻底消失。408真题考过<strong>多写1读</strong>（实际上linux可以多写多读）</p></blockquote></li></ul><h4 id="2-1-6-线程"><a href="#2-1-6-线程" class="headerlink" title="2.1.6.线程"></a>2.1.6.线程</h4><ul><li>特点<ul><li>在引入线程之后，进程只作为除  CPU 之外的系统资源的分配单元。线程变为调度的基本单位</li><li>同一进程的不同线程间共享进程的资源</li></ul></li><li>实现方式<ul><li>用户级线程：通过线程库实现逻辑线程。一个线程被阻塞，整个进程被阻塞</li><li>内核级线程：并行能力强，可在多核处理机上并行执行。<strong>需要CPU状态切换</strong></li></ul></li><li>多线程模型<ul><li>一对一：退化为内核级线程，管理成本高</li><li>多对一：退化为用户级线程，只有一个CPU，并行度不高</li><li>多对多：克服了两种缺点</li></ul></li></ul><h3 id="2-2-处理机调度"><a href="#2-2-处理机调度" class="headerlink" title="2.2.处理机调度"></a>2.2.处理机调度</h3><h4 id="2-2-1-概念"><a href="#2-2-1-概念" class="headerlink" title="2.2.1.概念"></a>2.2.1.概念</h4><ul><li><p>三个层次 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:07:14-10:01:07-image-20220703094049910.png" alt="image-20220703094049910" style="zoom:50%;" /></p><ul><li><p>高级调度（作业调度）</p><ul><li><p>每个作业<strong>只调入一次，调出一次</strong>。作业调入时会建立PCB，调出时才撤销PCB</p><blockquote><p>作业：一个具体的任务</p><p>用户向系统提交一个作业 == 用户让操作系统启动一个程序（来处理一个具体的任务）</p></blockquote></li></ul></li><li><p>中级调度（内存调度）：</p><ul><li>暂时调到外存等待的进程状态为<strong>挂起状态</strong>。被挂起的进程PCB会被组织成<strong>挂起队列</strong></li></ul></li><li><p>低级调度（进程调度）：<strong>最基本的调度</strong></p></li></ul></li><li><p>七状态模型 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:07:14-10:01:07-image-20220703093829731.png" alt="image-20220703093829731" style="zoom:40%;" /></p></li><li><p>时机</p><ul><li><p>需要进程调度</p><ul><li>主动放弃：正常终止、发生异常、主动请求阻塞</li><li>被动放弃：时间片用完、中断、更高优先级的进程进入就绪队列</li></ul></li><li><p>不能进程调度</p><blockquote><p>进程在<strong>操作系统内核程序临界区</strong>中<strong>不能</strong>进行调度与切换  ✅</p><p>临界区有 普通 和 操作系统临界区 的区别，操作系统临界区管理进程调度队列等数据结构</p></blockquote><ul><li>中断过程中</li><li>操作系统内核程序临界区中</li><li>原语（原子操作）</li></ul></li></ul></li><li><p>切换与过程</p><blockquote><p><strong>狭义的进程调度</strong>指的是从就绪队列中选中一个要运行的进程</p><p><strong>进程切换</strong>是指一个进程让出处理机，由另一个进程占用处理机的过程</p><p><strong>广义的进程调度</strong>包含了选择一个进程和进程切换两个步骤</p></blockquote><ul><li>进程切换的过程：保存PCB，恢复另一个进程的PCB</li></ul></li><li><p>方式</p><ul><li>非抢占式</li><li>抢占式</li></ul></li></ul><h4 id="2-2-2-评价指标"><a href="#2-2-2-评价指标" class="headerlink" title="2.2.2.评价指标"></a>2.2.2.评价指标</h4><ul><li>CPU利用率：CPU“忙碌”的时间占总时间的比例</li><li>系统吞吐量：单位时间内完成作业的数量</li><li>周转时间<ul><li><u>周转时间：完成时间 - 提交时间</u></li><li>平均周转时间：各作业周转时间之和 / 作业数</li><li><u>带权周转时间：周转时间 / 实际运行时间</u>  $\ge 1$</li><li>平均带权周转时间：各作业带权周转时间之和 / 作业数</li></ul></li><li>等待时间<ul><li>对于<strong>进程</strong>来说，等待时间就是指进程建立后<strong>等待被服务的时间之和</strong>，在等待I/O完成的期间其实进程也是在被服务的，所以不计入等待时间</li><li>对于<strong>作业</strong>来说，不仅要考虑<strong>建立进程后的等待时间</strong>，还要加上<strong>作业在外存后备队列中等待的时间</strong>。</li></ul></li><li>响应时间：从用户<strong>提交请求</strong>到<strong>首次响应</strong>所用的时间</li></ul><h4 id="2-2-3-调度算法"><a href="#2-2-3-调度算法" class="headerlink" title="2.2.3.调度算法"></a>2.2.3.调度算法</h4><ul><li><p>先来先服务</p><ul><li>非抢占</li><li>长作业有利，短作业不利</li><li>不会导致饥饿</li></ul></li><li><p>最短作业优先</p><blockquote><p>“抢占式的短作业/进程优先调度算法的平均等待时间、平均周转时间最少”</p><p>“所有进程几乎同时到达时，采用SJF调度算法的平均等待时间、平均周转时间最少”</p></blockquote><ul><li>没有特别说明一般是指 <strong>非抢占式</strong></li><li>抢占式版本：<strong>最短剩余时间优先</strong>。时间点：就绪队列改变、一个进程完成</li><li>短作业有利，长作业不利</li><li>会导致饥饿</li></ul></li><li><p>最高响应比优先</p><ul><li>响应比 = （等待时间 + 要求服务时间）/ 要求服务时间    $\ge 1$</li><li>非抢占</li><li>不会导致饥饿</li></ul></li><li><p>时间片轮转</p><blockquote><p>进程下处理机瞬间有进程到达，一般认为到达的排在前面</p></blockquote><ul><li>抢占式</li><li>时间片太大，退化为先来先服务。响应变慢</li><li>时间片太小，切换太频繁</li><li>一般来说，设计时间片时要让切换进程的开销占比不超过$1\%$</li><li>公平，响应快，适合分时操作系统</li></ul></li><li><p>优先级调度：选择高优先级的</p><blockquote><p>例题：<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:07:14-10:01:07-image-20220703221832653.png" alt="image-20220703221832653" style="zoom:50%;" /> 关注答题模式</p></blockquote><ul><li>抢占式和非抢占式都有</li><li><p>优先数和优先级的关系不一定，看题目</p><blockquote><p>系统进程优先级高</p><p>前台进程优先级高</p><p>操作系统偏好IO型进程，因为可以让IO设备尽早投入工作，资源利用率高</p></blockquote></li></ul></li><li><p>多级反馈队列</p><blockquote><p>高级队列先运行，运行一个时间片就把进程放到下一级队列的队尾</p><p>只有高级队列空了，它的下一级队列才能开始执行</p><p>被抢占剥夺处理器的进程放到此队列的队尾而不是下一级队列</p></blockquote><ul><li>新到达进程快速得到响应</li><li>短进程使用较少时间即可完成</li><li>不必估计运行时间</li><li>灵活调整对各类型进程的偏好程度 </li></ul></li></ul><h3 id="2-3-同步和互斥"><a href="#2-3-同步和互斥" class="headerlink" title="2.3.同步和互斥"></a>2.3.同步和互斥</h3><h4 id="2-3-1-进程互斥"><a href="#2-3-1-进程互斥" class="headerlink" title="2.3.1.进程互斥"></a>2.3.1.进程互斥</h4><ul><li>对临界资源的互斥访问，在逻辑上分：<ul><li>进入区：判断能否访问临界资源</li><li>临界区：访问临界资源的代码</li><li>退出区：解除「正在访问临界资源」标志</li><li>剩余区</li></ul></li><li>原则：有限等待，让权等待</li><li>软件实现<ul><li>单标志法：访问完临界区后把权限交给另一个进程，即进程进入临界区的权限只能由另一个进程赋予。「谦让」</li><li>双标志先检查：数组记录各进程进入临界区的意愿<ul><li>每一个进程在进入临界区之前，都会先检查对方是否想进入临界区</li><li>如果对方不想进入临界区，表达自己想要进入临界区</li><li><strong>违反忙则等待原则</strong></li><li>问题的关键在于<strong>检查和上锁这两个动作并不能一气呵成</strong></li></ul></li><li>双标志后检查<ul><li>先上锁，后检查</li><li><strong>违反空闲让进、有限等待原则</strong></li></ul></li><li>Peterson算法<ul><li>把自己的数组记录改为True</li><li>把Turn改为对方，表示可以让对方先使用</li><li>如果对方想用，或者最后一次是我谦让了，那就等待</li><li><strong>违反让权等待原则</strong>：如果不能进入临界区就应当放弃CPU</li></ul></li></ul></li><li>硬件实现<ul><li>中断屏蔽方法<ul><li>不适用于多处理机</li><li>权限特别大，只适用于内核进程</li></ul></li><li>TestAndSet（TS指令/TSL指令）<ul><li>适用于多处理机环境</li><li>一边上锁一边检查，硬件实现</li></ul></li><li>Swap指令（XCHG指令）<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:07:14-10:01:07-image-20220704234134429.png" alt="image-20220704234134429" style="zoom:60%;" /></li></ul></li></ul><h4 id="2-3-2-信号量"><a href="#2-3-2-信号量" class="headerlink" title="2.3.2.信号量"></a>2.3.2.信号量</h4><ul><li><p>整型信号量</p><ul><li><p>用一个变量来表示某种资源的数量</p></li><li><p>不满足让权等待，会发生<strong>忙等</strong>（while死循环，不让出CPU）</p></li></ul></li><li><p>记录型信号量</p><ul><li>用一个结构体记录资源数量和等待队列</li><li>wait：资源数 -1 ，如果 &lt;0，那么阻塞进程</li><li>signal： 资源数 +1 ，如果 &lt;=0，那么还有进程在阻塞，唤醒队头进入就绪队列</li></ul></li><li><p>同步 by 信号量</p><ul><li>信号量设为0</li><li>「一前一后」 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:07:14-10:01:07-image-20220705013052706.png" alt="image-20220705013052706" style="zoom: 50%;" /> 前操作后执行V，后操作之前执行P</li></ul></li><li><p>互斥 by 信号量</p><ul><li><code>semaphore mutex=1;</code>，要会自己定义。不是整型，是一个结构体</li><li>不同临界区/资源，设置不同的信号量</li></ul></li></ul><h4 id="2-3-3-经典问题"><a href="#2-3-3-经典问题" class="headerlink" title="2.3.3.经典问题"></a>2.3.3.经典问题</h4><ul><li>生产者-消费者<ul><li>两对同步：缓冲区没满 -&gt; 生产者生产；缓冲区没空 -&gt; 消费者消费</li><li>缓冲区是临界区资源，各进程互斥地访问</li><li>两个P操作顺序不能反，否则会死锁；V操作不会导致阻塞，所以顺序无所谓</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><pre><code class="hljs c++">semaphore mutex = <span class="hljs-number">1</span>;  <span class="hljs-comment">//互斥信号量，实现对缓冲区的互斥访问</span><br>semaphore empty = n;  <span class="hljs-comment">//同步信号量，表示空闲缓冲区的数量</span><br>semaphore full = <span class="hljs-number">0</span>;   <span class="hljs-comment">//同步信号量，表示产品的数量，也即非空缓冲区的数量</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">producer</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-comment">//*********生产产品</span><br>        <span class="hljs-built_in">p</span>(empty);<br>        <span class="hljs-built_in">p</span>(mutex);<span class="hljs-comment">//*********加锁</span><br>        <span class="hljs-comment">//产品放入缓冲区</span><br>        <span class="hljs-built_in">v</span>(mutex);<span class="hljs-comment">//*********加锁</span><br>        <span class="hljs-built_in">v</span>(full);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">consumer</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-built_in">p</span>(full);<br>        <span class="hljs-built_in">p</span>(mutex);<span class="hljs-comment">//*********加锁</span><br>        <span class="hljs-comment">//取出产品</span><br>        <span class="hljs-built_in">v</span>(mutex);<span class="hljs-comment">//*********加锁</span><br>        <span class="hljs-built_in">v</span>(empty);<br>        <span class="hljs-comment">//*********使用产品</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>多生产者-多消费者 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:07:14-10:01:07-image-20220705140133827.png" alt="image-20220705140133827" style="zoom:50%;" /></p><blockquote><p>不是多个，而是多类</p><p>缓冲区大小为1时不用互斥加锁，因为同一时刻最多只有一个进程不被阻塞</p><p>不要从进程前后的角度来考虑同步关系，要从状态模型考虑同步关系</p></blockquote></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c++">semaphore mutex = <span class="hljs-number">1</span>;  <span class="hljs-comment">//实现互斥访问盘子（缓冲区）</span><br>semaphore apple = <span class="hljs-number">0</span>;  <span class="hljs-comment">//盘子中有几个苹果</span><br>semaphore orange = <span class="hljs-number">0</span>; <span class="hljs-comment">//盘子中有几个橘子</span><br>semaphore plate = <span class="hljs-number">1</span>;  <span class="hljs-comment">//盘子中还可以放多少个水果</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dad</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-comment">//准备苹果</span><br>        <span class="hljs-built_in">p</span>(plate);<br>        <span class="hljs-built_in">p</span>(mutex);<br>        <span class="hljs-comment">//把苹果放进盘子</span><br>        <span class="hljs-built_in">v</span>(mutex);<br>        <span class="hljs-built_in">v</span>(apple);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mom</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-comment">//准备橘子</span><br>        <span class="hljs-built_in">p</span>(plate);<br>        <span class="hljs-built_in">p</span>(mutex);<br>        <span class="hljs-comment">//把橘子放进盘子</span><br>        <span class="hljs-built_in">v</span>(mutex);<br>        <span class="hljs-built_in">v</span>(apple);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">daughter</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-built_in">p</span>(apple);<br>        <span class="hljs-built_in">p</span>(mutex);<br>        <span class="hljs-comment">//取出苹果</span><br>        <span class="hljs-built_in">v</span>(mutex);<br>        <span class="hljs-built_in">v</span>(plate);<br>        <span class="hljs-comment">//吃掉苹果</span><br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">son</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-built_in">p</span>(orange);<br>        <span class="hljs-built_in">p</span>(mutex);<br>        <span class="hljs-comment">//取出橘子</span><br>        <span class="hljs-built_in">v</span>(mutex);<br>        <span class="hljs-built_in">v</span>(plate);<br>        <span class="hljs-comment">//吃掉橘子</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>抽烟者问题 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:07:14-10:01:07-image-20220705143409645.png" alt="image-20220705143409645" style="zoom: 40%;" /></p><ul><li>代码 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:07:14-10:01:07-image-20220705143702378.png" alt="image-20220705143702378" style="zoom:50%;" /></li></ul></li><li><p>读者-写者问题</p><blockquote><p>允许多读1写</p><p>在写时其他进程不能进入</p><p>写之前其他进程必须全部退出</p></blockquote><ul><li>如果一直有进程在读，那写进程会饿死。因此增加了写优先信号量</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++">semaphore rw=<span class="hljs-number">1</span>;     <span class="hljs-comment">//用于实现对共享文件的互斥访问</span><br><span class="hljs-type">int</span> count <span class="hljs-number">0</span>;        <span class="hljs-comment">//记录当前有几个读进程在访问文件</span><br>semaphore mutex =<span class="hljs-number">1</span>；<span class="hljs-comment">//用于保证对count变量的互斥访问</span><br>semaphore w =<span class="hljs-number">1</span>;     <span class="hljs-comment">//用于实现“写优先”</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">writer</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-built_in">p</span>(w);<span class="hljs-comment">//*********为了写优先</span><br>        <span class="hljs-built_in">p</span>(rw);<br>        <span class="hljs-comment">//写文件</span><br>        <span class="hljs-built_in">v</span>(rw);<br>        <span class="hljs-built_in">v</span>(w);<span class="hljs-comment">//*********为了写优先</span><br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">reader</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-built_in">p</span>(w);<span class="hljs-comment">//*********为了写优先</span><br>        <span class="hljs-built_in">p</span>(mutex);<br>        <span class="hljs-keyword">if</span>(count == <span class="hljs-number">0</span>) <span class="hljs-built_in">p</span>(rw); count++;<br>        <span class="hljs-built_in">v</span>(mutex);<br>        <span class="hljs-built_in">v</span>(w);<span class="hljs-comment">//*********为了写优先</span><br>        <span class="hljs-comment">//读文件</span><br>        <span class="hljs-built_in">p</span>(mutex);<br>        count--; <span class="hljs-keyword">if</span>(count == <span class="hljs-number">0</span>) <span class="hljs-built_in">v</span>(rw);<br>        <span class="hljs-built_in">v</span>(mutex);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>哲学家进餐问题<ul><li>思路1：限制同时进餐人数是总人数-1</li><li>思路2：奇数号先拿左边，偶数号先拿右边</li><li>思路3：检查完左右都可以使用后才拿起筷子</li></ul></li></ul><h4 id="2-3-4-管程"><a href="#2-3-4-管程" class="headerlink" title="2.3.4.管程"></a>2.3.4.管程</h4><p>线程安全的数据结构库</p><ul><li>组成部分<ul><li>局部于管程的<strong>共享数据结构</strong>说明</li><li>对该数据结构进行操作的<strong>一组过程</strong></li><li>对局部于管程的共享数据设置初始值的语句</li><li>管程有一个名字</li></ul></li><li>特征<ul><li>局部于管程的数据只能被局部于管程的过程所访问</li><li>一个进程只有通过调用管程内的过程才能进入管程访问共享数据</li><li>每次仅允许一个进程在管程内执行某个内部过程</li></ul></li></ul><h3 id="2-4-死锁"><a href="#2-4-死锁" class="headerlink" title="2.4.死锁"></a>2.4.死锁</h3><ul><li><p>产生条件：互斥、不可剥夺、请求和保持、循环等待</p><blockquote><p>死锁一定循环等待，但是循环等待不一定死锁。循环等待是死锁的<strong>必要不充分</strong>条件</p></blockquote></li><li><p>发生时机</p><ul><li>系统资源竞争，如打印机</li><li>进程推进顺序非法，请求和释放资源顺序不当</li><li>信号量的使用不当</li></ul></li><li><p>处理策略</p><ul><li><p>预防死锁，破坏必要条件</p><ul><li><p>破坏-互斥：<strong>SPOOLing技术</strong>，将设备逻辑上抽象改造为共享设备</p><blockquote><p>适用范围不广</p></blockquote></li><li><p>破坏-不剥夺：</p><ul><li><p>资源不满足时<strong>立即释放</strong>，以后需要时重新申请</p><blockquote><p>一直如此的话会进程饥饿</p></blockquote></li><li><p>操作系统<strong>强行剥夺</strong>。需要考虑优先级</p><blockquote><p>实现复杂</p><p>剥夺之前的一部分工作会失效，只适用于易保存和恢复状态的资源，如CPU</p><p>反复申请资源增加开销</p></blockquote></li></ul></li><li><p>破坏-请求和保持：<strong>静态分配</strong>，运行之前一次性申请全部资源。资源未满足不会投入运行</p><blockquote><p>资源利用率极低，可能导致饥饿</p></blockquote></li><li><p>破坏-循环等待：<strong>顺序资源分配</strong>，给系统中的资源编号，每个进程必须按编号递增的顺序请求资源，同类资源（即编号相同的资源）一次申请完</p><blockquote><p>不方便增加新设备，可能所有资源都需要重新编号</p><p>实际使用资源顺序可能不是按照编号来，会浪费资源</p><p>必须按规定次序申请，用户编程麻烦</p></blockquote></li></ul></li><li><p>避免死锁，防止进入不安全状态</p><ul><li>安全序列：所有进程都能得到满足顺利结束</li><li>不安全状态：找不到一个安全序列，有可能死锁，除非有进程提前归还资源</li><li>银行家算法：<ul><li><u>扫描所有进程，找能运行的，认为其已经运行完，回收资源，重新扫描，直到所有进程都完成</u></li><li>检查此次申请是否超过了之前声明的最大需求数</li><li>检查此时系统剩余的可用资源是否还能满足这次请求</li><li>试探着分配，更改各数据结构</li><li>用安全性算法检查此次分配是否会导致系统进入不安全状态</li></ul></li></ul></li><li><p>死锁的检测和解除</p><ul><li>检测<ul><li>不能消除所有边就是发生了死锁 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:07:14-10:01:07-image-20220705193654256.png" alt="image-20220705193654256" style="zoom:40%;" /></li><li>找一个既不阻塞也不是孤点的点，将其所有边消去称为孤点</li></ul></li><li>解除<ul><li>挂起死锁进程，抢占资源。应注意防止饥饿</li><li>终止部分(或全部)死锁进程。实现简单，但代价大</li><li>一个或多个死锁进程回退到足以避免死锁的地步。需要记录历史信息、设置还原点</li></ul></li><li>如何决定对谁动手<ul><li>进程优先级</li><li>已执行多长时间</li><li>还要多久能完成</li><li>进程已经使用了多少资源</li><li>进程是交互式的还是批处理式的</li></ul></li></ul></li></ul></li></ul><h2 id="3-内存"><a href="#3-内存" class="headerlink" title="3.内存"></a>3.内存</h2><h3 id="3-1-地址转换"><a href="#3-1-地址转换" class="headerlink" title="3.1.地址转换"></a>3.1.地址转换</h3><ul><li><p>装入的方式</p><ul><li><p>绝对装入：编译时就把变量地址修改为正确的地址</p><blockquote><p>灵活性很差，只适用于单道程序</p></blockquote></li><li><p>可重定位装入：<strong>装入内存时</strong>按照起始地址修改所有变量的地址</p><blockquote><p>需要空间分配连续，且作业一次全部装入内存</p><p>程序运行期间不可以移动</p></blockquote></li><li><p>动态运行时装入：程序真的要执行时才做地址转换</p><blockquote><p>现代操作系统 使用</p><p>需要<strong>重定位寄存器</strong>记录装入程序的起始地址</p></blockquote></li></ul></li><li><p>链接的方式</p><ul><li>静态链接：在程序运行之前，先将各目标模块及它们所需的库函数连接成一个完整的可执行文件（装入模块），之后不再拆开</li><li>装入时动态链接：将各目标模块装入内存时，边装入边链接的链接方式</li><li>运行时动态链接：在程序执行中需要该目标模块时，才对它进行链接。其优点是便于修改和更新，便于实现对目标模块的共享</li></ul></li></ul><h3 id="3-2-存储保护"><a href="#3-2-存储保护" class="headerlink" title="3.2.存储保护"></a>3.2.存储保护</h3><ul><li>设置上下限寄存器</li><li>利用重定位寄存器、界地址寄存器进行判断</li></ul><h3 id="3-3-内存空间扩充"><a href="#3-3-内存空间扩充" class="headerlink" title="3.3.内存空间扩充"></a>3.3.内存空间扩充</h3><ul><li><p>覆盖技术</p><blockquote><p>必须由程序员声明覆盖结构</p><p>对用户不透明，增加了用户编程负担</p></blockquote><ul><li>需要常驻内存的段放在“<strong>固定区</strong>”中，<strong>调入后就不再调出</strong>（除非运行结束）</li><li>不常用的段放在“<strong>覆盖区</strong>”，需要用到时调入内存，用不到时调出内存</li></ul></li><li><p>交换技术：进程在磁盘和内存之间动态调度。<strong>挂起状态</strong></p><blockquote><p>不是换出所有数据。PCB会常驻内存</p></blockquote><ul><li>什么位置：磁盘分为对换区和文件区，对换区为了速度选择<strong>连续分配</strong>，文件区为了利用率选择<strong>离散分配</strong></li><li>什么时候：经常发生缺页，说明内存紧张；缺页率下降可暂停换出</li><li>换出什么：优先级低、阻塞。为防止调入内存后很快换出，还会考虑<strong>内存驻留时间</strong></li></ul></li></ul><h3 id="3-4-空间分配"><a href="#3-4-空间分配" class="headerlink" title="3.4.空间分配"></a>3.4.空间分配</h3><h4 id="3-4-1-连续分配"><a href="#3-4-1-连续分配" class="headerlink" title="3.4.1.连续分配"></a>3.4.1.连续分配</h4><ul><li><p>单一连续分配</p><blockquote><p>内存当中同一时刻只能有一道用户程序，不支持多道程序并发运行，用户程序独占整个用户区</p><p>产生内部碎片</p></blockquote><ul><li>实现简单，无外部碎片</li><li>可以采用覆盖技术扩充内存</li><li><p>不(一定)需要内存保护</p></li><li><p>固定分区分配</p><ul><li><p>分区大小相等</p><blockquote><p>缺乏灵活性，适合用一台计算机控制n个相同的对象</p></blockquote></li><li><p>分区大小不等</p><ul><li>根据作业大小进行划分，如多个小分区，少量大分区</li></ul></li><li><p>分区说明表：包含 大小、起始地址、状态</p><blockquote><p>无外部碎片，有内部碎片（即有的分区不能完全使用，分配给程序却没有利用到）</p></blockquote></li></ul></li></ul></li><li><p>动态分区分配：在进程装入内存的时候，根据进程的大小动态地建立分区</p><blockquote><p>无内部碎片，有外部碎片（空闲区域太小，没有进程能用）</p></blockquote><ul><li><p>用什么记录：空闲分区表 或 空闲分区链</p></li><li><p><strong>紧凑技术</strong>：把进程挪位置，空出更大的连续空闲空间</p></li><li><p>分配算法</p><ul><li><p>首次适应：空闲分区以<strong>地址递增</strong>排列，选择第一个能满足的空闲分区（地址最小）</p></li><li><p>最佳适应：空闲分区以<strong>容量递增</strong>排列，选择第一个能满足的空闲分区（容量最小）</p><blockquote><p>留下很多难以利用的小碎片</p></blockquote></li><li><p>最坏适应：空闲分区以<strong>容量递减</strong>排列，选择第一个能满足的空闲分区（容量最大）</p><blockquote><p>大进程无处安放</p></blockquote></li><li><p>邻近适应：首次适应，但每次都从上一次查找结束的位置开始往后检索</p><ul><li>使用循环链表</li><li>算法开销小，不需要额外花时间重新排列</li></ul></li></ul></li></ul></li></ul><h4 id="3-4-2-非连续分配"><a href="#3-4-2-非连续分配" class="headerlink" title="3.4.2.非连续分配"></a>3.4.2.非连续分配</h4><ul><li><p>基本分页存储管理：内粗分为大小相等的分区（4KB），进程的逻辑地址空间也分，进程页面与内存页框一一对应</p><ul><li><p>概念辨析</p><ul><li><strong>页、页面</strong>：进程的逻辑划分部分</li><li><strong>页框、页帧</strong>：内存的物理划分部分，又称为物理页面</li><li><strong>页表长度</strong>：页表总项数（如4G）</li><li><strong>页表项长度</strong>：每个页表项占多大空间（如3B）</li><li><strong>页面大小</strong>：一个页面多大（如4K）</li><li><strong>页目录表</strong>：更高层级的页表</li></ul></li><li><p>每个进程一个页表，一般放在PCB中。页面占$2^{12}$B，所以共有$2^{20}$块，至少需要3B来表示块号。块号连续存放所以不需要存储页号，已经隐含了</p></li><li><p>流程：拆分页号、偏移量；<strong>越界检查($\ge$)</strong>；[扫描快表]；查找内存块号；计算物理地址</p></li><li><p>为了方便页表的查询，经常会让一个页表项<strong>占更多的字节</strong>，使得每个页面恰好可以装得下整数个页表项</p><blockquote><p>例1：使用基本分页存储管理，采用了快表。访问一次快表耗时1us，访问一次内存耗时100us。若快表的命中率为90%，那么访问一个逻辑地址的平均耗时是多少？<strong>（此处快表慢表不同时查询）</strong></p><p>$(1+100)\times 0.9+(1+100+100)\times 0.1=111$us</p><p>例2：<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:07:14-10:01:07-image-20220708095847201.png" alt="image-20220708095847201" style="zoom:100%;" /></p></blockquote></li></ul></li><li><p>基本分段存储管理</p><ul><li><p>段表：段号、段长、基址（段在内存中的起始位置）。16+32=48位即可，6字节</p></li><li><p>需要检查<strong>段内地址是否大于</strong>此段的<strong>段长</strong></p></li><li><p>更容易实现信息的共享和保护</p></li><li><p>只有纯代码（不可重入代码、不能被修改的代码）可以被共享的访问。那这种代码不属于临界资源，各个进程即使并发的访问这些代码也不会因为并发产生问题</p><blockquote><p>分页分段对比：</p><ul><li>页是信息的物理单位。对用户不可见；段是信息的逻辑单位。分段对用户可见，用户编程时需要显式地给出段名</li><li>分页当中进程的地址空间是一维的，而分段的时候进程的地址空间是二维的</li></ul></blockquote></li></ul></li><li><p>段页式存储管理</p><ul><li>结构 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:07:14-10:01:07-image-20220708102626448.png" alt="image-20220708102626448" style="zoom:100%;" /></li><li>分段过程程序员可见，分页不可见</li><li>只要快表命中就不需要再访问段表和页表</li></ul></li></ul><h3 id="3-5-虚拟内存"><a href="#3-5-虚拟内存" class="headerlink" title="3.5.虚拟内存"></a>3.5.虚拟内存</h3><ul><li>传统方式缺点：一次性（无法运行或并发度下降）、驻留性（浪费资源）</li><li>虚拟内存技术建立在<strong>离散分配</strong>的内存管理方式基础之上</li><li>需要新增的功能<ul><li>请求调页：访问的信息不在内存时，操作系统将所需信息从外存调入内存，继续执行程序</li><li>页面置换：若内存空间不够，操作系统将内存中暂时用不到的信息换出到外存</li></ul></li></ul><h4 id="3-5-1-请求调页"><a href="#3-5-1-请求调页" class="headerlink" title="3.5.1.请求调页"></a>3.5.1.请求调页</h4><ul><li><p>页表新增四项 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:07:14-10:01:07-image-20220708150345084.png" alt="image-20220708150345084" style="zoom:110%;" /></p></li><li><p>缺页中断机构：内中断（故障）</p><blockquote><p>一条指令中可能多次缺页中断，比如 copy A to B</p><p>如果页面被换出了内存，快表中页表项也应当删除</p><p>访问了一个页面后要修改快表、修改访问位 [和修改位（写指令时）]</p><p>调入内存后修改页表和快表，再访问直接从快表找到</p><p>缺页中断之后未必发生页面置换，只有内存块已经都满了才需要页面置换</p><p> <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:07:14-10:01:07-image-20220708151511014.png" alt="image-20220708151511014" style="zoom:120%;" /></p></blockquote></li></ul><h4 id="3-5-2-页面置换"><a href="#3-5-2-页面置换" class="headerlink" title="3.5.2.页面置换"></a>3.5.2.页面置换</h4><ul><li><p>最佳置换（OPT）</p><ul><li>每次选<strong>择淘汰的页面</strong>将是<strong>以后永不使用</strong>，或者在<strong>最长时间内不再被访问</strong></li><li>无法实现</li></ul></li><li><p>先进先出置换（FIFO）</p><blockquote><p><strong>Belady异常</strong>——当为进程分配的物理块数增大时，缺页次数不减反增的异常现象。</p></blockquote></li><li><p>最近最久未使用置换（LRU）</p><ul><li>从后往前检查找到最久没使用的 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:07:14-10:01:07-image-20220708152745909.png" alt="image-20220708152745909" style="zoom:110%;" /></li></ul></li><li><p>时钟置换算法（CLOCK）</p><ul><li><p>性能和开销较均衡</p></li><li><p><strong>最近未用</strong>算法（NRU，Not Recently Used）</p></li><li><p>为每个页面设置一个<strong>访问位</strong>，再将内存中的页面都通过链接指针链接成一个<strong>循环队列</strong>。当某页被访问时，其访问位置为1。当需要淘汰一个页面时，只需检查页的访问位。如果是0，就选择该页换出；如果是1，则将它置为0，暂不换出，继续检查下一个页面，若第一轮扫描中所有页面都是1，则将这些页面的访问位依次置为0后，再进行第二轮扫描</p><blockquote><p>第二轮扫描中一定会有访问位为0的页面，因此简单的CLOCK算法选择一个淘汰页面<strong>最多会经过两轮扫描</strong></p></blockquote></li></ul></li><li><p>改进型的时钟置换：优先淘汰<strong>未修改过</strong>的页面，减少IO次数</p><ul><li>第一轮：从当前位置开始扫描到第一个（0，0）的帧用于替换。本轮扫描不修改任何标志位</li><li>第二轮：若第一轮扫描失败，则重新扫描，查找第一个（0，1）的帧用于替换。本轮<strong>将所有扫描过的帧访问位设为0</strong></li><li>第三轮：若第二轮扫描失败，则重新扫描，查找第一个（0，0）的帧用于替换。本轮扫描不修改任何标志位</li><li>第四轮：若第三轮扫描失败，则重新扫描，查找第一个（0，1）的帧用于替换</li><li>最多4轮</li></ul></li></ul><h4 id="3-5-3-页面分配"><a href="#3-5-3-页面分配" class="headerlink" title="3.5.3.页面分配"></a>3.5.3.页面分配</h4><ul><li>驻留集：实际在内存中页面数量 / 总页面数量</li><li>页面分配策略<ul><li>固定分配：局部置换<ul><li>为每个进程分配一组固定数目的物理块</li><li>很难在刚开始的时候就确定应该为每个进程分配多少个物理块才能才算合适</li></ul></li><li>可变分配：局部置换（<strong>取决于缺页频率</strong>）、全局置换（打土豪分田地，<strong>只要缺页必定分配</strong>）<ul><li>进程运行期间，可根据情况做适当的增加或减少</li></ul></li><li>预调页：主要用于进程首次调入，由程序员指出哪些先调入</li><li>请求调页：运行中缺页时才调入。IO开销较大</li></ul></li><li>调入页面的时机<ul><li>对换区够大：调入调出都是对换区，因为快</li><li>对换区不够大：不会被修改的数据都直接从文件区调入，换出时不必写回磁盘，下次需要时再从文件区调入即可。可能被修改的部分换出时需写回磁盘对换区，下次需要时再从对换区调入</li><li>UNIX方式：运行之前进程有关的数据全部放在文件区，故未使用过的页面，都可从文件区调入。若被使用过的页面需要换出，则写回对换区，下次需要时从对换区调入</li></ul></li><li>抖动（颠簸）现象：频繁访问的块数目高于可用物理块数</li><li>工作集：在某段时间间隔里，进程实际访问页面的集合<ul><li>大小可以小窗口实际尺寸</li><li>一般来说驻留集不能小于工作集</li></ul></li></ul><h2 id="4-文件"><a href="#4-文件" class="headerlink" title="4.文件"></a>4.文件</h2><h3 id="4-1-逻辑结构"><a href="#4-1-逻辑结构" class="headerlink" title="4.1.逻辑结构"></a>4.1.逻辑结构</h3><ul><li><p>无结构文件</p></li><li><p>有结构文件</p><ul><li><p>顺序文件</p><blockquote><p>串结构：记录之间的顺序与关键字无关</p><p>顺序结构：记录之间的顺序按关键字顺序排列</p></blockquote><ul><li>随机存取 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:07:14-10:01:07-image-20220708225322327.png" alt="image-20220708225322327" style="zoom:120%;" /></li></ul></li><li><p>索引文件：本身是<strong>定长记录的顺序文件</strong></p><ul><li>用于对信息处理的及时性要求比较高的场合</li><li>若索引表按关键字顺序排列，则可支持快速检索</li></ul></li><li><p>索引顺序文件：对记录进行分组，每一个分组建立一个索引表项</p></li></ul></li></ul><h3 id="4-2-文件功能"><a href="#4-2-文件功能" class="headerlink" title="4.2.文件功能"></a>4.2.文件功能</h3><ul><li><p>目录</p><ul><li>单级目录不能重名；两级目录不同用户的文件可以重名，但是文件不能分类</li><li><p>FCB的有序集合称为“文件目录”，一个FCB就是一个文件目录项。 FCB中包含了文件的基本信息（文件名、物理地址、逻辑结构、物理结构等），存取控制信息（是否可读/可写、禁止访问的用户名单等），使用信息（如文件的建立时间、修改时间等）</p></li><li><p><strong>树形目录结构</strong>可以很方便地对文件进行分类，层次结构清晰，也能够更有效地进行文件的管理和保护。但是，树形结构<strong>不便于实现文件的共享</strong>。为此，提出了“<strong>无环图目录结构</strong>”——多个用户的文件指向同一个文件，使用共享计数器</p></li><li><p>FCB改进：文件名+索引节点指针。把所有其他信息都放到索引节点中</p></li><li><p>内存索引节点需要增加是否被修改、有多少个进程访问等信息</p></li></ul></li><li><p>保护</p><ul><li><p>口令：时间和空间的开销都小，但是口令保存在系统内部，如果泄露就畅通无阻了</p></li><li><p>加密：保密性强、不需要保存密码，但加密解密耗时</p></li><li><p>访问控制</p><blockquote><p>ACL表内容：<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:07:14-10:01:07-image-20220710143640788.png" alt="image-20220710143640788" style="zoom:50%;" /> 不重要，了解即可</p><p>如果对某个目录进行了访问权限的控制，那也要对目录下的所有文件进行相同的访问权限控制</p></blockquote></li></ul></li><li><p>共享</p><ul><li>索引节点：硬链接：多个索引节点指针指向同一个索引节点</li><li>符号链：软链接：一个特殊的Link类型文件，记录实际指向文件的绝对路径<ul><li>文件实际删除不影响软链接，只是链接失效</li><li>速度比硬连接慢</li></ul></li></ul></li></ul><h3 id="4-3-物理结构"><a href="#4-3-物理结构" class="headerlink" title="4.3.物理结构"></a>4.3.物理结构</h3><h4 id="4-3-1-非空闲块"><a href="#4-3-1-非空闲块" class="headerlink" title="4.3.1.非空闲块"></a>4.3.1.非空闲块</h4><p>通常块和内存页面一样大，也 是用逻辑块号+块内地址这种方式 </p><ul><li><p>连续分配 </p><ul><li><p>支持<strong>顺序访问</strong>和<strong>直接访问</strong></p></li><li><p>读写速度最快</p><blockquote><p>增加内容需要整体迁移文件</p><p>碎片无法利用，可能无法找到足够大的连续空间</p></blockquote></li></ul></li><li><p>链接分配</p><blockquote><p>没说是哪种链接分配默认是<strong>隐式链接</strong></p></blockquote><ul><li>隐式链接：每一块中存储指向下一块的指针，对用户透明<ul><li>支持<strong>顺序访问</strong>，不支持随机访问</li><li>文件拓展方便，不会有碎片，空间利用率高</li></ul></li><li>显式链接：各个块的指针显式地存放在<strong>文件分配表(FAT)</strong>中 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:07:14-10:01:07-image-20220710161813080.png" alt="image-20220710161813080" style="zoom:40%;" /><ul><li>一个文件只需要一张表，常驻内存</li><li>支持随机访问</li><li>地址转换过程不需要访问磁盘，文件访问效率高</li></ul></li></ul></li><li><p>索引分配：为每个文件建立一张索引表，文件名关联索引表的存放位置 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:07:14-10:01:07-image-20220710190653753.png" alt="image-20220710190653753" style="zoom:50%;" /></p><ul><li><p>二级索引</p><blockquote><p>例题：假设磁盘块大小为1KB，一个索引表项占4B，则一个磁盘块只能存放256个索引项。<br>若某文件采用两层索引，则该文件的最大长度可以到256 <em> 256 </em> 1KB = 65,536KB = 64MB</p></blockquote></li><li><p>混合索引 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:07:14-10:01:07-image-20220710193018586.png" alt="image-20220710193018586" style="zoom:40%;" /></p></li></ul></li><li><p>逻辑结构 和 物理结构 概念辨析</p><blockquote><p>链式存储是用户自己选择的数据逻辑结构；链式分配是操作系统自动完成的链式分配空间，对用户透明</p><p>索引文件和索引分配 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:07:14-10:01:07-image-20220711144249529.png" alt="image-20220711144249529" style="zoom:60%;" /></p></blockquote></li></ul><h4 id="4-3-2-空闲块"><a href="#4-3-2-空闲块" class="headerlink" title="4.3.2.空闲块"></a>4.3.2.空闲块</h4><ul><li>几种管理方法<ul><li>空闲表法：每一个空闲区间的起始位置和长度</li><li>空闲链表法<ul><li>空闲盘块链</li><li>空闲盘区链：连续空闲区间之间组成一条链</li></ul></li><li>位示图法<ul><li>盘块号转换字号位号，注意是否从0开始</li></ul></li><li>成组链接法<ul><li>超级块常驻内存，与磁盘同步 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:07:14-10:01:07-image-20220711160920617.png" alt="image-20220711160920617" style="zoom:35%;" /></li><li>如果有一个分组全部分配出去，需要把指向下一块的链接信息复制到超级块中</li><li>回收块时如果第一个分组已经满了，需要新建一个块，指向第一个分组（类似于头插）</li></ul></li></ul></li></ul><h3 id="4-4-基本操作"><a href="#4-4-基本操作" class="headerlink" title="4.4.基本操作"></a>4.4.基本操作</h3><ul><li>创建：找到空间、创建文件对应目录项</li><li>删除：找到目录项、回收磁盘块</li><li>打开：找到目录项并查看权限、将目录项复制到内存中的“打开文件表”中、用户使用打开文件表的编号（<strong>文件描述符</strong>）来指明要操作的文件<ul><li>系统的打开文件表，整个系统只有一张，记录所有的正在被其他进程使用的文件的一些信息</li><li>进程的打开文件表，记录了自己的这个进程此时打开了哪些文件</li><li>示意图 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:07:14-10:01:07-image-20220712014849661.png" alt="image-20220712014849661" style="zoom:50%;" /></li></ul></li><li>关闭：删除进程打开文件表中的表项、修改打开计数器。按情况回收资源</li><li>读：指明打开文件的编号（已经打开过了）、读入多少、放在内存什么位置</li></ul><h3 id="4-5-文件系统层次结构"><a href="#4-5-文件系统层次结构" class="headerlink" title="4.5.文件系统层次结构"></a>4.5.文件系统层次结构</h3><ul><li>示意图 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:07:14-10:01:07-image-20220712015829973.png" alt="image-20220712015829973" style="zoom:50%;" /></li></ul><h3 id="4-6-磁盘"><a href="#4-6-磁盘" class="headerlink" title="4.6.磁盘"></a>4.6.磁盘</h3><p>块号：柱面号、盘面号、扇区号</p><p>固定头磁盘（每个磁道有一个磁头）</p><p>移动头磁盘（每个盘面只有一个磁头）</p><ul><li><p>一次读写时间</p><ul><li><p>寻找时间：启动磁头臂+移动磁头</p><blockquote><p>启动 + 移动个数 * 每个时间</p></blockquote></li><li><p>延迟时间：旋转磁盘的时间</p><blockquote><p>转半圈的时间</p></blockquote></li><li><p>传输时间</p><blockquote><p>转一圈的时间 * 需要转多少圈</p></blockquote></li></ul></li><li><p>调度算法</p><blockquote><p>没有特殊说明，默认不是走到头那种算法</p></blockquote><ul><li>先来先服务（FCFS）：大量分布较广的请求性能不好</li><li>最短寻找时间优先（SSTF）：性能较好，<strong>可能饥饿</strong></li><li>扫描算法(SCAN)：移动到<strong>最外侧磁道（不是最大的请求，是边界）</strong>才能反向<ul><li>LOOK调度算法：到最边上一个请求后立即反向</li></ul></li><li>循环扫描算法（C-SCAN）<ul><li>移动到<strong>最外侧磁道（不是最大的请求，是边界）</strong>才能反向</li><li>立即回到起始位置，不做任何处理</li><li>C-LOOK：两边都是最远请求就停止，不用到头</li></ul></li></ul></li><li><p>优化方法</p><ul><li>交替编号：让逻辑上相邻的扇区在物理上有一定的间隔</li><li>柱面号在盘面号之前：读取连续磁盘块时，减少磁头移动消耗的时间</li><li>错位命名：上下盘片之间磁道命名错开</li></ul></li><li><p>磁盘初始化</p><ul><li>低级格式化，划分扇区。头、数据区域（如512B大小）、尾三个部分组成。管理扇区所需要的各种数据结构一般存放在头、尾两个部分，包括扇区校验码（如奇偶校验、CC循环冗余校验码等，校验码用于校验扇区中的数据是否发生错误）</li><li>分区，每个分区由若干柱面组成 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:07:14-10:01:07-image-20220712231307737.png" alt="image-20220712231307737" style="zoom:40%;" /></li><li>逻辑格式化，创建文件系统。创建文件系统的根目录、初始化存储空间管理所用的数据结构（如位示图、空闲分区表）</li></ul></li><li><p>引导块</p><ul><li>ROM中只存放很小的「自举装入程序」，完整的自举程序放在磁盘的启动块（即引导块/启动分区）上，启动块位于磁盘的固定位置</li><li>拥有引导块的逻辑磁盘就是系统盘</li></ul></li><li><p>坏块管理</p><ul><li>在FAT表中标记。对系统不透明</li><li>扇区备用：磁盘控制器维护坏块链表，低格时对其初始化。同时会保留一些备用扇区用于替换坏块。对系统透明</li></ul></li></ul><h2 id="5-设备"><a href="#5-设备" class="headerlink" title="5.设备"></a>5.设备</h2><h3 id="5-1-分类"><a href="#5-1-分类" class="headerlink" title="5.1.分类"></a>5.1.分类</h3><ul><li><p>按使用特性</p><ul><li>人机交互</li><li>存储设备</li><li>网络通信设备</li></ul></li><li><p>按传输速率</p><ul><li>低速：鼠标键盘</li><li>中速：激光打印机</li><li>高速：硬盘</li></ul></li><li><p>按信息交换单位</p><ul><li><p>块设备：磁盘</p><blockquote><p>传输速率较高，可寻址，即对它可随机地读/写任一块</p></blockquote></li><li><p>字符设备：鼠标键盘</p><blockquote><p>传输速率较慢，不可寻址，在输入/输出时常采用中断驱动方式</p></blockquote></li></ul></li></ul><blockquote><p><strong>分配时应当考虑的因素</strong>：</p><ul><li>设备固有属性<ul><li>独占性</li><li>共享性</li><li>虚拟性</li></ul></li><li>设备分配算法<ul><li>先来先服务</li><li>高优先级优先</li></ul></li><li>设备安全性<ul><li>安全分配——发出IO就阻塞，IO完成才唤醒</li><li>不安全分配——可同时发出多个IO，IO设备不可用才阻塞</li></ul></li></ul></blockquote><h3 id="5-2-IO控制"><a href="#5-2-IO控制" class="headerlink" title="5.2.IO控制"></a>5.2.IO控制</h3><ul><li><p>IO控制器 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:07:14-10:01:07-image-20220713065355694.png" alt="image-20220713065355694" style="zoom:50%;" /></p><ul><li>接受和识别CPU发出的命令（控制寄存器）</li><li>向CPU报告设备的状态（状态寄存器）</li><li>数据交换（数据寄存器）</li><li>地址识别</li></ul></li><li><p>编址方式</p><ul><li>内存映象</li><li>寄存器独立编址：需要设置专门的指令来进行操作</li></ul></li><li><p>控制方式</p><ul><li><p>程序直接控制</p><blockquote><p>CPU干预频率：很频繁</p><p>数据传送单位：一个字</p><p>数据流向：内存和IO设备之间一定要经过CPU</p></blockquote></li><li><p>中断驱动</p><blockquote><p>CPU干预频率：等待IO过程中CPU可以干别的，<strong>实现了CPU和IO并行</strong></p><p>数据传送单位：一个字</p><p>数据流向：内存和IO设备之间一定要经过CPU</p></blockquote></li><li><p>DMA（直接存储器存取）<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:07:14-10:01:07-image-20220713071726194.png" alt="image-20220713071726194" style="zoom:40%;" /></p><blockquote><p>CPU干预频率： 请在一块数据的开始和结束时需要CPU的干预</p><p>数据传送单位：一个字 或 一个块（必须连续。不连续还是要多条指令）</p><p>数据流向：<strong>不需要经过CPU</strong></p></blockquote></li><li><p>通道控制</p><blockquote><p>CPU干预频率：很低，完成一系列读写才会有一次中断信号</p><p>数据传送单位：一组数据块 </p><p>数据流向：不需要经过CPU</p><p>一个通道可以控制多个 IO 控制器，而一个 IO 控制器又可以控制多个 IO 设备</p></blockquote></li></ul></li></ul><h3 id="5-3-IO核心子层"><a href="#5-3-IO核心子层" class="headerlink" title="5.3.IO核心子层"></a>5.3.IO核心子层</h3><ul><li><p>结构 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:07:14-10:01:07-image-20220713094119330.png" alt="image-20220713094119330" style="zoom:50%;" /></p></li><li><p>SPOOLing技术：「输入/输出设备」和「输入/输出井」之间使用内存中的「输入/输出缓冲区」进行缓冲</p></li><li><p>设备分配</p><ul><li><p>安全分配：只要分配了IO设备就一定会阻塞。资源利用率低</p></li><li><p>不安全分配：进程不会被阻塞，继续往下执行。可能导致<strong>死锁</strong>，可以使用银行家算法</p></li><li><p>数据结构</p><ul><li><p>设备控制表DCT <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:07:14-10:01:07-image-20220714092009949.png" alt="image-20220714092009949" style="zoom:50%;" /></p></li><li><p>控制器控制表COCT <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:07:14-10:01:07-image-20220714092212003.png" alt="image-20220714092212003" style="zoom:50%;" /></p></li><li><p>通道控制表CHCT <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:07:14-10:01:07-image-20220714092405728.png" alt="image-20220714092405728" style="zoom:50%;" /></p></li><li><p>系统设备表（SDT）：记录了系统中<strong>全部设备</strong>的情况，每个设备对应一个表目</p><blockquote><p>缺点： </p><ul><li>用户编程时必须使用“物理设备名”，底层细节对用户不透明，不方便编程</li><li>若换了一个物理设备，则程序无法运行</li><li>若进程请求的物理设备正在忙碌，则即使系统中还有同类型的设备，进程也必须阻塞等待</li></ul></blockquote></li></ul></li></ul></li><li><p>设备分配的改进</p><ul><li><strong>逻辑设备表</strong>（LUT）建立了逻辑设备名与物理设备名之间的映射关系</li><li>第一次使用<strong>设备类型</strong>请求资源时，系统查询系统设备表，并在逻辑设备表中增加表项，下次请求时直接查逻辑设备表</li></ul></li></ul><h3 id="5-4-缓冲区管理"><a href="#5-4-缓冲区管理" class="headerlink" title="5.4.缓冲区管理"></a>5.4.缓冲区管理</h3><ul><li>作用<ul><li>缓和CPU与I/O设备之间速度不匹配的矛盾</li><li>减少对CPU的中断频率，放宽对CPU中断相应时间的限制</li><li>解决数据粒度不匹配的问题</li><li>提高CPU与I/O设备之间的并行性</li></ul></li><li><strong>缓冲区必须充满后才能取出数据</strong></li><li>周期 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:07:14-10:01:07-image-20220714094211540.png" alt="image-20220714094211540" style="zoom:45%;" /></li><li>单缓冲，T&gt;C时，T+M；T&lt;C时，C+M</li><li>双缓冲，Max(T,C+M )</li><li>循环缓冲区：将多个<strong>大小相等</strong>的缓冲区链接成一个<strong>循环队列</strong> <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:07:14-10:01:07-image-20220714095441427.png" alt="image-20220714095441427" style="zoom:50%;" /></li><li>缓冲池 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:07:14-10:01:07-image-20220714095658350.png" alt="image-20220714095658350" style="zoom:50%;" /></li></ul>]]></content>
    
    
    <categories>
      
      <category>考研</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>让你的PDF更容易阅读</title>
    <link href="/blog/a65539427ee0/"/>
    <url>/blog/a65539427ee0/</url>
    
    <content type="html"><![CDATA[<h1 align="center">让你的PDF更容易阅读</h1><p>许多人有“无纸化学习”的习惯，PDF版本的教材是其中十分重要的一环。然而，通过各种渠道找到的PDF版教材通常不怎么清晰，属于“能看，只能看一点点”的程度，一些背景不干净的PDF在电子墨水屏上看更是惨不忍睹。本文致力于对电子书做一些简单的图像处理以提高阅读体验。</p><h2 id="1-原理"><a href="#1-原理" class="headerlink" title="1.原理"></a>1.原理</h2><p>本文中要处理的电子书特指扫描版PDF，一方面是因为这种类型的教材数量最多，而且文字版教材阅读方面可能存在的的主要问题是排版而不是文字。PDF文档格式简单来说是一种类似json的资源描述格式，它以每页为单位链接了若干对象，然后将对象的字节码或者二进制码直接插入其中（两种都支持，因此有的PDF用文本编辑器打开能看懂，有的就是乱码）。对于扫描PDF来说，它只是一堆图像的集合，不会有复杂的后处理和计算，因此可以通过直接处理其中的图像来达到目的。具体来说，处理过程分为拆分图片、处理图片、合并图片三部分。</p><p>对数字图像的任何处理都会造成其中包含总信息的损失，但是其中大部分是我们不需要的低频信息，使人能够认出来文字的信息多属于高频信息。可以通过一些图像变换牺牲掉一些无关紧要的低频信息来换取高频信息的加强。这也就是为什么有时候更清晰的图像可以反而体积更小</p><h2 id="2-第一步：拆分"><a href="#2-第一步：拆分" class="headerlink" title="2.第一步：拆分"></a>2.第一步：拆分</h2><p>科普几个图像格式，<code>jpeg</code>是有损压缩，目前在所有平台支持最好；<code>png</code>比<code>jpg</code>多一个透明图层，一般电脑截图是这种格式，但我们的PDF显然不含有透明图层，因此这种格式我们不采用；<code>tiff</code>是一个打包，它可以存储多种数据和标签，包括24位无压缩数据，因此我们将PDF拆分为图像时采用此格式，以便造保存所有信息方便后续处理得到质量更高的图像。格式灵活和丰富的缺点就是不实在所有设备上都支持得很好，因此各大PDF合并软件都默认对<code>tiff</code>格式图像合并时做一次格式转换，这一点后面会提到。</p><p>以Adobe Acrobat为例，如图所示导出图像。注意可以先在设置中<strong>设置导出质量为最高</strong>。另外，导出会有几百张图片，所以选择目录时请<strong>不要直接选择桌面</strong>，资源管理器会卡死。</p><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:04:03-23:11:31-image-20220403213413071.png" alt="image-20220403213413071" style="zoom:50%;" /></p><h2 id="3-第二步：处理"><a href="#3-第二步：处理" class="headerlink" title="3.第二步：处理"></a>3.第二步：处理</h2><p>以Affinity Photo为例，其他P图软件也可以，步骤不会差太多。</p><h3 id="处理为白纸黑字"><a href="#处理为白纸黑字" class="headerlink" title="处理为白纸黑字"></a>处理为白纸黑字</h3><p>我随便找了张图片，色彩不是很均衡，按照箭头解锁图像然后将其处理为黑白。模式选择“正常”，这样将有底色的图像处理为纯黑白。</p><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:04:03-23:11:31-image-20220403220451287.png" alt="image-20220403220451287" style="zoom:25%;" /></p><h3 id="调整曲线"><a href="#调整曲线" class="headerlink" title="调整曲线"></a>调整曲线</h3><p>还是点击这个黑白半圆选择处理类型，选择曲线。这个曲线是反映像素灰度数值(0-255)在全部像素中占比的二维曲线，图中红色的一条斜线代表不做变换，如图将左边向下拽、右边向上拽，代表将亮度小于一定数值的全部调整为纯黑，高于一定数值的全部调整为纯白。此操作可以提高图像对比度，并且让底色更白（对于比较干净的底色一般可以轻松调整至纯白）。注意曲线不要拉太多，拉太多会导致字边缘变成锯齿，字也会很细，读起来很费劲。</p><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:04:03-23:11:31-image-20220403222448662.png" alt="image-20220403222448662" style="zoom: 50%;" /></p><h3 id="线性加深"><a href="#线性加深" class="headerlink" title="线性加深"></a>线性加深</h3><p>和上上步相同的步骤，选择黑白调整，此时在弹出来的面板中选择“线性加深”。此操作同样是灰度映射，它将灰度做一次线性映射，原本很黑的地方会变深很多，原本很白的地方变化很小。这非常适合处理扫描书籍。</p><p>可以看到现在已经获得了很清晰的字，如果有需要的话可以多次调整曲线和线性加深，直到文字清晰背景干净且保证书中插图不会黑成一团。</p><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:04:03-23:11:31-image-20220403222420457.png" alt="image-20220403222420457" style="zoom: 33%;" /></p><p>接下来导出图片，有多种格式可以选择。此处不建议选择<code>tiff</code>，如前文所述这种格式虽然可以保证绝对清晰却不能保证可以显示。事实上如果非要使用<code>tiff</code>格式也是可以的，在Acrobat中手动一张一张插入图片不会做格式转换而是直接复制对象。但这种处理方式得到的PDF在除了Acrobat之外的其他任何阅读器中打开都只会显示空白页面。因此导出时最好选择最高清晰度<code>jpeg</code>格式。这样得到的图片体积大概会缩小$\frac{2}{3}$，清晰度下降不大。</p><h3 id="批量操作"><a href="#批量操作" class="headerlink" title="批量操作"></a>批量操作</h3><p>以上每一步操作可以录制为一个宏（操作脚本），应用于你一个批处理中所有的文件。按1箭头所指的按钮可以开始录制，你的操作结束后按2所指的按钮，然后按3所指的按钮将其保存为一个宏。</p><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:04:03-23:11:31-image-20220403225516241.png" alt="image-20220403225516241" style="zoom: 50%;" /></p><p>如图新建一个批处理，选中你刚刚导出的所有图片，应用宏即可。很快就会完成任务。</p><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:04:03-23:11:31-image-20220403225922251.png" alt="image-20220403225922251" style="zoom: 50%;" /></p><h2 id="4-第三步：合并"><a href="#4-第三步：合并" class="headerlink" title="4.第三步：合并"></a>4.第三步：合并</h2><p>Adobe Acrobat就有合并图片功能，直接合并即可。实测Mac上的Acrobat有BUG，在较大的文件合并时会直接卡死，大工程请用Windows或者换用其他软件。</p><p>这里提一个很好的命令行合并软件<a href="https://pypi.org/project/img2pdf/"><u>img2pdf</u></a>，使用python环境下的pip可以直接安装，安装好后直接命令行运行。此软件可以以高质量快速合并图片为PDF。此软件不支持我的ARM架构Mac。</p><p>经过一系列操作，你的PDF已经变得通透清晰了。Enjoy your reading.</p>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>408-计网-基础笔记</title>
    <link href="/blog/12a964af8dc9/"/>
    <url>/blog/12a964af8dc9/</url>
    
    <content type="html"><![CDATA[<h1 align="center">408-计网-基础笔记</h1><h2 id="1-网络体系结构"><a href="#1-网络体系结构" class="headerlink" title="1.网络体系结构"></a>1.网络体系结构</h2><h3 id="1-1-概念辨析"><a href="#1-1-概念辨析" class="headerlink" title="1.1.概念辨析"></a>1.1.概念辨析</h3><ul><li><p>发展阶段</p><ul><li>第一阶段：1983年阿帕网接受TCP/IP，选定Internet为主要的计算机通信系统</li><li>第二阶段：1985年起，美国国家科学基金会NSF围绕6个大型计算机中心建设计算机网络，即国家科学基金网NSFNET</li><li>第三阶段：多层次ISP结构</li></ul></li><li><p>功能</p><ul><li><strong>数据通信</strong>：7层模型的 <strong>低3层</strong>。 对应 <strong>通信子网</strong></li><li><strong>资源共享</strong>：7层模型的 <strong>高3层</strong>。 对应 <strong>资源子网</strong></li></ul></li><li><p>按拓扑结构分类：总线、星形、环形、网状</p></li><li><p>性能指标</p><ul><li><p>速率（比特率）</p><ul><li>描述速率用10进制 $1kb/s=10^3b/s$，描述存储容量用2进制 $1KB=2^{10}B=2^{13}b$</li></ul></li><li><p>带宽：网络设备能支持的最高速度。电磁波$1\mu s$传播200m</p><ul><li><p>入口发送数据的速率，不是链路上传播的速率（主机可发送的最高数据率）</p><blockquote><p>高速链路：发送速度极高，不是传播速度高</p></blockquote></li></ul></li><li><p>吞吐量：在单位时间内通过某个网络（或信道、接口）的数据量。单位b/s，kb/s，Mb/s等</p></li><li><p>时延：发送(<strong>传输</strong>)+<strong>传播</strong>+排队+处理</p></li><li><p>时延带宽积：又称为以比特为单位的链路长度。即“<strong>某段链路现在有多少比特</strong>”</p></li><li><p>往返时延RTT：从我发送第一个bit开始，到我收到第一个bit的确认 之间的时延</p><ul><li>RTT越大，在收到确认之前，可以发送的数据越多</li><li>传播时延 * 2 + 接收方处理时间</li></ul></li><li><p>利用率</p><ul><li><p>信道利用率：有数据通过时间 / 总时间</p></li><li><p>网络利用率：信道利用率加权平均值</p><blockquote><p>随利用率增大，时延急剧增大</p></blockquote></li></ul></li></ul></li></ul><h3 id="1-2-体系结构"><a href="#1-2-体系结构" class="headerlink" title="1.2.体系结构"></a>1.2.体系结构</h3><ul><li><p>概念填空</p><ul><li>网络体系结构 是 从<strong>功能</strong>上 描述 计算机网络结构</li><li>计算机网络体系结构，简称网络体系结构，是<strong>分层结构</strong></li><li>每层遵循某个/些<strong>网络协议</strong>以完成本层功能</li><li><strong>计算机网络体系结构</strong>是计算机网络的<strong>各层及其协议</strong>的集合</li><li>仅仅在<strong>相邻层</strong>间有接口，且所提供服务的具体实现细节对上一层完全屏蔽</li><li>体系结构是<strong>抽象</strong>的，而<strong>实现</strong>是指能运行的一些软件和硬件</li></ul></li><li><p>分层结构</p><ul><li><p>SDU服务数据单元：用户的数据</p></li><li><p>PCI协议控制单元：协议信息</p></li><li><p>PDU协议数据单元：对等层次之间传送的数据单位（PCI + SDU）</p><blockquote><p>图示 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220517094922157.png" alt="image-20220517094922157" style="zoom:25%;" /></p></blockquote></li></ul></li><li><p>7层OSI (“物联网淑惠试用”)</p><ul><li><p><u>物理层、数据链路层、网络层、传输层、会话层、表示层、应用层</u></p></li><li><p>数据链路层添首尾，物理层不做处理，网络层及以上只加头 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220517101820700.png" alt="image-20220517101820700" style="zoom:25%;" /></p><blockquote><p>“分组”和“数据报”的关系：数据报太长了就会切分为分组 </p></blockquote></li></ul></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">层次</th><th style="text-align:center">作用</th><th style="text-align:center">功能</th><th style="text-align:center">主要协议</th></tr></thead><tbody><tr><td style="text-align:center">表示层</td><td style="text-align:center">数据格式变换</td><td style="text-align:center">加密解密、压缩恢复</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">会话层</td><td style="text-align:center">建立/管理/终止会话、从校验点/同步点继续恢复通信</td><td style="text-align:center">数据同步</td><td style="text-align:center">HTTP</td></tr><tr><td style="text-align:center">传输层</td><td style="text-align:center">两个进程端到端的通信，传输报文段</td><td style="text-align:center">可靠/不可靠传输、差错控制(顺序错等等)、流量控制、复用分用</td><td style="text-align:center">TCP、UDP</td></tr><tr><td style="text-align:center">网络层</td><td style="text-align:center">把分组/数据报从源端传到目的端</td><td style="text-align:center">路由选择、流量控制、差错控制(奇偶校验等等)、拥塞控制</td><td style="text-align:center">IP</td></tr><tr><td style="text-align:center">数据链路层</td><td style="text-align:center">把网络层传下来的数据报组装成帧</td><td style="text-align:center">成帧(定义帧的开始结束)、差错控制(帧/位错)、流量控制、访问(接入)控制：控制对信道的访问</td><td style="text-align:center">SDLC、HDLC、PPP、STP</td></tr><tr><td style="text-align:center">物理层</td><td style="text-align:center">传输比特</td><td style="text-align:center">比特同步、比特编码、定义接口特性、传输模式、传输速率</td><td style="text-align:center">RJ45、802.3</td></tr></tbody></table></div><ul><li><p>4层TCP/IP</p><ul><li><u>网络接口层、网际层、传输层、应用层</u></li><li>与7层模型相同点：都分层、基于独立的协议栈的概念、可以实现异构网络互联</li><li>与7层模型不同点<ul><li>OSI定义三点：服务、协议、接口</li><li>OSI先出现，参考模型先于协议发明，不偏向特定协议</li><li>TCP/IP设计之初就考虑到异构网互联问题，将IP作为重要层次</li><li>面向连接和无连接 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220517131856606.png" alt="image-20220517131856606" style="zoom:25%;" /></li></ul></li></ul></li><li><p>5层体系结构</p><ul><li><u>物理层、数据链路层、网络层、传输层、应用层</u></li><li>分别传输：比特、帧、数据报、报文段、报文</li></ul></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">层次</th><th style="text-align:center">作用</th><th style="text-align:center">典型协议</th></tr></thead><tbody><tr><td style="text-align:center">应用层</td><td style="text-align:center">支持各种网络应用</td><td style="text-align:center">FTP、SMTP、HTTP</td></tr><tr><td style="text-align:center">传输层</td><td style="text-align:center">进程-进程的数据传输</td><td style="text-align:center">TCP、UDP</td></tr><tr><td style="text-align:center">网络层</td><td style="text-align:center">源主机到目的主机的数据分组路由与转发</td><td style="text-align:center">IP、ICMP、OSPF等</td></tr><tr><td style="text-align:center">数据链路层</td><td style="text-align:center">把网络层传下来的数据报组装成帧</td><td style="text-align:center">Ethernet、PPP</td></tr></tbody></table></div><h2 id="2-物理层"><a href="#2-物理层" class="headerlink" title="2.物理层"></a>2.物理层</h2><h3 id="2-1-原理"><a href="#2-1-原理" class="headerlink" title="2.1.原理"></a>2.1.原理</h3><ul><li><p>术语</p><ul><li><p>信道：一条通信线路往往包含一条发送信道和一条接收信道</p><ul><li>按 传输信号 分为：模拟、数字</li><li>按 传输介质 分为：无线、有线</li></ul></li><li><p>通信方式：单工(单向)、半双工(可换方向，但是不能同时)、全双工(双向同时)</p></li><li><p>数据传输方式</p><ul><li>串行：8bit 一个一个发。速度慢，费用低，适合远距离</li><li>并行：8bit 通过8条信道同时发送。速度快，费用高，适合近距离</li></ul></li><li><p>实现同步的方式</p><ul><li><p>同步：以一个数据区块为单位，又称为<strong>区块传输</strong>。<strong>先送出1个或多个同步字符</strong>，再送出整批的数据</p></li><li><p>异步：将比特<strong>从低位到高位</strong>分成小组进行传送，小组可以是8位或更长。发送方可以在任何时刻发送这些比特组，而接收方不知道它们会在什么时候到达。<strong>加一个字符起始位和一个字符终止位</strong></p><blockquote><p>典型例子：键盘</p></blockquote></li></ul></li><li><p>码元：用一个<strong>固定时长</strong>的<strong>信号波形</strong>（数字脉冲），代表不同离散数值的基本波形，这个时长内的信号称为<strong>k进制码元</strong>，而该时长称为<strong>码元宽度</strong>。当码元的离散状态有M个时（M大于2），此时码元为<strong>M进制码元</strong>。</p><blockquote><p>1码元可以携带多比特的信息量。例如，在使用二进制编码时，只有两种不同的码元，一种代表0状态，另一种代表1状态。</p></blockquote></li><li><p>速率：单位时间内传输的数据量</p><ul><li><p>码元速率：单位时间信号变化次数(脉冲个数)，单位波特(Band)。码元速率与进制数无关</p><blockquote><p>如果画两段，就算电平不变，也算两个脉冲</p></blockquote></li><li><p>信息速率：单位 比特每秒(b/s)</p><blockquote><p>波特率为A，一个码元携带C个比特信息，那么信息速率就是A$\times$C(b/s)</p></blockquote></li></ul></li><li><p>带宽</p><ul><li>模拟信号中：最高最低频率差值，单位Hz</li><li>数字设备中：单位 比特每秒(bps)</li></ul></li></ul></li><li><p>公式</p><ul><li><p>影响失真程度的因素：码元传输速率、信号传输距离、噪声干扰、传输媒体质量</p></li><li><p><strong>奈奎斯特定理</strong>：理想情况下，极限速率$=2\cdot W\cdot log_2V (b/s)$</p><blockquote><p>V指码元离散电平数目。W指带宽，单位Hz</p><p>信道频带越宽，码元携带信息越多，速率越高</p><p>此公式限制码元速率，没有限制信息速率</p></blockquote></li><li><p><strong>香农定理</strong>：信道极限速率$=W\cdot log_2(1+\frac{S}{N})\ (b/s)$</p><blockquote><p>看见带宽单位是Hz，考虑两个定理</p><p>信噪比和码元信息量都给了，都算，取最小值</p></blockquote></li></ul></li></ul><h3 id="2-2-编码"><a href="#2-2-编码" class="headerlink" title="2.2.编码"></a>2.2.编码</h3><ul><li><p>基带信号 对应 数字信道。使用<strong>数字发送器</strong>编码 或 使用<strong>调制器</strong>调制</p></li><li><p>宽带信号 对应 模拟信道。使用<strong>PCM编码器</strong>编码 或 使用<strong>放大器调制器</strong>调制</p><blockquote><p>要求看见设备能推出来处理成了哪种信号</p></blockquote></li><li><p>数字 -&gt; 数字</p><ul><li><p>非归零 NRZ</p><ul><li><p>高电平1，低电平0</p><blockquote><p>没有检错、难以同步</p></blockquote></li></ul></li><li><p>归零 RZ</p><ul><li>1码元内，以前半段判断。后半段必须都是0</li></ul></li><li><p>反向不归零 NRZI</p><ul><li><p>码元开始处，电平翻转0，电平不变1</p><blockquote><p>全0数据OK，全1数据难以同步</p></blockquote></li></ul></li><li><p>曼彻斯特</p><ul><li><p>1码元内，前低后高为1，前高后低为0</p><blockquote><p>1码元内跳变2次，只传输1位。数据速率只有调制速率的$\frac{1}{2}$</p></blockquote></li></ul></li><li><p>差分曼彻斯特</p><ul><li><p>码元开始处，不变化1，变化0。码元中间跳变</p><blockquote><p>常用于局域网。抗干扰性强</p></blockquote></li></ul></li><li><p>4B/5B</p><ul><li>用5位编码4位，编码效率$80\%$。多出来的16位作为控制码(帧的开始结束、线路状态信息、保留)</li></ul></li></ul></li><li><p>数字 -&gt; 模拟</p><ul><li>调幅 2ASK<ul><li>0没有幅度，1有幅度</li></ul></li><li>调频 2FSK<ul><li>0低频，1高频</li></ul></li><li>调相 2PSK<ul><li>0正弦波，1余弦波</li></ul></li><li>调幅 + 调相 QAM<ul><li>如果有A种相位，每个相位B种振幅，那么状态有A$\times$B种，需要$log_2(A\times B)$个比特</li></ul></li></ul></li><li><p>模拟 -&gt; 数字</p><ul><li>PCM。抽样，量化，编码。$f_{采样}\ge 2f_{信号最高}$</li></ul></li></ul><h3 id="2-3-数据交换"><a href="#2-3-数据交换" class="headerlink" title="2.3.数据交换"></a>2.3.数据交换</h3><p>报文交换和分组交换都是 <strong>存储转发</strong>交换方式。分组交换又分为<strong>数据报</strong>方式和<strong>虚电路</strong>方式。</p><ul><li>电路：独占资源，适合远程批处理信息传输 或 实时性要求高的大量数据传输<ul><li>建立连接，传输数据，拆除电路</li></ul></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">优点</th><th style="text-align:center">缺点</th></tr></thead><tbody><tr><td style="text-align:center">传输时延小</td><td style="text-align:center">建立连接时间长</td></tr><tr><td style="text-align:center">数据顺序传送，无失序问题</td><td style="text-align:center">信道使用效率低</td></tr><tr><td style="text-align:center">实时性强</td><td style="text-align:center">灵活性差，不适应突发性通信</td></tr><tr><td style="text-align:center">全双工通信，没有冲突</td><td style="text-align:center">无数据存储能力，难以平滑通信量</td></tr><tr><td style="text-align:center">适用于模拟信号和数字信号</td><td style="text-align:center">不同类型、不同规格、不同速率的终端很难相互通信</td></tr><tr><td style="text-align:center">电路的交换设备及控制较简单</td><td style="text-align:center">无法发现与纠正传输差错</td></tr></tbody></table></div><ul><li>报文：其长短很不一致，长度不限且可变<ul><li>节点收下报文，暂存并检查</li><li>输出电路空闲时，找到下一个节点，传送</li><li>不需要占用端到端全部信道</li></ul></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">优点</th><th style="text-align:center">缺点</th></tr></thead><tbody><tr><td style="text-align:center">无建立连接时延</td><td style="text-align:center">实时性差，转发时延</td></tr><tr><td style="text-align:center">平滑通信量</td><td style="text-align:center">只适用于数字信号</td></tr><tr><td style="text-align:center">提高线路可靠性、提高线路利用率、提供多目标服务、便于类型规格和速度不同的计算机之间通信</td><td style="text-align:center">要求每个结点有较大的缓冲区。有时要把报文存在磁盘上进一步增加了传送时延</td></tr></tbody></table></div><ul><li><p>分组：限制所传输的数据单位的长度，一般选128B</p><ul><li><p>数据报方式：为网络层提供<strong>无连接服务</strong></p><blockquote><p>无连接分组不是指不需要建立连接，指的是分组独立确定路径，不同分组路径可能不同</p></blockquote><ul><li>每个分组都要携带源地址、目的地址、分组号</li><li>交换结点可根据情况丢弃部分分组</li><li>具有冗余路径，对故障的适应能力强，适用于突发性通信</li></ul></li><li><p>虚电路方式：路径上所有节点都维持一张虚电路表，每一项是一个打开的虚电路的信息</p><ul><li>分组携带虚电路号</li><li>节点只做差错控制，无需路由选择</li><li>两个端系统之间可以有多条虚电路为不同进程提供服务</li><li>某个节点或链路彻底失效时，所有经过的虚电路都被破坏</li></ul></li></ul></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">优点</th><th style="text-align:center">缺点</th></tr></thead><tbody><tr><td style="text-align:center">无建立连接时延</td><td style="text-align:center">仍然有转发时延、对交换机要求更强处理能力</td></tr><tr><td style="text-align:center">线路利用率高</td><td style="text-align:center">大量控制信息降低通信效率</td></tr><tr><td style="text-align:center">简化了存储管理、减少等待发送时间、减少出错几率和重发数据量</td><td style="text-align:center">数据报服务：排序工作增加了麻烦</td></tr><tr><td style="text-align:center">分组短小，适用于计算机之间突发式数据通信</td><td style="text-align:center">虚电路服务：需要三个过程，增加时延</td></tr></tbody></table></div><ul><li>对他们的取舍：<ul><li>电路：传送<strong>数据量大</strong>，且传送时间远大于呼叫。传输时延最小</li><li>分组：端到端的通路有<strong>很多段</strong>的链路组成</li><li>分组：报文交换和分组交换<strong>信道利用率优</strong>于电路交换，其中分组交换比报文交换的<strong>时延小</strong>，适合<strong>突发式</strong>数据通信</li></ul></li></ul><h3 id="2-4-传输"><a href="#2-4-传输" class="headerlink" title="2.4.传输"></a>2.4.传输</h3><ul><li>介质<ul><li>导向<ul><li>双绞线：便宜。长距离需要放大器/中继器</li><li>同轴电缆：抗干扰性比双绞线好，传输距离更远，价格更贵<ul><li>基带同轴电缆(局域网)、宽带同轴电缆(有线电视)</li></ul></li><li>光纤：带宽非常大，超远距离<ul><li>高折射率纤芯在里面</li><li>单模、多模</li><li>损耗小、抗雷抗磁、不易窃听、小、轻</li></ul></li></ul></li><li>非导向<ul><li>无线电波：所有方向，穿透力强</li><li>微波：固定方向，频段范围宽<ul><li>地面微波接力通信</li><li>卫星通信<ul><li>优点：通信容量大、距离远、覆盖广、广播通信和多址通信</li><li>缺点：时延长(250-270ms)、受气候影响、误码率高、成本高</li></ul></li></ul></li><li>红外线/可见光：固定方向、需要把信号转成各自的格式</li></ul></li></ul></li><li>设备<ul><li>中继器：<strong>再生数字信号</strong> 和 <strong>还原</strong><ul><li>543规则：最多5个网段(电线)，最多4个中继器，其中最多3个挂载有终端(电脑)</li></ul></li><li>集线器：<strong>再生放大转发</strong><ul><li>一个大冲突域，不能分割冲突域——平分带宽</li></ul></li></ul></li></ul><h2 id="3-数据链路层"><a href="#3-数据链路层" class="headerlink" title="3.数据链路层"></a>3.数据链路层</h2><p>链路是物理通道，数据链路是逻辑通道。数据链路层主要作用是<strong>加强物理层传输原始比特流的功能</strong>，将物理层提供的可能出错的物理连接改造成为<strong>逻辑上无差错的数据链路</strong>。数据链路层功能：</p><ul><li><p>为网络层提供服务。<u>无确认无连接、有确认无连接、有确认面向连接</u></p><blockquote><p>有连接一定有确认！有线链路用第一种，差错控制交给上层；无线链路用另两种</p></blockquote></li><li><p>连接的建立、维持、释放（用于面向连接的服务）</p></li></ul><h3 id="3-1-封装成帧"><a href="#3-1-封装成帧" class="headerlink" title="3.1.封装成帧"></a>3.1.封装成帧</h3><p>首尾加1字节的<strong>帧定界符</strong>。帧同步：<strong>接收方</strong>区分出起始和终止。最大传送单元 MTU：数据部分的最大长度</p><ul><li><p><del>字符计数：帧首用<strong>1字节</strong>标明帧内字符数</del></p></li><li><p><del>字符填充：SOH(Start Of Header)、EOT(End Of Transmission)</del></p><ul><li>填充转义字节 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220517212437171.png" alt="image-20220517212437171" style="zoom:40%;" /></li></ul></li><li><p>零比特填充：帧首尾都是01111110，数据中有连续11111就填0 <strong>“5110”</strong></p></li><li><p>违规编码法：用不存在的电平标识开始和终止</p><blockquote><p>曼彻斯特编码中电平一定跳变，不存在高高或低低</p></blockquote></li></ul><h3 id="3-2-差错控制"><a href="#3-2-差错控制" class="headerlink" title="3.2.差错控制"></a>3.2.差错控制</h3><blockquote><p>物理层的编码是对一个bit进行的，把数字变为信号；数据链路层的编码针对一组bit，通过冗余实现差错控制。</p></blockquote><ul><li><p>循环冗余校验 CRC</p><ul><li>生成多项式r+1位 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220517220321336.png" alt="image-20220517220321336" style="zoom:50%;" /></li><li>模二除法，也就是异或，同0异1</li></ul></li><li><p>纠错编码：海明码</p><ul><li>数据m位，冗余r位，<strong>$2^r\ge m+r+1$</strong></li><li>校验码填在$2^n$的位置，其他位置依次放数据。先算序号大的校验码 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220517222731180.png" alt="image-20220517222731180" style="zoom:50%;" /></li><li>默认偶校验</li><li>校验结果从高往低写，对应二进制数就是错误的地方</li></ul></li></ul><h3 id="3-3-流量控制"><a href="#3-3-流量控制" class="headerlink" title="3.3.流量控制"></a>3.3.流量控制</h3><blockquote><p>链路层流量控制是点到点(两个相邻节点)，收不下就不回复</p><p>传输层流量控制是端到端(两个主机之间)，给发送方规定一个缓冲区</p></blockquote><ul><li><p>停等协议：发送窗口1，接收窗口1</p><ul><li>数据帧和ACK都需要编号</li><li>信道利用率 $u=\frac{t_d}{t_d+RTT+t_a}。\ t_d$：发送到链路上需要的时间</li><li>信道吞吐率 = 信道利用率 * 发送方发送速率</li></ul></li><li><p>后退N帧 GBN：发送窗口&gt;1，接收窗口1</p><ul><li><p>上层调用时会检查发送窗口是否已满。实际实现中发送方可以缓存这些数据，窗口不满时再发送</p></li><li><p>累积确认，ACK n 表明接收方已经收到<strong>n号帧和它之前的全部帧</strong></p></li><li><p>超时后从最小号未被确认的帧开始<strong>连续发送</strong> <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220518090406586.png" alt="image-20220518090406586" style="zoom:50%;" /></p></li><li><p>若采用n个比特对帧编号，那么发送窗口的尺寸 <strong>$W_T\le 2^n-1$</strong>，防止套圈</p><blockquote><p>最坏情况：ACK全部丢失。假设3位编码，此时发送方重复发送0-6，接收方重复回复ACK6，直到发送方收到ACK为止</p></blockquote></li><li><p>由于全双工通信，有时把确认帧放在发送的数据里一起发送(<strong>顺风车</strong>)</p><blockquote><p>例：RTT 100ms，发送带宽100Mb/s，发送窗口1000，每个帧1000B，忽略确认帧发送时长。求最高发送速率</p><p>每100.08ms发送一整个窗口，$\frac{1000\times1000\times8}{100+\frac{1000\times8}{100\times10^6}+0}\approx80Mb/s$</p></blockquote></li></ul></li><li><p>选择重传 SR：发送窗口&gt;1，接收窗口&gt;1</p><ul><li><p>窗口每次向前移动到最小序号的未确认帧处</p></li><li><p>如果收到前一个窗口的帧，说明上次ACK丢失，重新返回ACK</p></li><li><p>发送窗口最好等于接收窗口（大了会溢出，小了没意义）<strong>$W_{T_{Max}}=W_{R_{Max}}=2^{n-1}$</strong></p><blockquote><p>与GBN区别在于发送了最小编号ACK后接收窗口随即滑动。</p><p>最坏情况：ACK全部丢失。假设3位编码，此时发送方重复发送0-3，接收窗口在4-7，接收窗口不会再滑动，直到发送方收到ACK0为止</p></blockquote></li></ul></li></ul><h3 id="3-4-介质访问控制"><a href="#3-4-介质访问控制" class="headerlink" title="3.4.介质访问控制"></a>3.4.介质访问控制</h3><blockquote><p>点对点(广域网)</p><p>广播(局域网)：<strong>典型拓扑结构</strong>：总线型、星型(逻辑总线型)。需要介质访问控制来避免互相干扰</p></blockquote><ul><li><p>静态划分信道</p><ul><li>频分多路复用 FDM <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220518122107766.png" alt="image-20220518122107766" style="zoom:30%;" /></li><li>时分多路复用 TDM <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220518122312244.png" alt="image-20220518122312244" style="zoom:30%;" /><ul><li>统计时分复用 STDM：按顺序放入缓存，一个STDM帧满了就发出</li></ul></li><li>波分多路复用 WDM：利用光波的不同频率</li><li>码分多路复用 CDM<ul><li>码分多址 CDMA：要求各个站点<strong>芯片序列正交</strong>；线性相加后发送；分别与源站内积来分离数据</li></ul></li></ul></li><li><p>动态划分信道</p><ul><li><p>随机访问</p><ul><li><p>ALOHA：想发就发，如果冲突会导致差错，接收方不会确认。超时即可判定发生了冲突，等待随机时长重传</p><ul><li>时隙ALOHA：把时间分为时间片(时间槽)，一旦冲突，等到下一个时间片<strong>开始</strong>才能重传。<strong>吞吐量有提高</strong></li></ul></li><li><p>CSMA：先监听，信道空闲就发送完整帧；信道忙就推迟发送。<strong>总线型网络</strong></p><blockquote><p>没有冲突检测，发生冲突还是要把数据帧发送完。浪费</p></blockquote><ul><li>1-坚持CSMA：一直监听，空闲马上传输。冲突后等待随机时长</li><li>非坚持CSMA：信道忙则等待随机时长后再监听，空闲马上传输</li><li>p-坚持CSMA：一直监听，直到空闲。一旦空闲，以p概率发送数据，1-p的概率等到下一个时槽再发送。如果冲突，下一个时槽开始再重复上述过程</li></ul></li><li><p>CSMA/CD：边发边检测，一旦冲突马上停止。常用于<strong>半双工网络</strong>、总线型局域网</p><blockquote><p>最迟一个RTT知道发生了碰撞。最差情况：A的数据刚刚到达B，B恰好刚刚开始发送，A在一个RTT(<strong>基本退避时间</strong>)后才能收到B的信号。</p></blockquote><ul><li><strong>截断二进制指数规避</strong>：k为重传次数，但到10后不再增大。从$[0,1,…,2^k-1]$随机取一个数r，避退时间就是 r倍 单程传播时延(又名 争用期)。16次失败后报告错误</li><li><strong>最小帧长</strong>：传输速率 * RTT。以太网规定最短帧长为64B，&lt;它的都要填充。收到&lt;64B的都是无效的</li></ul></li><li><p>CSMA/CA</p><ul><li>空闲则发出RTS（request to send），包括源地址、目的地址、下一份数据将持续发送的时间等</li><li>接收端收到RTS后，将响应CTS（clear to send）</li><li>收到数据，CRC检验，正确则响应ACK</li><li><p>发送方没收到ACK就重传，二进制指数退避，有重传上限</p><blockquote><p>CD用于以太网，使用电压检测冲突，协议检测冲突</p><p>CA用于无线网，多种手段检测冲突，协议避免冲突</p></blockquote></li></ul></li></ul></li><li><p>轮询访问</p><ul><li>轮询协议：老大挨个问手下要不要发送数据</li><li>令牌传递协议<ul><li>令牌：一个特殊格式的MAC控制帧，不含任何信息。有最大持有时间</li><li>要发送数据，修改令牌的标识位，把数据加在后面，传递。目的主机把帧复制下来。转一圈又传回来之后删除数据部分，把标识位改回去，传递</li><li>物理 星型拓扑；逻辑 环形拓扑</li><li>常用于<strong>负载较重、通信量较大</strong>的网络中</li></ul></li></ul></li></ul></li></ul><h3 id="3-5-几种网络"><a href="#3-5-几种网络" class="headerlink" title="3.5.几种网络"></a>3.5.几种网络</h3><h4 id="3-5-1-以太网"><a href="#3-5-1-以太网" class="headerlink" title="3.5.1.以太网"></a>3.5.1.以太网</h4><blockquote><p>802.3：以太网；802.5：令牌环网；802.8：光纤(FDDI)；802.11：无线局域网</p></blockquote><ul><li>使用CSMA/CD协议的网络就是以太网</li><li><strong>无连接</strong>：无握手过程；<strong>不可靠</strong>：发送帧无编号、接收方不确认、差错控制交给上层</li><li>帧格式 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220520172335085.png" alt="image-20220520172335085" style="zoom:60%;" /><ul><li>不需要帧结束标识：采用曼码传输，电压不再变了说明传完了</li><li>802.3： <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220520172817998.png" alt="image-20220520172817998" style="zoom:50%;" /></li></ul></li><li>10BASE-T：传送<strong>基带信号</strong>，使用<strong>无屏蔽双绞线</strong>，速率<strong>10Mb/s</strong><ul><li>特点 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220520171701569.png" alt="image-20220520171701569" style="zoom:50%;" /></li></ul></li><li>100BASE-T：支持 全双工 和 半双工，可全双工不冲突</li><li>吉比特：在<strong>光纤或双绞线</strong>上传送<strong>1Gb/s</strong>信号，支持 全双工 和 半双工，可全双工不冲突</li><li>10吉比特：在<strong>光纤</strong>上传送<strong>10Gb/s</strong>信号，只支持全双工</li></ul><h4 id="3-5-2-无线局域网"><a href="#3-5-2-无线局域网" class="headerlink" title="3.5.2.无线局域网"></a>3.5.2.无线局域网</h4><ul><li>帧头格式 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220520173535165.png" alt="image-20220520173535165" style="zoom:50%;" /> </li><li>其他类型<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220520194030997.png" alt="image-20220520194030997" style="zoom:50%;" /></li></ul><h4 id="3-5-3-广域网"><a href="#3-5-3-广域网" class="headerlink" title="3.5.3.广域网"></a>3.5.3.广域网</h4><ul><li>广域网延迟大，带宽大，强调资源共享而不是数据传输</li><li>PPP协议：只支持全双工<ul><li>帧格式 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220520200355116.png" alt="image-20220520200355116" style="zoom:50%;" /></li><li>状态图 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220520200036219.png" alt="image-20220520200036219" style="zoom:50%;" /></li><li>特点<ul><li>简单：对于链路层的帧，无需纠错，无需序号，无需流量控制</li><li>封装成帧：帧定界符</li><li>透明传输：异步线路用字节填充，同步线路用比特填充</li><li>多种网络层协议</li><li>多种类型链路：串行/并行，同步/异步，电/光</li><li>差错检测：错就丢弃</li><li>检测连接状态</li><li>最大传送单元MTU</li><li>网络层地址协商：知道通信双方的网络层地址</li><li>数据压缩协商</li></ul></li><li>三个组成部分<ul><li>一个将IP数据报封装到串行链路（同步串行/异步串行）的方法</li><li>链路控制协议LCP：建立并维护数据链路连接。<strong>身份验证</strong></li><li>网络控制协议NCP：支持多种网络层协议，每个不同的网络层协议都要一个相应的NCP来配置，为网络层协议建立和配置逻辑连接</li></ul></li></ul></li><li><p>HDLC协议：不是TCP/IP协议族的，<strong>由ISO制定</strong>，面向比特。全双工</p><ul><li>帧格式 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220520201427752.png" alt="image-20220520201427752" style="zoom:50%;" /></li><li><strong>可靠性高</strong>：CRC检验，帧编号</li><li><p>三种站</p><ul><li>主站：起控制作用</li><li>从站：被控制，配合主站参与差错恢复等链路控制</li><li>复合站：两种都行</li></ul></li><li><p>三种数据操作方式</p><ul><li>正常响应：从站发送消息要经过主站同意</li><li>异步平衡：每一个复合站都可以对别的站传输数据</li><li>异步响应：从站不需要经过主站同意</li></ul></li></ul></li></ul><h3 id="3-6-链路层设备"><a href="#3-6-链路层设备" class="headerlink" title="3.6.链路层设备"></a>3.6.链路层设备</h3><ul><li><p>网桥：根据<strong>目的MAC</strong>对帧进行<strong>转发和过滤</strong></p><ul><li>网段：被网桥隔开的空间，使用同一物理层设备，能够直接通讯</li><li><p>优点：</p><ul><li>过滤通信量，增大吞吐量</li><li>扩大了物理范围</li><li>提高了可靠性</li><li>可互连不同物理层、不同MAC子层和不同速率的以太网</li></ul></li><li><p>分类</p><ul><li><p>透明网桥：站点不知道帧将经过哪几个网桥，是一种即插即用设备</p><ul><li>自学习：发送帧经过网桥，网桥会把它的地址和接口存到转发表里</li></ul></li><li><p>源路由网桥：把详细的最佳路由信息（路由最少/时间最短）放在帧首部中</p><ul><li>源站向目的站<strong>广播</strong>发送一个<strong>发现帧</strong></li></ul></li></ul></li></ul></li><li><p>交换机：多口网桥。每一个端口都是一个冲突域</p><ul><li><p>直通式：查完目的地址（6B），立刻转发</p><ul><li>延迟小</li><li>可靠性低，不支持不同速率的端口</li></ul></li><li><p>存储转发式：将帧放入高速缓存，并检查否正确，正确则转发，错误则丢弃</p></li><li><p>冲突域：每一个节点都能收到所有帧，同一时间只能有1台设备发送信息</p></li><li><p>广播域：能接收一个广播信号的范围</p><blockquote><p>设备对比 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220520204333964.png" alt="image-20220520204333964" style="zoom: 45%;" /></p></blockquote></li></ul></li></ul><h2 id="4-网络层"><a href="#4-网络层" class="headerlink" title="4.网络层"></a>4.网络层</h2><ul><li>路由选择与分组转发</li><li>异构网络互联</li><li>拥塞控制：开环控制(静态)、闭环控制(动态)</li></ul><h3 id="4-1-转发"><a href="#4-1-转发" class="headerlink" title="4.1.转发"></a>4.1.转发</h3><h4 id="4-1-1-协议"><a href="#4-1-1-协议" class="headerlink" title="4.1.1.协议"></a>4.1.1.协议</h4><ul><li>路由表：目的网络地址、目的网络子网掩码、下一跳地址</li><li>协议<ul><li>IP协议<ul><li>首部格式 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220520211750372.png" alt="image-20220520211750372" style="zoom:50%;" /></li><li><strong>首部长度$\times$4Byte</strong>。一般20B</li><li>总长度 = 首部 + 数据，单位是字节</li><li>协议字段 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220520212350605.png" alt="image-20220520212350605" style="zoom:50%;" /></li><li>首部检验和：只检验首部</li><li>同一数据报的分片使用同一标识。高位保留；中间位DF 1禁止分片，0允许分片；低位MF 1后面还有，0最后一片/没分片</li><li>片偏移：分片后此便在原分组中相对位置，<strong>单位8B</strong></li></ul></li><li>ARP<ul><li>局域网查询 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220521093432058.png" alt="image-20220521093432058" style="zoom:50%;" /></li><li>不在一个局域网，就先查网关的MAC地址，再发送</li></ul></li><li>DHCP<ul><li><strong>应用层</strong>协议，客户机和服务端通过<strong>广播</strong>交互，基于<strong>UDP</strong></li><li>主机 广播 DHCP发现报文</li><li>DHCP服务器 广播 DHCP提供报文</li><li>主机 广播 DHCP请求报文</li><li>DHCP服务器 广播 DHCP确认报文</li></ul></li><li>ICMP<ul><li>格式 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220521100022407.png" alt="image-20220521100022407" style="zoom:40%;" /> 报文封装在IP的数据部分</li><li><strong>差错报文</strong><ul><li>不可达</li><li><del>网络拥塞</del></li><li>TTL=0</li><li>首部字段有问题</li><li>重定向</li></ul></li><li>不应发送差错报告报文<ul><li>不套娃</li><li>只报告第一个分片</li><li>对具有组播地址的数据报都不发送ICMP差错报告报文</li></ul></li><li><strong>询问报文</strong><ul><li>回送请求和回答报文：ping</li><li>时间戳请求和回答报文：时间同步</li><li><del>掩码地址请求和回答报文、路由器询问和通告报文</del></li></ul></li></ul></li></ul></li></ul><h4 id="4-1-2-IP地址"><a href="#4-1-2-IP地址" class="headerlink" title="4.1.2.IP地址"></a>4.1.2.IP地址</h4><ul><li>IPv4<ul><li>基本形式<ul><li>分类 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220521064954224.png" alt="image-20220521064954224" style="zoom: 50%;" /></li><li>可用数 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220521071941733.png" alt="image-20220521071941733" style="zoom:50%;" /></li><li>特殊IP地址 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220521065922505.png" alt="image-20220521065922505" style="zoom:50%;" /></li><li>私有IP地址 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220521070800509.png" alt="image-20220521070800509" style="zoom:50%;" /> 路由器不转发</li></ul></li><li>子网划分：把主机号拆分为 子网号 和 主机号<ul><li>子网掩码：1对应 网络号+子网号 的位数，0对应主机号的位数</li></ul></li><li>无分类编址 CIDR<ul><li>消除传统的ABC类地址以及划分子网的概念</li><li>融合子网地址与子网掩码，方便子网划分</li><li>把网络前缀都相同的连续的IP地址组成一个“CIDR地址块”<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220521090855299.png" alt="image-20220521090855299" style="zoom: 50%;" /></li><li><strong>路由聚合</strong>：前缀缩短，也就是网络地址取交集</li><li><strong>最长前缀匹配</strong>：路由表中可能有几个匹配结果，选择网络前缀最长的</li></ul></li></ul></li><li>IPv6<ul><li>格式 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220521102512801.png" alt="image-20220521102512801" style="zoom:33%;" /></li><li>特点：地址空间更大、移除了校验和、路由器不检查扩展首部、支持即插即用</li><li>与v4的区别<ul><li>v6首部长度必须是8B整数倍，v4首部长度必须是4B整数倍</li><li>地址空间从32位扩展到<strong>128位</strong></li><li>只能在主机处分片，<strong>路由器不能分片</strong></li><li>ICMPv6 添加报文类型「分组过大」</li><li>取消了 协议、服务类型、总长度，将扩展字段移出首部变为<strong>扩展首部</strong></li><li><strong>即插即用</strong>(自动配置)</li></ul></li><li>压缩形式 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220522085616542.png" alt="image-20220522085616542" style="zoom:50%;" /><ul><li>0000 换为 0</li><li>0XXX 换为 XXX</li><li>000X 换为 X</li><li>一连串连续的0可以被一对冒号取代(只出现一次)</li></ul></li><li>任意播：一对多通信，可作目的地址，一般选最近的</li><li>过渡策略：<ul><li>双栈协议：在一台设备上<strong>同时启用IPv4和IPv6</strong></li><li>隧道协议：<strong>重新封装</strong></li></ul></li></ul></li></ul><h4 id="4-1-3-IP应用"><a href="#4-1-3-IP应用" class="headerlink" title="4.1.3.IP应用"></a>4.1.3.IP应用</h4><ul><li><p>IP组播</p><ul><li><p>224.0.0.0～239.255.255.255。D类地址，不是都能用</p></li><li><p>MAC地址 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220522103338977.png" alt="image-20220522103338977" style="zoom:50%;" /></p></li><li><p>IGMP：让路由器知道是不是某个组播组还存在</p><ul><li><p>要加入组播组时向组播组发送IGMP，声明要加入；本地组播路由器把成员关系发给其他组播路由器</p></li><li><p>本地组播路由器周期性探寻局域网上主机，只要有一个回应就可以</p></li></ul></li><li><p>组播路由选择协议</p><ul><li><p>链路状态</p></li><li><p>距离向量</p></li><li><p>协议无关：稀疏、密集</p></li></ul></li></ul></li><li><p>移动IP：设备移动，IP不动 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220522105604633.png" alt="image-20220522105604633" style="zoom:50%;" /></p><ul><li>移动过程 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220522153400356.png" alt="image-20220522153400356" style="zoom:50%;" /></li></ul></li></ul><h3 id="4-2-路由选择"><a href="#4-2-路由选择" class="headerlink" title="4.2.路由选择"></a>4.2.路由选择</h3><h4 id="4-2-1-路由选择算法"><a href="#4-2-1-路由选择算法" class="headerlink" title="4.2.1.路由选择算法"></a>4.2.1.路由选择算法</h4><ul><li><p>静态路由</p><ul><li>简单可靠，拓扑变化不大的网络中效果好，用于军事或小型商业</li><li>路由更新慢，不适用于大型网络</li></ul></li><li><p>动态路由</p><ul><li>距离向量算法 RIP：全局性</li><li>链路状态算法 OSPF：分散性</li></ul></li></ul><h4 id="4-2-2-路由选择协议"><a href="#4-2-2-路由选择协议" class="headerlink" title="4.2.2.路由选择协议"></a>4.2.2.路由选择协议</h4><ul><li>自制系统内 IGP<ul><li>RIP：每一个路由器都维护<u>从它自己到其他每一个目的网络的唯一最佳<strong>跳数</strong>记录</u><ul><li>一条路由最多包含15个路由器，<strong>16跳标记为不可达</strong></li><li>只和<strong>相邻路由器</strong>每<strong>30秒</strong>交换<strong>自己的路由表</strong>，超过<strong>180秒</strong>邻居没通告，则判定邻居没了</li><li><strong>应用层</strong>协议，使用<strong>UDP</strong>传送，一次最多传送25条信息</li><li>好消息传得快，坏消息传得慢</li></ul></li><li>OSPF<ul><li>洪泛法向所有路由器发送信息，<strong>广播</strong></li><li>发送本路由器以及邻居的链路状态：费用、距离、时延、带宽</li><li>只有<strong>链路状态变化</strong>时才发送信息</li><li>算法：<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220522100216093.png" alt="image-20220522100216093" style="zoom:50%;" /></li><li><strong>网络层</strong>协议，使用<strong>IP</strong>传送</li><li><strong>30min</strong>刷新一次；网络大时比RIP好很多；<strong>收敛很快</strong></li></ul></li></ul></li><li>自制系统间 EGP<ul><li>BGP：边界路由器，交换网络可达性信息；发生变化时才更新</li><li><strong>应用层</strong>协议，使用<strong>TCP</strong>传送</li><li>支持CIDR</li><li>刚运行时交换整个BGP路由表。但以后只交换更新部分</li></ul></li></ul><h3 id="4-3-路由器"><a href="#4-3-路由器" class="headerlink" title="4.3.路由器"></a>4.3.路由器</h3><p>集线器不能互联物理层不同的网段。<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220522154749857.png" alt="image-20220522154749857" style="zoom:50%;" /></p><p>默认路由全0，路由表没有匹配就从默认路由走。</p><h2 id="5-传输层"><a href="#5-传输层" class="headerlink" title="5.传输层"></a>5.传输层</h2><h3 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1.概述"></a>5.1.概述</h3><ul><li>主机才有的层次</li><li>传输层提供<strong>进程和进程</strong>之间的逻辑通信，网络层提供主机与主机</li><li>端口号<ul><li>服务端：熟知端口号0-1023；登记端口号1024-49151</li><li>常用端口号<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220522165616523.png" alt="image-20220522165616523"></li><li>客户端：49152-65535</li><li>套接字：(IP,端口)，唯一标识一个主机和它上面的进程</li></ul></li></ul><h3 id="5-2-UDP"><a href="#5-2-UDP" class="headerlink" title="5.2.UDP"></a>5.2.UDP</h3><ul><li>特点<ul><li>面向报文，适合一次性传输少量数据的网络应用</li><li>无拥塞控制，适合实时应用</li></ul></li><li>首部格式 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220522171145693.png" alt="image-20220522171145693" style="zoom:50%;" /></li><li>UDP校验 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220522173741962.png" alt="image-20220522173741962" style="zoom:50%;" /></li></ul><h3 id="5-3-TCP"><a href="#5-3-TCP" class="headerlink" title="5.3.TCP"></a>5.3.TCP</h3><ul><li><p>首部格式 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220522203105060.png" alt="image-20220522203105060" style="zoom:60%;" /></p><ul><li>确认号：期望下一次收到的，代表N-1都已经成功</li><li>偏移：首部长度，<strong>单位4B</strong></li><li>控制位：<ul><li>URG 紧急：不缓冲</li><li>ACK 确认：为1时确认号才有效</li><li><del>PSH 推送：尽快接收，不等缓存填满</del></li><li><del>RST 复位：连接有差错，尽快释放连接，重新传输</del></li><li>SYN 同步：为1时，连接请求/接受报文</li><li>FIN 终止：数据发完，释放连接</li></ul></li><li>窗口：<strong>接收窗口</strong>，允许对方发送的数据量</li><li>紧急指针：URG=1时才有用，直接指出紧急数据的位置</li></ul></li><li><p>连接管理</p><ul><li>三次握手 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220522205049445.png" alt="image-20220522205049445" style="zoom:67%;" /></li><li>四次挥手 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220522211814512.png" alt="image-20220522211814512" style="zoom:67%;" /><ul><li>A发完最后一个ACK还要再等两个最长报文段寿命，防止它刚刚发送的ACK没有送到</li></ul></li></ul></li><li><p>可靠传输</p><ul><li>校验：和UDP一样加上伪首部计算校验码</li><li>序号、确认、重传：规定时间内没收到确认就要重传已发送的报文段<ul><li>比期望序号大的失序报文段到达时，发送一个冗余ACK，指明下一个期待字节的序号。收到3个冗余立即重传</li></ul></li></ul></li><li><p>流量控制</p><ul><li>一个例子 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220522214047212.png" alt="image-20220522214047212" style="zoom: 50%;" /><ul><li>A收到0窗口通知会启动计时器，到时间了会发一个0窗口的探测报文段</li></ul></li></ul></li><li><p>拥塞控制</p><blockquote><p>拥塞控制：发送站过多，数据迟迟到不了接收方</p><p>流量控制：发送过快，接收方缓存不够</p><p><u>讨论前提假设</u>：不使用捎带确认，接收方窗口足够大。拥塞窗口是发送方算出来的，反映当前网络容量</p></blockquote><ul><li>慢开始、拥塞避免：<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220523080908760.png" alt="image-20220523080908760" style="zoom:50%;" /><ul><li>从1开始，每次乘2</li><li>到门限值开始线性增大</li><li>开始拥塞了，窗口改1，门限改为拥塞值的一半</li></ul></li><li>快重传、快恢复：<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220523081710488.png" alt="image-20220523081710488" style="zoom:50%;" /><ul><li>收到3个重复确认，立即重传，窗口改为一半</li></ul></li></ul></li></ul><h2 id="6-应用层"><a href="#6-应用层" class="headerlink" title="6.应用层"></a>6.应用层</h2><ul><li><p>DNS</p><ul><li><p>域名 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220523085249107.png" alt="image-20220523085249107" style="zoom:60%;" /></p></li><li><p>递归查询：帮人帮到底</p></li><li><p>迭代查询：踢皮球</p></li></ul></li><li><p>FTP</p><ul><li>使用TCP实现可靠传输</li><li>控制连接<strong>端口21</strong>，数据传送<strong>端口20</strong>(主动模式用20，被动模式自行协商&gt;1024)</li><li>传输模式：文本(ASCII)、二进制</li></ul></li><li><p>电子邮件 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220523094709705.png" alt="image-20220523094709705" style="zoom: 50%;" /></p><ul><li><p>SMTP：14条命令（几个字母）和21种应答信息（三位数字代码+简单文字说明）</p><blockquote><p>C/S方式，端口号25，TCP </p><p>不能传送二进制对象，只能传送7位ASCII码(不能传送其他国家文字)，服务器会拒绝过长的邮件</p><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220523095529066.png" alt="image-20220523095529066" style="zoom:50%;" /></p></blockquote></li><li><p>MIME：将非ASCII转为ASCII，再使用STMP传送</p></li><li><p>POP3：端口号110，TCP，C/S</p></li><li><p>IMAP：用户先看到邮件首部，打开邮件时才下载内容</p></li></ul></li><li><p>HTTP</p><ul><li>无状态(没有记忆)，面向文本，使用Cookie保存访问记录</li><li>采用TCP，但是http本身无连接</li><li>连接方式<ul><li>非持久连接 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220523101622598.png" alt="image-20220523101622598" style="zoom: 50%;" /><ul><li>耗时2 * RTT + 传送时间</li></ul></li><li>持久连接：非流水线式(等到确认再传送下一个文件)、流水线式</li></ul></li><li>报文结构 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220523102045887.png" alt="image-20220523102045887" style="zoom:50%;" /><ul><li>例子：<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220523102235893.png" alt="image-20220523102235893" style="zoom:50%;" /></li><li>状态码：<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220523102359699.png" alt="image-20220523102359699" style="zoom:67%;" /></li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>考研</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>408-数据结构-基础笔记</title>
    <link href="/blog/fa449c459c56/"/>
    <url>/blog/fa449c459c56/</url>
    
    <content type="html"><![CDATA[<h1 align="center">408-数据结构-基础笔记</h1><p><br></p><h2 id="1-顺序表"><a href="#1-顺序表" class="headerlink" title="1.顺序表"></a>1.顺序表</h2><ul><li>单链表某节点前插入数据时，可以后插然后交换数据位置，实现O(1)。删除同理</li></ul><h2 id="2-栈和队列"><a href="#2-栈和队列" class="headerlink" title="2.栈和队列"></a>2.栈和队列</h2><h3 id="2-1-基础知识"><a href="#2-1-基础知识" class="headerlink" title="2.1.基础知识"></a>2.1.基础知识</h3><ul><li><p><strong>判断合法出栈顺序</strong>：如果入栈为1234…，那么出栈时对于任意数字，排在它后面比它小的必然是倒序。</p><ul><li>如果入栈不是按大小排列，那么用序号判断。一回事。</li><li>所有合法总数为卡塔兰数：$\frac{1}{n+1}C_{2n}^n$</li></ul></li><li>链栈的物理实现：头插头删的单链表</li><li>循环队列不能填满，需要空一个位置来判满（与指针重合时的队空区别开）<ul><li>如果不允许浪费，那么元数据添加一个size表示目前数据元素个数；或者一个tag表示最近操作是插入还是删除</li></ul></li><li><p>双端队列：两边可输入输出。还分为输入受限和输出受限</p><ul><li>合法顺序：在栈中不合法的组合中挑一些变为合法<ul><li>输入受限：先把第一个数前面的数全画好再判断</li><li>输出受限：先分析第一个数前面的数应该如何输入</li></ul></li></ul></li></ul><h3 id="2-2-括号匹配问题"><a href="#2-2-括号匹配问题" class="headerlink" title="2.2.括号匹配问题"></a>2.2.括号匹配问题</h3><ul><li>遍历所有字符，左括号入栈，右括号弹栈匹配</li><li>左括号单身：全走完了栈不空</li><li>右括号单身：匹配时栈空</li><li>左右不匹配</li><li><p>表达式求值 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:16-11:15:56-image-20220430095042760.png" alt="image-20220430095042760" style="zoom:25%;" /></p><ul><li>后缀<ul><li>中缀转后缀<ul><li>后缀表达式中运算符顺序就是计算生效顺序</li><li><strong>机算结果左优先</strong>：只要有更靠近左边的运算符可以计算，那么就算左边的</li><li><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:16-11:15:56-image-20220430101433521.png" alt="image-20220430101433521" style="zoom:30%;" /></li></ul></li><li>后缀求值：从左往右扫描，有运算符就让它前面两个操作数运算</li></ul></li><li>前缀<ul><li>中缀转前缀<ul><li><strong>右优先</strong>，排列顺序就是计算顺序</li></ul></li><li>前缀求值：从右往左入栈</li></ul></li></ul></li></ul><h3 id="2-3-特殊矩阵压缩存储"><a href="#2-3-特殊矩阵压缩存储" class="headerlink" title="2.3.特殊矩阵压缩存储"></a>2.3.特殊矩阵压缩存储</h3><ul><li>通常行列号下标从1开始，要注意</li><li><p>对称阵：储存对角线和下三角部分，共$1+2+…+n=\frac{n\cdot(n+1)}{2}$个元素，如果按行优先存储的话：</p><ul><li>在最后元素数组下标为$\frac{n\cdot(n+1)}{2}-1$</li><li>下标映射公式为$k=\frac{i\cdot(i-1)}{2}+j-1，(i\ge j)；a_{ij}=a_{ji}，(i&lt;j)$</li></ul></li><li><p>上三角：前面有1～n-1行，元素下标为$[n+(n-1)+…+(n-i+2)]+(j-i)$ </p></li><li>三对角 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:16-11:15:56-image-20220509075336995.png" alt="image-20220509075336995" style="zoom:30%;" /></li><li>稀疏矩阵 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:16-11:15:56-image-20220509081235822.png" alt="image-20220509081235822" style="zoom:30%;" /></li></ul><h2 id="3-串"><a href="#3-串" class="headerlink" title="3.串"></a>3.串</h2><ul><li><p>描述位置一般从1开始</p></li><li><p>子串：串中任意个连续字符</p></li><li><p>朴素模式匹配：失败情况下：最坏o(mn)，最好o(n)</p></li><li><p>KMP算法：用一个next数组储存模式串本身的特征，某位置不匹配时i不变，j应该变为的值。避免了回溯过程</p><ul><li><p>复杂度o(n) <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:16-11:15:56-image-20220509093621103.png" alt="image-20220509093621103" style="zoom:30%;" /></p></li><li><p>复杂度o(m) $\begin{cases}next[1],无脑写0\\next[2],无脑写1\\i位置左侧画一条分界线，模式串右移，匹配时候j是多少\end{cases}$</p></li><li><p>nextval求法：在next数组基础上计算</p><blockquote><p>1.第一位的nextval值必定为0，第二位如果于第一位相同则为0，如果不同则为1。  </p><p>2.第三位的next值为1，那么将第三位和第一位进行比较，均为a，相同，则，第三位的nextval值为0。</p><p>3.第四位的next值为2，那么将第四位和第二位进行比较，不同，则第四位的nextval值为其next值，为2。</p><p>4.第五位的next值为2，那么将第五位和第二位进行比较，相同，第二位的next值为1，则继续将第二位与第一位进行比较，不同，则第五位的nextval值为第二位的next值，为1。</p></blockquote></li></ul></li></ul><h2 id="4-树"><a href="#4-树" class="headerlink" title="4.树"></a>4.树</h2><h3 id="4-1-概念性质"><a href="#4-1-概念性质" class="headerlink" title="4.1.概念性质"></a>4.1.概念性质</h3><ul><li><p>树的度：度的最大值</p></li><li><p>深度：默认从1开始</p></li><li><p>性质：</p><ul><li><p>节点数=总度数+1</p></li><li><p>度为0的点比度为2的点多一个</p><blockquote><p>$n=n_0+n_1+n_2$</p><p>$n=n_1+2n_2+1$ 作差</p></blockquote></li><li><p>度为m的树第i层最多有$m^{i-1}$个节点</p></li><li><p>高度为h的m叉树最多$\frac{m^h-1}{m-1}$个节点（等比数列求和），度为m的树至少有h+m-1个节点</p></li><li><p>具有n个节点的m叉树的最小高度为$log_m(n(m-1)+1)$   </p><blockquote><p>$\frac{m^{h-1}-1}{m-1}&lt;n\le\frac{m^h-1}{m-1}$ 比上一层多，不能超过这一层</p><p>$m^{h-1}&lt;n(m-1)+1\le m^h$</p></blockquote></li></ul></li><li><p>特殊的二叉树</p><ul><li>满二叉树：按层序从1开始编号，节点为i的左孩子为2i，右孩子为2i+1</li><li>完全二叉树：编号能和满二叉树一一对应<ul><li>n个节点的完全二叉树高度h为 $log_2(n+1)$</li><li>单分支节点只能有0或1个，双分支节点有奇数个</li><li>$n_0=n_2+1$，已知总数可以推出$n_0\ n_1\ n_2$</li></ul></li><li>平衡二叉树：树上任一结点的左右子树深度之差不超过1</li></ul></li></ul><h3 id="4-2-存储结构"><a href="#4-2-存储结构" class="headerlink" title="4.2.存储结构"></a>4.2.存储结构</h3><ul><li>顺序存储： 节点编号从1开始，数组0位置空着 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:16-11:15:56-image-20220511065450396.png" alt="image-20220511065450396" style="zoom:40%;" /></li><li>链式存储： 三叉链表：多一个父指针</li><li><strong>求深度</strong> <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:16-11:15:56-image-20220511072239815.png" alt="image-20220511072239815" style="zoom:30%;" /></li><li>层序遍历：辅助队列，广搜。入队的是指针不是值，这样省地方</li></ul><h3 id="4-3-线索二叉树"><a href="#4-3-线索二叉树" class="headerlink" title="4.3.线索二叉树"></a>4.3.线索二叉树</h3><ul><li><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:16-11:15:56-image-20220511080036870.png" alt="image-20220511080036870" style="zoom:30%;" /> <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:16-11:15:56-image-20220511080100377.png" alt="image-20220511080100377" style="zoom:30%;" /></p><blockquote><p>中序线索化 </p></blockquote></li><li><p>最后一个节点需要特殊处理右线索，让它为空</p></li><li><p><strong>先序线索化</strong>遍历时需要判断<strong>左孩子</strong>tag是否为0</p></li><li><p><strong>后序线索化</strong>遍历时需要判断<strong>右孩子</strong>tag是否为0</p></li><li><p>找前驱后继：</p><ul><li><p>中序：后继：右子树的左下角节点<strong>；</strong>前驱：左子树右下角节点</p></li><li><p>先序：后继：左右孩子<strong>；</strong>前驱：找不到</p></li><li><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:16-11:15:56-image-20220511134858301.png" alt="image-20220511134858301" style="zoom:30%;" /></p><blockquote><p>最后一个遍历的就是右边路走到头、然后左边路走到头这样的最后一个</p></blockquote></li><li><p>后序：前驱：右左孩子<strong>；</strong>后驱：找不到</p></li><li><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:16-11:15:56-image-20220511135458505.png" alt="image-20220511135458505" style="zoom:30%;" /></p><blockquote><p>最后一个遍历的就是左边路走到头、然后右边路走到头这样的最后一个</p></blockquote></li></ul></li></ul><h3 id="4-4-普通的树"><a href="#4-4-普通的树" class="headerlink" title="4.4.普通的树"></a>4.4.普通的树</h3><ul><li>双亲表示法：找双亲方便，找孩子不方便（节点中储存双亲的下标）</li><li>孩子表示法：找孩子方便，找双亲不方便 （节点中储存孩子链表头指针）</li><li>孩子兄弟表示法也就是树和二叉树的转化<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:16-11:15:56-image-20220511141416286.png" alt="image-20220511141416286" style="zoom:20%;" /></li><li>森林和二叉树转化 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:16-11:15:56-image-20220511141657545.png" alt="image-20220511141657545" style="zoom:20%;" /></li><li><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:16-11:15:56-image-20220511144304140.png" alt="image-20220511144304140" style="zoom:37%;" /></li></ul><h3 id="4-5-平衡二叉树"><a href="#4-5-平衡二叉树" class="headerlink" title="4.5.平衡二叉树"></a>4.5.平衡二叉树</h3><ul><li><p>二叉排序树BST</p><ul><li>插入时如果元素已经存在则应当<strong>插入失败</strong></li><li>删除时可以用直接前驱（左子树最小的）或者直接后继（右子树最大的）来替代</li></ul></li><li><p>平衡二叉树AVL</p><ul><li>$\ $ <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:16-11:15:56-image-20220511161126503.png" alt="image-20220511161126503" style="zoom:40%;" /></li><li>用$n_h$表示深度为h的平衡树中含有的最少节点数，则有$n_0=0,n_1=1,n_2=2$，且<strong>$n_h=n_{h-1}+n_{h-2}+1$</strong>。含n个节点的平衡二叉树最大深度为$log_2n$</li></ul></li><li><p>哈夫曼树</p><ul><li><p>构造：每次挑权值最小的两个节点组合成树，根节点权值为他们的和</p></li><li><p>前缀编码：任何一个字符的编码都不是另一个编码的前缀</p><blockquote><p>构造n叉哈夫曼树，需要补充0节点，保证严格n叉树。计算 (节点数-1)%(叉数-1)，如果结果不是0，补充0节点直到余数为0，再构造树</p></blockquote></li></ul></li></ul><h2 id="5-图"><a href="#5-图" class="headerlink" title="5.图"></a>5.图</h2><h3 id="5-1-概念"><a href="#5-1-概念" class="headerlink" title="5.1.概念"></a>5.1.概念</h3><ul><li>图的顶点集一定是非空集，但是边集可以是空集</li><li>对于n个顶点的无向图G，若G是连通图，则最少有n-1条边；若G是非连通图，则最多可能有$C_{n-1}^2$条边</li><li>有向图强连通最少边数就是一个回路，即n条边</li><li>生成子图：顶点一样，边可以少一点</li><li>无向图中的<strong>极大连通子图</strong>称为<strong>连通分量</strong>；有向图中的<strong>极大连通子图</strong>称为<strong>强连通分量</strong>（有来无回不是连通）</li><li>联通图的生成树：顶点全有，边尽可能少</li><li><u>边 &lt; 顶点 log 顶点</u> 一般认为是稀疏图，但不绝对</li><li>有向树：从根向叶子有向的树</li></ul><h3 id="5-2-存储结构"><a href="#5-2-存储结构" class="headerlink" title="5.2.存储结构"></a>5.2.存储结构</h3><ul><li>邻接矩阵：$A^n[i][j]$表示从i到j边长为n的路径数目</li><li>邻接表：<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:16-11:15:56-image-20220512093700684.png" alt="image-20220512093700684" style="zoom:25%;" /></li><li>十字链表-有向图<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:16-11:15:56-image-20220513074609640.png" alt="image-20220513074609640" style="zoom:30%;" /></li><li>邻接多重表-无向图<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:16-11:15:56-image-20220513075119292.png" alt="image-20220513075119292" style="zoom:30%;" /></li><li>对比<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:16-11:15:56-image-20220513080431846.png" alt="image-20220513080431846" style="zoom:35%;" /></li></ul><h3 id="5-3-经典应用"><a href="#5-3-经典应用" class="headerlink" title="5.3.经典应用"></a>5.3.经典应用</h3><ul><li><p>广搜</p><ul><li>复杂度：邻接矩阵0(n)，邻接表o(m+n)</li><li>邻接表表示不唯一，因此它的广度优先生成树也不唯一</li></ul></li><li><p>深搜</p><ul><li>最坏空间复杂度：调用栈深度o(n)</li><li>时间复杂度：邻接矩阵$o(n^2)$，邻接表o(m+n)</li></ul></li><li><p>最小生成树</p><ul><li><p>Prim算法：从一个顶点开始构建；将代价最小的新顶点纳入，直到所有顶点都纳入为止</p><blockquote><p>复杂度只和点有关，$o(n^2)$，适合<strong>边稠密图</strong></p></blockquote></li><li><p>Kruskal算法：选择权值最小的边，使这条边的两头连通（原本已经连通的就不选），直到所有结点都连通</p><blockquote><p>复杂度只和边有关，$o(m\cdot log_2m)$，适合<strong>边稀疏图</strong></p></blockquote></li></ul></li><li><p>最短路径</p><ul><li><p>无权图直接用广度优先</p></li><li><p>Dijkstra <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:16-11:15:56-image-20220513103438081.png" alt="image-20220513103438081" style="zoom:25%;" /> 每一轮遍历两遍，共n-1轮，时间复杂度$o(n^2)$</p></li><li><p>Floyd <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:16-11:15:56-image-20220514075145374.png" alt="image-20220514075145374" style="zoom:40%;" /> <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:16-11:15:56-image-20220514075224620.png" alt="image-20220514075224620" style="zoom:30%;" /></p><blockquote><p>代码 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:16-11:15:56-image-20220514075526287.png" alt="image-20220514075526287" style="zoom:30%;" /> <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:16-11:15:56-image-20220514080201344.png" alt="image-20220514080201344" style="zoom:25%;" /></p><p>可以解决负权值，但不能有负权回路，因为可能没有最短路径</p></blockquote></li></ul></li><li><p>有向无环图<strong>DAG</strong> </p><ul><li><p>描述表达式：给运算符编号，分层写</p></li><li><p>拓扑排序<strong>AOV</strong>：输出入度为0的点，把它们发出的边删除。重复</p><ul><li>邻接表：边和点都要遍历一次，o(m+n)</li><li>邻接矩阵：扫描整个表，$o(n^2)$</li></ul></li><li><p>逆拓扑排序：输出出度为0的点，把指向它们的边删除。重复</p><ul><li>邻接表效率低，需要逆邻接表。或者邻接矩阵</li><li>可以使用DFS递归实现 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:16-11:15:56-image-20220514090720648.png" alt="image-20220514090720648" style="zoom:35%;" /></li></ul></li><li><p>关键路径<strong>AOE</strong>：</p><ul><li><p>仅有一个开始顶点（源点）和一个结束顶点（汇点）</p></li><li><p>源点到汇点所有路径中<strong>最长的</strong>是关键路径</p></li><li><p>时间余量：某个活动最短开始时间和最长开始时间的差值</p></li><li><p>步骤：确定点的拓扑排序时间（取大）；确定点的逆拓扑排序时间（取小）；确定边的开始时间；确定边的结束时间；时间余量为0的是关键活动，它们组成关键路径</p></li><li><p>可能有多条关键路径，只提高一条关腿路径上的关健活动速度并不能缩短整个工程的工期，只有加快那些包括在所有关键路径上的关键活动才能达到缩短工期的目的</p><blockquote><p>边的最迟开始时间是后面的最晚开始时间减去事件的持续时间，不是用出发点算了！和点区分开来</p></blockquote></li></ul></li></ul></li></ul><h2 id="6-查找"><a href="#6-查找" class="headerlink" title="6.查找"></a>6.查找</h2><ul><li>关键字：不重复的唯一标识</li><li>平均查找长度ASL，通常考虑成功失败两种情况</li></ul><h3 id="6-1-折半查找"><a href="#6-1-折半查找" class="headerlink" title="6.1.折半查找"></a>6.1.折半查找</h3><ul><li><p>代码 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:16-11:15:56-image-20220514100149104.png" alt="image-20220514100149104" style="zoom:40%;" /></p></li><li><p>查找判定树：如果是偶数个元素，那么右边比左边多一个</p></li><li><p>树高 $log_2(n+1)$，只有最下面一层可以不满</p></li><li><p>n个数，失败节点n+1个</p></li><li><p><strong>不是一定比顺序查找快</strong></p><blockquote><p>计算平均查找长度，画一个树出来，路径长度就是成功长度，空指针就是失败</p><p>最多 $\lfloor log_2n\rfloor+1$ 次比较。无论成功还是不成功</p></blockquote></li></ul><h3 id="6-2-分块查找"><a href="#6-2-分块查找" class="headerlink" title="6.2.分块查找"></a>6.2.分块查找</h3><ul><li><p>若索引表中不包含目标关键字，则折半查找索引表最终停在Iow&gt;high，要在low所指分块中查找</p><blockquote><p>原因：最终Iow左边一定小于目标关键字，high右边一定大于目标关键字。而分块存储的索引表中保存的是各个分块的最大关键字</p></blockquote></li><li><p>Iow超出索引表范围，查找失败</p></li><li><p>复杂度</p><blockquote><p>假设，长度为的查找表被均匀地分为b块，每块s个元素。</p><p>顺序查找：$ASL=\frac{b+1}{2}+\frac{s+1}{2}=\frac{s^2+2s+n}{2s}$。$s=\sqrt{n}$时，$ASL_{min}=\sqrt{n}+1$ </p><p>折半查找：$ASL=log_2(b+1)+\frac{s+1}{2}$ </p></blockquote></li></ul><h3 id="6-3-B-树"><a href="#6-3-B-树" class="headerlink" title="6.3.B+树"></a>6.3.B+树</h3><ul><li>非叶根节点至少两颗子树，其他每个分支节点至少$\lceil\frac{m}{2}\rceil$颗子树</li><li>每个分支节点最多m颗子树</li><li>节点储存分支中最大值</li><li>节点子树个数 和 关键字个数 相等</li><li>示意图 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:16-11:15:56-image-20220514110801329.png" alt="image-20220514110801329" style="zoom:30%;" /></li></ul><h3 id="6-4-B树"><a href="#6-4-B树" class="headerlink" title="6.4.B树"></a>6.4.B树</h3><ul><li><p>含n个关键字的<strong><u>m阶B树</u></strong></p><blockquote><p><strong>最小高度</strong>：<u>让每个结点尽可能的满</u>，有m-1个关键字，m个分叉，则有$n\le(m-1)(1+m+m^2+…+m^{h-1})=m^h-1$，故$h\ge log_m(n+1)$ </p><p><strong>最大高度</strong>：<u>让各层的分叉尽可能的少</u>，即根节点只有2个分叉，其他结点只有$\lceil\frac{m}{2}\rceil$个分叉。</p><p>各层结点至少有：第一层1、第二层2、第三层$\lceil\frac{m}{2}\rceil$…第h层$2\lceil\frac{m}{2}\rceil^{h-2}$，第h+1层共有叶子节点$2\lceil\frac{m}{2}\rceil^{h-1}$个。</p><p>n个关键字的B树必有n+1个叶子节点（失败空指针），则$n+1\ge 2\lceil\frac{m}{2}\rceil^{h-1}$，即$h\le log_{\lceil\frac{m}{2}\rceil}\frac{n+1}{2}+1$ </p></blockquote></li><li><p>含n个关键字的<strong><u>m叉B树</u></strong></p><blockquote><p><strong>最大高度</strong>：让每个结点包含的关键字、分叉尽可能的少。记$k=\lceil\frac{m}{2}\rceil$</p><p>递推 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:16-11:15:56-image-20220514213057304.png" alt="image-20220514213057304" style="zoom:50%;" /></p><p>h层的m阶B树至少包含关键字总数 $1+2(k-1)(k^0+k^1+…+k^{h-2})=1+2(k^{h-1}-1)\le n$</p><p>得到 $h\le log_{\lceil\frac{m}{2}\rceil}\frac{n+1}{2}+1$ </p></blockquote></li><li><p>B树的插入 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:16-11:15:56-image-20220514112353943.png" alt="image-20220514112353943" style="zoom:25%;" /></p><blockquote><p>保证上层节点比它左边节点的子节点的最大值大。一旦超出了阶数就取$\lceil\frac{m}{2}\rceil$节点到上层分裂</p><p>例子：<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:07:19-16:34:41-image-20220719163433410.png" alt="image-20220719163433410" style="zoom:50%;" /></p></blockquote></li><li><p>B树的删除 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:16-11:15:56-image-20220514113028116.png" alt="image-20220514113028116" style="zoom:20%;" /> <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:16-11:15:56-image-20220514113321970.png" alt="image-20220514113321970" style="zoom:20%;" /></p><blockquote><p><strong>删根节点</strong>：找到直接前驱（左子树中最下层最右边）或后继（右子树最下层最左边）顶替</p><p><strong>兄弟够借</strong>：后继 和 后继的后继 来填补；前驱 和 前驱的前驱 来填补</p><p><strong>兄弟不够借</strong>：被删除关键字所在结点删除前的关键字个数低于下限，且此时与该结点相邻的左、右兄弟结点的关键字个数均=$\lceil\frac{m}{2}\rceil-1$，则将关键字删除后与左（或右）兄弟结点及双亲结点中的关键字进行合并</p></blockquote></li></ul><h3 id="6-5-散列查找"><a href="#6-5-散列查找" class="headerlink" title="6.5.散列查找"></a>6.5.散列查找</h3><ul><li><p>装填因子$\alpha=$表中记录个数/散列表表长</p></li><li><p>查找效率：取决于散列函数、处理冲突的方法、装填因子</p></li><li><p>散列函数</p><ul><li>取余法：一般取素数</li><li>线性变化或直接定址：适用于关键字分布基本连续</li><li>数字分析法：截取数字的一部分作为散列地址，比如手机号</li><li>平方取中：取平方值的中间几位。这种方法得到的<strong>散列地址与关键字的每位都有关系</strong>，因此使得散列地址<strong>分布比较均匀</strong>，适用于关键字的<strong>每位取值都不够均匀</strong>或均<strong>小于散列地址所需的位数</strong>。</li></ul></li><li><p>处理冲突</p><ul><li><p>拉链法</p></li><li><p>开放定址法：</p><ul><li><p>线性探测：看后面一个位置</p><blockquote><p>删除时使用一个删除标记，而不是直接置空。否则可能导致后面删除时查找失败</p></blockquote></li><li><p>平方探测：$\pm k^2$。散列表长度m必须是一个可以表示成4j+3的素数，才能探测到所有位置</p></li><li><p>伪随机序列</p></li></ul></li><li><p>再散列法</p></li></ul></li></ul><h2 id="7-排序"><a href="#7-排序" class="headerlink" title="7.排序"></a>7.排序</h2><blockquote><p>算法<strong>复杂度</strong>与初始状态无关：<u>选择排序、堆排序、归并排序、基数排序</u></p><p>元素<strong>总比较次数</strong>与初始状态无关：<u>选择排序、基数排序</u></p><p>元素<strong>总移动次数</strong>与初始状态无关：<u>归并排序、基数排序</u></p><p><strong>排序趟数</strong>与初始状态<strong>有关</strong>：<u>快排、冒泡排序</u></p></blockquote><h3 id="7-1-插入排序"><a href="#7-1-插入排序" class="headerlink" title="7.1.插入排序"></a>7.1.插入排序</h3><ul><li>空间复杂度o(1)</li><li>最好时间复杂度o(n)，比较n-1次，不需要移动</li><li>最坏时间复杂度$o(n^2)$ </li><li>平均时间复杂度$o(n^2)$ </li><li><strong>稳定排序</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//插入排序</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InsertSort</span><span class="hljs-params">(<span class="hljs-type">int</span> A[],<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i, j, temp;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">1</span>; i &lt; n; i++)<br>        <span class="hljs-keyword">if</span>(A[i] &lt; A[i<span class="hljs-number">-1</span>])<br>        &#123;<br>            temp = A[i];<br>            <span class="hljs-keyword">for</span>(j = i<span class="hljs-number">-1</span>; j &gt;= <span class="hljs-number">0</span> &amp;&amp; A[j] &gt; temp; --j)<br>                A[j+<span class="hljs-number">1</span>] = A[j];<br>            A[j+<span class="hljs-number">1</span>] = temp<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用折半查找来加速。当Iow&gt;high时折半查找停止，应将[low,i-1]内的元素全部右移，并将A[0]复制到Iow所指位置。比较次数减少，移动次数不变。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//折半插入排序。使用了哨兵</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InsertSort</span><span class="hljs-params">(<span class="hljs-type">int</span> A[],<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i, j, low, mid, high;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">2</span>; i &lt;= n; i++)<br>    &#123;<br>        A[<span class="hljs-number">0</span>] = A[i];<br>        low = <span class="hljs-number">1</span>; high = i<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">while</span>(low &lt;= high)<br>        &#123;<br>            mid = (low + high) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>(A[mid] &gt; A[<span class="hljs-number">0</span>]) <br>                high = mid<span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">else</span> <br>                low = mid+<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(j = i<span class="hljs-number">-1</span>; j &gt;= high+<span class="hljs-number">1</span>; --j)<br>            A[j+<span class="hljs-number">1</span>] = A[j];<br>        A[j+<span class="hljs-number">1</span>] = A[<span class="hljs-number">0</span>];<br>    &#125;   <br>&#125;<br></code></pre></td></tr></table></figure><p>对链表插入排序，比较$o(n^2)$，移动只需要改几个指针。</p><h3 id="7-2-希尔排序"><a href="#7-2-希尔排序" class="headerlink" title="7.2.希尔排序"></a>7.2.希尔排序</h3><ul><li>按间隔d划分为子表，使用插入排序。然后缩小d继续，直到d=1</li><li>空间复杂度o(1)</li><li>最坏时间复杂度为$o(n^2)$，当n在某个范围内时，可达$o(n^{1.3})$ </li><li><strong>不稳定排序</strong></li><li>需要随机访问，只能顺序表，不能链表</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//希尔排序</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ShellSort</span><span class="hljs-params">(<span class="hljs-type">int</span> A[], <span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> d, i, j;<br>    <span class="hljs-keyword">for</span>(d = n/<span class="hljs-number">2</span>; d &gt; <span class="hljs-number">1</span>; d = d/<span class="hljs-number">2</span>) <span class="hljs-comment">//步长变化</span><br>        <span class="hljs-keyword">for</span>(i = d+<span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            <span class="hljs-keyword">if</span>(A[i] &lt; A[i-d])<br>            &#123;<br>                A[<span class="hljs-number">0</span>] = A[i]; <span class="hljs-comment">//用于暂存，不是哨兵</span><br>                <span class="hljs-keyword">for</span>(j = i-d; j &gt; <span class="hljs-number">0</span> &amp;&amp; A[<span class="hljs-number">0</span>] &lt; A[j]; j -= d)<br>                    A[j+d] = A[j];<br>                A[j+d] = A[<span class="hljs-number">0</span>];<br>            &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-3-冒泡排序"><a href="#7-3-冒泡排序" class="headerlink" title="7.3.冒泡排序"></a>7.3.冒泡排序</h3><ul><li>空间复杂度o(1)</li><li>最好时间复杂度o(n)，比较n-1次，不需要移动</li><li>最坏时间复杂度$\frac{n(n-1)}{2}$，等于比较次数和交换次数</li><li><strong>稳定排序</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//冒泡排序</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">BubbleSort</span><span class="hljs-params">(<span class="hljs-type">int</span> A[], <span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n<span class="hljs-number">-1</span>; i++)<br>    &#123;<br>        <span class="hljs-type">bool</span> flag = flase;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = n<span class="hljs-number">-1</span>; j &gt; i; j--)<br>            <span class="hljs-keyword">if</span>(A[j<span class="hljs-number">-1</span>] &gt; A[j])<br>            &#123;<br>                <span class="hljs-built_in">swap</span>(A[j<span class="hljs-number">-1</span>], A[j])<br>                    flag = <span class="hljs-literal">true</span>;<br>            &#125;<br>        <span class="hljs-keyword">if</span>(flag == flase) <span class="hljs-keyword">return</span>; <span class="hljs-comment">//本趟遍历后没有发生交换，说明表已经有序</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-4-快排"><a href="#7-4-快排" class="headerlink" title="7.4.快排"></a>7.4.快排</h3><ul><li>最好时间复杂度$o(nlog_2n)$<ul><li>最坏时间复杂度$o(n^2)$</li></ul></li><li>最好空间复杂度$o(log_2n)$<ul><li>最坏空间复杂度$o(n)$</li></ul></li><li><strong>不稳定排序</strong></li><li>优化：<ul><li>选头中尾，取中间值作为枢轴</li><li>随机选枢轴</li></ul></li><li>定义辨析：一趟排序，对所有数据进行一次处理，相当于快排处理一层。可以一次确定多个元素的位置</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//快速排序</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Partition</span><span class="hljs-params">(<span class="hljs-type">int</span> A[], <span class="hljs-type">int</span> low, <span class="hljs-type">int</span> high)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> pivot = A[low]; <span class="hljs-comment">//第一个元素作为枢轴</span><br>    <span class="hljs-keyword">while</span>(low &lt; high)<br>    &#123;<br>        <span class="hljs-keyword">while</span>(low &lt; high &amp;&amp; A[high] &gt;= pivot) --high;<br>        A[low] = A[high];<br>        <span class="hljs-keyword">while</span>(low &lt; high &amp;&amp; A[low] &lt;= pivot) ++low;<br>        A[high] = A[low];<br>    &#125;<br>    A[low] = pivot; <span class="hljs-comment">//枢轴元素放到最终位置</span><br>    <span class="hljs-keyword">return</span> low; <span class="hljs-comment">//返回存放枢轴元素的位置</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QuickSort</span><span class="hljs-params">(<span class="hljs-type">int</span> A[], <span class="hljs-type">int</span> low, <span class="hljs-type">int</span> high)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (low &lt; high) <span class="hljs-comment">//递归跳出条件</span><br>    &#123;<br>        <span class="hljs-type">int</span> pivotpos = <span class="hljs-built_in">Partition</span>(A, low, high); <span class="hljs-comment">//划分</span><br>        <span class="hljs-built_in">QuickSort</span>(A, low, pivotpos<span class="hljs-number">-1</span>);<br>        <span class="hljs-built_in">QuickSort</span>(A, pivotpos+<span class="hljs-number">1</span>, high);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>例题：<strong>找到第k小元素</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findKth</span><span class="hljs-params">(<span class="hljs-type">int</span> a[], <span class="hljs-type">int</span> l ,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> k)</span></span>&#123;<br>    <span class="hljs-keyword">if</span> (l == r) <span class="hljs-keyword">return</span> a[l];<br>    <br>    <span class="hljs-type">int</span> x = a[l + r &gt;&gt; <span class="hljs-number">1</span>] , i = l - <span class="hljs-number">1</span> , j = r + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (i &lt; j)&#123;<br>        <span class="hljs-keyword">while</span> (a[++i] &lt; x);<br>        <span class="hljs-keyword">while</span> (a[--j] &gt; x);<br>        <span class="hljs-keyword">if</span> (i &lt; j) <span class="hljs-built_in">swap</span>(a[i] , a[j]);<br>    &#125;<br>    <span class="hljs-comment">//计算主元左边数字个数</span><br>    <span class="hljs-type">int</span> lcnt = j - l + <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//判断第k个数在左边还是右边</span><br>    <span class="hljs-keyword">if</span> (k &lt;= lcnt) <span class="hljs-keyword">return</span> <span class="hljs-built_in">findKth</span>(a, l, j, k);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-built_in">findKth</span>(a, j + <span class="hljs-number">1</span>, r, k - lcnt);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-5-简单选择排序"><a href="#7-5-简单选择排序" class="headerlink" title="7.5.简单选择排序"></a>7.5.简单选择排序</h3><ul><li>空间复杂度$o(1)$</li><li>时间复杂度$o(n^2)$，需要对比$\frac{n(n-1)}{2}$次</li><li><strong>不稳定排序</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//选择排序</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SelectSort</span><span class="hljs-params">(<span class="hljs-type">int</span> A[], <span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n<span class="hljs-number">-1</span>; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> min = i;<br>        <span class="hljs-keyword">for</span>(nt j = i+<span class="hljs-number">1</span>; j &lt; n; j++)<br>            <span class="hljs-keyword">if</span>(A[j] &lt; A[min]) <br>                min = j;<br>        <span class="hljs-keyword">if</span>(min != i) <br>            <span class="hljs-built_in">swap</span>(A[i],A[min]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-6-堆排序"><a href="#7-6-堆排序" class="headerlink" title="7.6.堆排序"></a>7.6.堆排序</h3><ul><li>调整方法：检查当前结点是否根比左、右都大。若不满足，将当前结点与更大的一个孩子互换</li><li>构建大根堆，把堆顶和堆底元素换，然后继续维护堆</li><li>建堆的时间不超过4n，复杂度o(n)</li><li>排序过程每一趟复杂度不超过o(height)，即$o(log_2n)$。共n-1趟，故$o(nlog_2n)$</li><li>空间o(1)</li><li><strong>不稳定排序</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//堆排序</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">BuildMaxHeap</span><span class="hljs-params">(<span class="hljs-type">int</span> A[], <span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = len/<span class="hljs-number">2</span>; i &gt; <span class="hljs-number">0</span>; i--) <span class="hljs-comment">//从后往前调整所有非终端节点</span><br>        <span class="hljs-built_in">HeapAdjust</span>(A, i, len);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">HeapAdjust</span><span class="hljs-params">(<span class="hljs-type">int</span> A[], <span class="hljs-type">int</span> k, <span class="hljs-type">int</span> len)</span> <span class="hljs-comment">//调整以k为根的子树</span></span><br><span class="hljs-function"></span>&#123;<br>    A[<span class="hljs-number">0</span>] = A[k]; <span class="hljs-comment">//暂存根节点</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>*k, i &lt;= len; i *= <span class="hljs-number">2</span>) <span class="hljs-comment">//沿key较大的子结点向下筛选</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(i &lt; len &amp;&amp; A[i] &lt; A[i+<span class="hljs-number">1</span>])<br>            i++; <span class="hljs-comment">//取key较大的子结点的下标</span><br>        <span class="hljs-keyword">if</span>(A[<span class="hljs-number">0</span>] &gt;= A[i]) <br>            <span class="hljs-keyword">break</span>; <span class="hljs-comment">//筛选结束</span><br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            A[k] = A[i]; <span class="hljs-comment">//将A[i]调整到双亲结点上</span><br>            k = i; <span class="hljs-comment">//继续向下筛选</span><br>        &#125;<br>    &#125;<br>    A[k] = A[<span class="hljs-number">0</span>]; <span class="hljs-comment">//被筛选结点的值放入最终位置</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">HeapSort</span><span class="hljs-params">(<span class="hljs-type">int</span> A[], <span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">BuildMaxHeap</span>(A, len);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = len; i &gt; <span class="hljs-number">1</span>; i--)<br>    &#123;<br>        <span class="hljs-built_in">swap</span>(A[<span class="hljs-number">1</span>], A[i]);<br>        <span class="hljs-built_in">HeapAdjust</span>(A, <span class="hljs-number">1</span>, i<span class="hljs-number">-1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>小根堆<ul><li>插入：新元素加入堆底，然后一路和父亲比大小，一路上升直到无法继续为止</li><li>删除：删除它，把堆底放上来，不断下坠</li></ul></li></ul><h3 id="7-7-归并排序"><a href="#7-7-归并排序" class="headerlink" title="7.7.归并排序"></a>7.7.归并排序</h3><ul><li>2路归并：两个指针依次比较后移，更小的放到新数组里。一个序列空了之后另一个序列剩下的直接整个复制进来。</li><li>示意图 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:16-11:15:56-image-20220516091342672.png" alt="image-20220516091342672" style="zoom:25%;" /></li><li>时间复杂度$o(nlog_2n)$。n个元素进行2路归并，共$\lceil\frac{m}{2}\rceil$趟，每一趟n个数都处理一遍</li><li>空间复杂度o(n)</li><li><strong>稳定排序</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//归并排序</span><br><span class="hljs-type">int</span> *B = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(n * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>)); <span class="hljs-comment">//辅助数组</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Merge</span><span class="hljs-params">(<span class="hljs-type">int</span> A[], <span class="hljs-type">int</span> low, <span class="hljs-type">int</span> mid, <span class="hljs-type">int</span> high)</span> <span class="hljs-comment">//mid左右两个数组各自有序</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i, j, k;<br>    <span class="hljs-keyword">for</span>(k = low; k &lt;= high; k++)<br>        B[k] = A[k]; <span class="hljs-comment">//将A中所有元素复制到B中</span><br>    <span class="hljs-keyword">for</span>(i = low,j = mid+<span class="hljs-number">1</span>,k = i; i &lt;= mid &amp;&amp; i &lt;= high; k++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(B[i] &lt;= B[j])<br>            A[k] = B[i++]; <span class="hljs-comment">//将较小值复制到A中</span><br>        <span class="hljs-keyword">else</span><br>            A[k] = B[j++];<br>    &#125;<br>    <span class="hljs-keyword">while</span>(i &lt;= mid)<br>        A[k++] = B[i++];<br>    <span class="hljs-keyword">while</span>(j &lt;= high)<br>        A[k++] = B[j++];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">MergeSort</span><span class="hljs-params">(<span class="hljs-type">int</span> A[], <span class="hljs-type">int</span> low, <span class="hljs-type">int</span> high)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(low &lt; high)<br>    &#123;<br>        <span class="hljs-type">int</span> mid = (low + high) / <span class="hljs-number">2</span>; <span class="hljs-comment">//划分</span><br>        <span class="hljs-built_in">MergeSort</span>(A, low, mid); <span class="hljs-comment">//左半部分归并</span><br>        <span class="hljs-built_in">MergeSort</span>(A, mid+<span class="hljs-number">1</span>, high); <span class="hljs-comment">//右半部分归并</span><br>        <span class="hljs-built_in">Merge</span>(A, low, mid, high); <span class="hljs-comment">//归并</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-8-基数排序"><a href="#7-8-基数排序" class="headerlink" title="7.8.基数排序"></a>7.8.基数排序</h3><ul><li>按照每一位数字取值范围划分几个不同的队伍，按位数从低到高划分队伍后用链表接起来，重复</li><li>r个辅助队列（关键字的范围），n个元素，d趟分配（关键字划分几部分）<ul><li>空间复杂度o(r)</li><li>时间复杂度o(d(n+r))。一趟分配o(n)，一趟收集o(r)，总共d趟分配、收集</li></ul></li><li><strong>稳定排序</strong></li><li>擅长的问题：<ul><li>数据元素的关键字可以方便地拆分为不太多的组（d）：<del>给5个人的身份证号排序</del></li><li>每组关键字的取值范围不大（r）：<del>给中文人名排序</del></li><li>数据元素较多（n）：给十亿人的身份证号排序</li></ul></li></ul><h3 id="7-9-外部排序"><a href="#7-9-外部排序" class="headerlink" title="7.9.外部排序"></a>7.9.外部排序</h3><ul><li><p>2路归并：每次归并合并两个归并段。输入缓冲区空了马上用归并段没读如的部分补上。以此类推直到合并为一个归并段</p></li><li><p>示意图 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:16-11:15:56-image-20220516101117829.png" alt="image-20220516101117829" style="zoom:25%;" /></p></li><li><p>r个归并段，k路归并，归并趟数$=\lceil log_kr\rceil$。使用多路归并，减少初始归并段数量，减少磁盘IO，加速排序</p><ul><li>k路归并，得到一个最小值需要k-1次对比</li></ul></li><li><p>定义：<strong>k路平衡归并</strong>：</p><ul><li>最多只能有k个段归并为一个</li><li>每一趟归并中，若有m个归并段参与归并，则经过这一趟处理得到$\lceil\frac{m}{k}\rceil$个新的归并段</li></ul></li><li><p>改进：败者树</p><ul><li>结构 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:16-11:15:56-image-20220516103431004.png" alt="image-20220516103431004" style="zoom:30%;" /></li><li>新补上的元素沿着上一次胜者的路径比较即可</li><li>k路归并，第一次需要对比关键字k-1次，接下来只需要$\lceil log_2k\rceil$次</li></ul></li><li><p>改进：置换-选择排序</p><ul><li>记录上一次输出的最小值，要是补进来的比它还小就不动，直到整个内存工作区中的数都比上一次输出的最小值小</li><li>结构 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:16-11:15:56-image-20220516104917292.png" alt="image-20220516104917292" style="zoom:25%;" /></li><li>使用置换-选择排序，可以让每个初始归并段的长度超越内存工作区大小的限制</li></ul></li><li><p>改进：最佳归并树</p><ul><li><p>磁盘IO次数等于归并树的带权路径长度乘二</p></li><li><p>2路归并：按照初始归并段的长度，构造哈夫曼树</p></li><li><p>多路归并：类似于哈夫曼树，每次选最小的k个子树。<strong>需要提前补0</strong></p><blockquote><p>$\begin{cases}n=n_0+n_k\\k\cdot n_k=n-1\end{cases}\Longrightarrow n_0=(k-1)n_k+1\Longrightarrow n_k=\frac{(n_0-1)}{(k-1)}$ </p><p>初始归并段数量+补0数量 刚好能除尽 k-1</p><p>(初始数量-1) % （k-1）= u，需要补充 (k-1)-u 个0</p></blockquote></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>考研</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>408-计组-基础笔记</title>
    <link href="/blog/6a069fe07652/"/>
    <url>/blog/6a069fe07652/</url>
    
    <content type="html"><![CDATA[<h1 align="center">408-计组-基础笔记</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><h3 id="1-1-结构"><a href="#1-1-结构" class="headerlink" title="1.1.结构"></a>1.1.结构</h3><ul><li>冯诺依曼结构 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:26-17:07:37-image-20220523214318236.png" alt="image-20220523214318236" style="zoom:50%;" /><ol><li>计算机由五大部件组成</li><li>指令和数据以同等地位存于存储器，可按地址寻访</li><li>指令和数据用二进制表示</li><li>指令由操作码和地址码组成</li><li>存储程序</li><li><strong>以运算器为中心</strong>。<strong>现代计算机以存储器为中心</strong></li></ol></li><li>现代计算机结构 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:26-17:07:43-image-20220523215145066.png" alt="image-20220523215145066" style="zoom:50%;" /></li></ul><h3 id="1-2-硬件"><a href="#1-2-硬件" class="headerlink" title="1.2.硬件"></a>1.2.硬件</h3><ul><li><p>主存储器</p><ul><li><p>存储字长：存储单元中二进制代码的位数</p></li><li><p>MAR：地址寄存器；MDR：数据寄存器</p></li><li><p>存储元：存储二进制的电子元件，每个存储元可存1bit</p><blockquote><p>MAR=4位 $\Longrightarrow$ 总共有$2^4$个存储单元<br>MDR=16位 $\Longrightarrow$ 每个在储单元可存放16bit，即<strong>字长</strong>16bit。字和字节不一样</p></blockquote></li></ul></li><li><p>运算器 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:26-17:07:50-image-20220523220526970.png" alt="image-20220523220526970" style="zoom:50%;" /> <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:26-17:14:18-image-20220523220548546.png" alt="image-20220523220548546" style="zoom:33%;" /></p></li><li><p>控制器 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:26-17:07:53-image-20220523222722763.png" alt="image-20220523222722763" style="zoom:50%;" /></p></li></ul><h3 id="1-3-性能指标"><a href="#1-3-性能指标" class="headerlink" title="1.3.性能指标"></a>1.3.性能指标</h3><ul><li><p>存储器</p><ul><li>MAR：存储单元个数</li><li>MDR：位数代表字长，即每个存储单元的大小(bit)</li></ul></li><li><p>CPU</p><ul><li>主频：一个波峰是一个脉冲</li><li>CPI（Clock cycle Per Instruction）：执行一条指令所需的时钟周期数</li><li>IPS（Instructions Per Second）：每秒执行多少条指令</li><li>FLOPS：每秒执行多少次浮点运算（10进制）</li></ul></li><li><p>整体性能指标</p><ul><li>吞吐量：单位时间内处理请求的数量</li><li><p>响应时间：CPU(运行) + 等待(磁盘访问、内存访问、I/O、操作系统开销)</p><blockquote><p>问：若A、B两个CPU的平均CPI相同，那么A一定更快吗？</p><p>——否！指令系统不一定一样</p><p>问：基准程序执行得越快说明机器性能越好吗？</p><p>——否！基准程序语句存在频度差异</p></blockquote></li></ul></li></ul><h2 id="2-数据表示"><a href="#2-数据表示" class="headerlink" title="2.数据表示"></a>2.数据表示</h2><h3 id="2-1-进制转换"><a href="#2-1-进制转换" class="headerlink" title="2.1.进制转换"></a>2.1.进制转换</h3><ul><li><p>10进制 转 其他：小数部分 * 基数 的整数部分就是那个进制的小数第一位 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:26-17:08:48-image-20220525191255701.png" alt="image-20220525191255701" style="zoom:50%;" /></p><blockquote><p>例：0.3 -&gt; 2进制</p><p>$0.3\times2=0.6=0+0.6$，$0.6\times2=1.2=1+0.2$，$0.2\times2=0.4=0+0.4$，$0.4\times2=0.8=0+0.8$……</p><p>最终二进制：0.01001循环</p></blockquote></li></ul><h3 id="2-2-编码"><a href="#2-2-编码" class="headerlink" title="2.2.编码"></a>2.2.编码</h3><ul><li>ASCII码，A-Z的前三位从010变成011就是a-z</li><li>GB2312 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:26-17:08:51-image-20220525192822977.png" alt="image-20220525192822977" style="zoom:50%;" /></li><li>大端：数据最高有效字节存放到低地址中（也就是和内存是反着的）</li><li>CRC：$2^r\ge K+R+1$ 则有<strong>纠错</strong>能力，否则出错位置可以套圈。校验码是和位置一一对应，但不是直接二进制的值<ul><li>可检测出所有奇数个错误</li><li>可检测出所有双比特的错误</li><li>可检测出所有小于等于校验位长度的连续错误</li></ul></li></ul><h3 id="2-3-二进制计算"><a href="#2-3-二进制计算" class="headerlink" title="2.3.二进制计算"></a>2.3.二进制计算</h3><ul><li><p>数字的表示</p><ul><li><p>原码</p></li><li><p>定点整数认为小数点在最后，定点小数认为小数点在符号后面，$[x]_{原}=1.0010011$</p></li><li><p>最高位0/1表示正负。如果没指定机器字长，不补0也行</p></li><li><p>$[x]_{原}=1,0010011$，那个逗号只是帮你区分符号位，没什么特别意思</p></li><li><p>若字长n+1位，原码整数范围$-(2^n-1)\le x\le 2^n-1$，原码小数范围$-(1-2^{-n})\le x\le1-2^{-n}$</p></li><li><p>反码：若符号位为0，则反码与原码相同；若符号位为1，则<strong>数值位全部取反</strong></p></li><li><p>补码：正数的补码=原码；<strong>负数的补码=反码+1</strong>（要考虑进位）</p><blockquote><p>已知一数补码，求其相反数的补码：符号位和数值位全部取反，再加一</p></blockquote></li><li><p>移码：补码的基础上将符号位取反。<strong>只能用于表示整数</strong></p><ul><li>真值增大时，移码的数也是不断增大，很方便<strong>比大小</strong>。其本质上就是把表示范围改成从0往上增大</li></ul></li></ul></li><li><p>运算</p><ul><li><p>算数移位：补码，负数，右移，左边要补1</p><ul><li>循环移位，可用于<strong>大小端转换</strong> <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:26-17:08:56-image-20220525213859456.png" alt="image-20220525213859456" style="zoom:50%;" /></li></ul></li><li><p>原码加减</p><ul><li><p>加法，如果符号相同，用绝对值算；如果符号不同，用绝对值大-小。算完添符号。同号运算有可能溢出</p><ul><li>减法，全转化为加法</li></ul></li><li><p>补码加减</p><ul><li><p>加法：直接加，<strong>符号位参与运算</strong></p><blockquote><p><strong>负数补码-&gt;原码</strong>：最右边的1，它以及右边不变，左边全部取反</p></blockquote></li><li><p>判断溢出：正+正=负：上溢；负+负=正：下溢</p></li><li>$V=A_sB_s\bar S_s+\bar A_s\bar B_sS_s$，0无溢出，1有溢出</li><li>前面再放一位，与符号位异或，0无溢出，1有溢出</li><li>双符号位，正00负11，结果的两个符号位异或运算，，0无溢出，1有溢出</li></ul></li></ul></li><li><p>定点数-符号扩展</p><ul><li><p>正整数、正小数：原码反码补码都填0</p></li><li><p>负整数：原码填0，反码和补码填1</p></li><li><p>负小数：原码和补码填0，反码填1</p><blockquote><p>基本思想：补码最后一个1左边的都和补码一样，右边的都和原码一样</p></blockquote></li></ul></li><li><p>原码乘法：符号由异或得到，每一轮被乘数和结果都逻辑右移，然后结果算加法。n轮加法、移位</p><ul><li>补码乘法：<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:26-17:09:01-image-20220528093227601.png" alt="image-20220528093227601" style="zoom:40%;" />n轮加法、移位，再加一次加法</li></ul></li><li><p>原码除法</p><ul><li>恢复余数法：先默认上商1，余数&lt;0再改上商0，把除数加到ACC里恢复被除数。逻辑左移<ul><li>示意图 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:26-17:09:04-image-20220528103239224.png" alt="image-20220528103239224" style="zoom:30%;" /></li><li>左移n次，加法n+1次</li></ul></li><li>加减交替法：若余数为负，则可直接商0，并让余数左移1位再加上除数。左移n次，加减n+1或n+2次<ul><li>通过第一次减除数的商来判定两个数的大小，如果余数为正，说明被除数大，定点小数无法表示</li></ul></li><li>补码除法：加减交替法<ul><li>使用2位符号位 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:26-17:09:07-image-20220528110338042.png" alt="image-20220528110338042" style="zoom:40%;" /></li><li>最后一位无论怎样，直接设置为1</li></ul></li></ul></li></ul></li></ul><h3 id="2-4-浮点数"><a href="#2-4-浮点数" class="headerlink" title="2.4.浮点数"></a>2.4.浮点数</h3><ul><li><p>表示格式 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:26-17:09:10-image-20220529141846876.png" alt="image-20220529141846876" style="zoom:50%;" /></p><ul><li><p>规格化：小数点左移：右规；小数点右移：左规。阶码也要相应地改</p></li><li><p>规格化的原码尾数，最高数值位一定是1</p></li><li><p>在IEEE754中，最高位1直接省略了</p><blockquote><p>0.75，也就是$(0.11)_2$，表示到浮点数里数值部分只剩<code>.1000...</code>，最高位1省略了</p></blockquote></li><li><p>规格化的补码尾数，符号位与最高数值位一定相反</p></li><li><p>溢出 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:26-17:09:14-image-20220529143654627.png" alt="image-20220529143654627" style="zoom: 67%;" /></p></li><li><p><strong>格式辨析</strong> <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:09:25-12:42:13-image-20220925124135216.png" alt="image-20220925124135216" style="zoom:40%;" /></p></li></ul></li><li><p>IEEE 754 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:26-17:09:17-image-20220529144649196.png" alt="image-20220529144649196" style="zoom: 50%;" /></p><ul><li>移码 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:26-17:09:19-image-20220529144459676.png" alt="image-20220529144459676" style="zoom:50%;" /></li><li>阶码全0表示非规格化小数，也就是幂次取到最小 $(0.00XX)\times 2^{-126}$</li><li>阶码全1，尾数全0，无穷大；尾数不为0，NaN</li></ul></li><li><p>加减</p><ul><li><p>对阶：<strong>阶数小的向大的对齐</strong>；尾数加减；规格化；舍入；判溢出</p><blockquote><p>例题 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:26-17:09:23-image-20220529154459014.png" alt="image-20220529154459014" style="zoom: 50%;" /></p></blockquote></li></ul></li></ul><h3 id="2-5-ALU"><a href="#2-5-ALU" class="headerlink" title="2.5.ALU"></a>2.5.ALU</h3><ul><li>串行加法器：只有一个全加器，数据逐位串行送加法器中进行运算。进位触发器用来寄存进位信号，以便参与下一次运算<ul><li>$S_i=A_i\oplus B_i\oplus c_{i-1},\ C_i=A_iB_i+(A_i\oplus B_i)C_{i-1}$</li></ul></li><li>并行进位加法器 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:26-17:09:27-image-20220529162531833.png" alt="image-20220529162531833" style="zoom: 67%;" /></li><li>套娃 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:26-17:09:35-image-20220529163652963.png" alt="image-20220529163652963" style="zoom: 50%;" /></li></ul><h2 id="3-存储系统"><a href="#3-存储系统" class="headerlink" title="3.存储系统"></a>3.存储系统</h2><h3 id="3-1-概念"><a href="#3-1-概念" class="headerlink" title="3.1.概念"></a>3.1.概念</h3><ul><li><p>随机存取存储器（内存）、串行访问存储器、相联存储器（快表）</p></li><li><p>破坏性读出：读数据后需要重写（DRAM）。SRAM不需要重写</p></li><li><p>存储速度：数据传输率 = 数据的宽度 / 存储周期（存取时间+恢复时间）</p></li><li><p><strong>金属引脚个数</strong>：地址线（n位地址）+数据线（字长）+片选线（1）+读写控制线（1/2）</p><blockquote><p>DRAM采用地址复用，地址线减半，但是需要一根<strong>行列通选线</strong>，替代掉了片选线</p></blockquote></li></ul><h3 id="3-2-DRAM"><a href="#3-2-DRAM" class="headerlink" title="3.2.DRAM"></a>3.2.DRAM</h3><ul><li>DRAM：栅极电容；SRAM：双稳态触发器</li><li>地址分两次送，第一次行，第二次列</li><li>每次刷新一行</li><li>刷新<ul><li>分散刷新：读一次写一次</li><li>集中刷新：一段时间专门安排刷新</li><li>异步刷新：把刷新分散在刷新周期里（默认2ms）</li></ul></li></ul><h3 id="3-3-RAM与CPU连接"><a href="#3-3-RAM与CPU连接" class="headerlink" title="3.3.RAM与CPU连接"></a>3.3.RAM与CPU连接</h3><ul><li>位扩展：每个存储芯片表示1位，多个芯片并联来达到总线带宽。0-12号线</li><li>字扩展：用片选信号切换哪个芯片传送数据。13-15号线</li><li>通过使能信号控制片选信号生效时间</li><li>双端口存储器：优化多核CPU访问一根内存条的速度</li><li>多体并行存储器：流水线读取数据。连续取n个字耗时 T+(n-1)r<ul><li>低位交叉存储器效果比高位交叉存储器效果好</li><li>存取周期T，存取时间r，为了使流水线不间断，应保证<strong>模块数</strong> $m\ge \frac{T}{r}$</li><li>单体多字存储器：一次读一行</li></ul></li></ul><h3 id="3-4-Cache"><a href="#3-4-Cache" class="headerlink" title="3.4.Cache"></a>3.4.Cache</h3><ul><li><p>命中率H</p><ul><li>先访问cache，<strong>平均访问时间</strong> $t=Ht_c+(1-H)(t_c+t_m)$</li><li>同时访问，<strong>平均访问时间</strong> $t=Ht_c+(1-H)t_m$</li></ul></li><li><p>映射方式 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:26-17:09:41-image-20220530100935367.png" alt="image-20220530100935367" style="zoom:50%;" /></p><ul><li><p>全相联 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:26-17:09:43-image-20220530102415091.png" alt="image-20220530102415091" style="zoom:50%;" /></p><ul><li>Cache存储空间利用充分，命中率高；缺点：查找“标记”最慢，有可能需要对比所有行的标记</li></ul></li><li><p>直接映射：主存块号 % cache块数 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:26-17:09:52-image-20220611085128126.png" alt="image-20220611085128126" style="zoom: 33%;" /></p><ul><li><p>当cache块数是$2^n$，主存块号<strong>末尾n位</strong>直接反映它在cache中的位置，标记位就不存储这几位了</p></li><li><p>对于任意一个地址，只需对比一个“标记”，速度最快；缺点：Cache存储空间利用不充分，命中率低</p><blockquote><p>例题：<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:09:18-14:05:15-image-20220918140456110.png" alt="image-20220918140456110" style="zoom:30%;" /></p></blockquote></li></ul></li><li><p>组相联：另外两种方式的折中，综合效果较好</p><ul><li>n路组相联映射：每n个Cache行为一组</li></ul></li></ul></li><li><p>替换算法</p><ul><li>随机替换</li><li>先进先出</li><li><p><strong>最近最少使用 LRU</strong></p><ul><li>命中时，所命中的行的计数器清零，比其低的计数器加1，其余不变</li><li>未命中且还有空闲行时，新装入的行的计数器置0，其余非空闲行全加1</li><li>未命中且无空闲行时，计数值最大的行的信息块被淘汰，新装行的块的计数器置0，其余全加1</li></ul></li><li><p>最不经常使用 LFU：记录每个块被访问多少次，最小的淘汰</p></li></ul></li><li><p>cache写策略</p><ul><li><p>写命中</p><ul><li>全写法：命中时同时写cache和主存，通常使用<strong>写缓冲</strong></li><li>写回法：添加一个<strong>脏位</strong>，标记为修改过就写回主存，否则不用写回</li></ul></li><li><p>写不命中</p><ul><li>写分配法：先把数据调入cache，再修改，==配合写回法==</li><li>非写分配法：直接写主存。==搭配全写法==</li></ul></li></ul></li></ul><h3 id="3-5-页式存储器"><a href="#3-5-页式存储器" class="headerlink" title="3.5.页式存储器"></a>3.5.页式存储器</h3><ul><li>逻辑地址：逻辑页号+页内地址（长度取决于页面多大）</li><li>快表（TLB）：类似于页表的cache</li><li>虚拟存储器 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:26-17:10:01-image-20220614090410277.png" alt="image-20220614090410277" style="zoom: 33%;" /></li><li>段页式虚拟存储器：虚拟地址=段号+段内页号+页内地址</li></ul><h2 id="4-指令系统"><a href="#4-指令系统" class="headerlink" title="4.指令系统"></a>4.指令系统</h2><h3 id="4-1-指令格式"><a href="#4-1-指令格式" class="headerlink" title="4.1.指令格式"></a>4.1.指令格式</h3><ul><li>零地址指令 OP：<ul><li>不需要操作数，如停机、空操作</li><li>栈型计算机，数据隐含在栈顶</li></ul></li><li>一地址指令 OP A1：<ul><li>只需要一个操作数，如取反 OP(A1)-&gt;A1</li><li>需要两个操作数，另一个隐含在寄存器里 (ACC)OP(A1)-&gt;ACC</li></ul></li><li>二地址指令 OP A1(目的) A2(源)：<ul><li>需要两个操作数的算术运算、逻辑运算等 (A1)OP(A2)-&gt;A1</li></ul></li><li>三地址指令 OP A1 A2 A3(结果)：<ul><li>需要两个操作数的算术运算、逻辑运算等 (A1)OP(A2)-&gt;A3</li></ul></li><li>四地址指令 OP A1 A2 A3(结果) A4(下址)：<ul><li>A4为下一条指令要执行的地址</li><li>正常情况下，取指令之后PC+1，指向下一条指令；四地址指令将PC的值修改位A4所指地址</li></ul></li><li>扩展操作码 例题 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:26-17:10:05-image-20220614102910700.png" alt="image-20220614102910700" style="zoom:33%;" /></li></ul><h3 id="4-2-寻址"><a href="#4-2-寻址" class="headerlink" title="4.2.寻址"></a>4.2.寻址</h3><ul><li>指令寻址：始终由PC给出<ul><li>顺序寻址</li><li>跳跃寻址</li></ul></li><li>数据寻址<ul><li>0000 隐含寻址<ul><li>指令短，但是需要增加硬件</li></ul></li><li>0001立即寻址：指令中包含 操作数 本身<ul><li># + 补码</li></ul></li><li>0010 直接寻址</li><li>0011 间接寻址：指向一个主存单元，单元储存数据实际所在位置</li><li>0100 寄存器寻址：指向一个寄存器编号，寄存器储存数据实际所在位置<ul><li>指令短，执行块</li></ul></li><li>0101 寄存器间接寻址：指向一个寄存器编号，寄存器指向一个主存单元，单元储存数据实际所在位置</li><li>0110 相对寻址：以PC所指地址作为起点（相对下一条指令的偏移量）</li><li>0111 基址寻址：以程序起始地址（基址寄存器BR 或 通用寄存器）作为起点。<strong>偏移量可变</strong></li><li>1000 变址寻址：程序员自己决定起点。<strong>变址寄存器IX可变</strong><ul><li>此时IX视为偏移量，形式地址A视为基地址</li><li>一个累加应用例子 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:26-17:10:12-image-20220616001903251.png" alt="image-20220616001903251" style="zoom: 25%;" /></li></ul></li><li>1001 堆栈寻址</li></ul></li></ul><h3 id="4-3-机器数运算的标志位"><a href="#4-3-机器数运算的标志位" class="headerlink" title="4.3.机器数运算的标志位"></a>4.3.机器数运算的标志位</h3><ul><li>求A+B时，进位输出为1则CF=1；进位输出为0则CF=0</li><li>求A-B时，进位输出为1则CF=0；进位输出为0则CF=1</li></ul><h2 id="5-中央处理器"><a href="#5-中央处理器" class="headerlink" title="5.中央处理器"></a>5.中央处理器</h2><p align="center"><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:26-17:10:54-2022:06:26-17:10:50-image-20220618102023456.png" alt="image-20220618102023456" style="zoom:30%;" /> <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:26-17:11:01-image-20220618102234645.png" alt="image-20220618102234645" style="zoom:33%;" /></p><ul><li>PC存放指令<u>地址</u>，位数取决于<strong>存储器字数</strong></li><li>IR存放指令<u>内容</u>，位数取决于<strong>指令字长</strong></li><li>MAR、MDR位数：<strong>数据总线宽度</strong></li></ul><h3 id="5-1-CPU结构和功能"><a href="#5-1-CPU结构和功能" class="headerlink" title="5.1.CPU结构和功能"></a>5.1.CPU结构和功能</h3><ul><li>每执行完一条指令都检查中断</li><li>运算器内部结构 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:26-17:11:22-image-20220618181534785.png" alt="image-20220618181534785" style="zoom: 35%;" /></li><li>控制器内部结构 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:26-17:11:28-image-20220618181939729.png" alt="image-20220618181939729" style="zoom:30%;" /></li></ul><h3 id="5-2-指令执行过程"><a href="#5-2-指令执行过程" class="headerlink" title="5.2.指令执行过程"></a>5.2.指令执行过程</h3><ul><li><p>指令周期：<strong>取指周期 FE</strong> + [间址周期 IND] + <strong>执行周期 EX</strong> + [中断周期 INT]。单位「机器周期」，「机器周期」单位「时钟周期」</p><ul><li>每个指令周期内<strong>机器周期数可以不等</strong>，每个机器周期内的<strong>节拍数也可以不等</strong></li></ul></li><li><p>数据流</p><ul><li>取指 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:26-17:11:32-image-20220619074726782.png" alt="image-20220619074726782" style="zoom: 33%;" /></li><li>间址 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:26-17:11:35-image-20220619075028233.png" alt="image-20220619075028233" style="zoom:33%;" /></li><li>中断 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:26-17:11:38-image-20220619075527295.png" alt="image-20220619075527295" style="zoom:33%;" /></li></ul></li></ul><h3 id="5-3-数据通路"><a href="#5-3-数据通路" class="headerlink" title="5.3.数据通路"></a>5.3.数据通路</h3><ul><li><p>寄存器之间 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:26-17:11:45-image-20220619081902691.png" alt="image-20220619081902691" style="zoom: 40%;" /></p></li><li><p>主存与CPU <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:26-17:11:48-image-20220619082017895.png" alt="image-20220619082017895" style="zoom:40%;" /></p></li><li><p>算数或逻辑运算 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:26-17:11:51-image-20220619082345748.png" alt="image-20220619082345748" style="zoom:40%;" /></p><blockquote><p>例题：<code>ADD (R0) R1</code> 的指令和数据流</p><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:26-17:11:54-image-20220619083559671.png" alt="image-20220619083559671" style="zoom: 37%;" /></p></blockquote></li></ul><h3 id="5-4-控制器"><a href="#5-4-控制器" class="headerlink" title="5.4.控制器"></a>5.4.控制器</h3><ul><li><p>硬布线：取决于 指令操作码、目前的机器周期、节拍信号、机器状态条件</p><ul><li>微指令条件 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:26-17:11:58-image-20220619094015620.png" alt="image-20220619094015620" style="zoom: 33%;" /></li><li>可用于 RISC</li></ul></li><li><p>微程序</p><ul><li><p>如果某指令系统中有n条机器指令，则CM中微程序的个数至少是n+1个，<strong>微程序段</strong>的个数至少n个</p><blockquote><p>物理上，取指周期、执行周期看起来像是两个微程，但逻辑应该把它们看作一个整体。因此1条指令对应1个微程序的说法是正确的</p></blockquote></li><li><p>指令=<strong>微程序</strong> &gt; <strong>微指令</strong> &gt; 微命令=<strong>微操作</strong>。<code>ADD R0 R1</code> &gt; <code>C0</code> &gt; <code>(Z)-&gt;MDR</code></p></li></ul></li><li><p>微程序设计</p><ul><li><p>水平型：长指令，一堆功能一条指令干完</p><ul><li>微程序短，执行快，但编写麻烦</li><li><strong>字段直接编码</strong>：分段，互斥性微操作在一个段内，相容的微操作在不同段内。每个段留出000表示无操作</li><li><strong>字段间接编码</strong>：一个字段的某些微命令需由另一个字段中的某些微命令来解释 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:26-17:12:06-image-20220620075247556.png" alt="image-20220620075247556" style="zoom: 30%;" /></li><li>微地址形成方式：<ul><li><strong>下地址字段</strong> 指出：微指令中下地址字段直接指出。又称为<strong>断定方式</strong></li><li>由操作码经微地址形成部件形成</li><li><strong>增量计数器</strong>法：(CMAR)+1 -&gt; CMAR</li><li>分支转移：操作控制字段 + 转移方式(判别条件) + 转移地址(去向)</li><li>通过测试网络：地址低位由各种条件确定</li><li>硬件产生</li></ul></li></ul></li><li><p>垂直型：一个微指令只对应一个微操作</p><ul><li>简单规整便于编写，但执行慢</li></ul></li><li><p>混合型</p></li></ul></li><li><p>控制单元设计</p><ul><li>分析每个阶段的微操作序列</li><li>写出对应机器指令的微操作命令及节拍安排 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:26-17:12:10-image-20220620081417746.png" alt="image-20220620081417746" style="zoom:37%;" /></li><li>确定微指令格式：操作码 + 下地址</li><li>编写微指令码点</li></ul></li></ul><h3 id="5-5-流水线"><a href="#5-5-流水线" class="headerlink" title="5.5.流水线"></a>5.5.流水线</h3><ul><li><p>性能指标</p><ul><li>吞吐率：单位时间完成指令条数</li><li>加速比：不使用流水线与使用流水线所用时间之比</li><li>效率：流水线设备利用率，「设备使用时间占总时间的比率」。用时空图所占面积来算</li></ul></li><li><p>影响因素</p><ul><li>资源冲突「互斥」：多条指令在同一时间争用同一资源<ul><li>暂停相关指令</li><li>资源重复配置</li></ul></li><li>数据冲突「同步」<ul><li>硬件阻塞 stall</li><li>NOP空指令</li><li>数据旁路（数据在寄存器内转发，省去写回内存的过程）</li></ul></li><li>控制冲突<ul><li>分支预测</li><li>预取转移成功和不成功两个控制流方向上的目标指令</li><li>加快和提前形成条件码</li><li>提高转移方向的猜准率</li></ul></li></ul></li><li><p>分类</p><ul><li><p>部件功能级、处理机级、处理机间级</p><blockquote><p>部件功能级：将复杂的算术逻辑运算组成流水线，如 浮点数求阶差、对阶、尾数相加、结果规格化</p><p>处理机级：一条指令解释过程分成多个子过程，如 取指、译码、执行、访存及写回 五个过程</p><p>处理机间级：每一个处理机完成某一专门任务</p></blockquote></li><li><p>单功能流水线、多功能流水线</p></li><li><p>动态流水线、静态流水线</p></li><li><p>线性流水线、非线性流水线</p></li></ul></li><li><p>多发技术</p><ul><li>超标量：每个时钟周期内可并发<strong>多条独立指令</strong></li><li>超流水：<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:26-17:12:18-image-20220620093917471.png" alt="image-20220620093917471" style="zoom: 20%;" /></li><li>超长指令字：<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:26-17:12:22-image-20220620094158780.png" alt="image-20220620094158780" style="zoom:20%;" /> <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:26-17:15:21-image-20220620094243345.png" alt="image-20220620094243345" style="zoom:40%;" /></li></ul></li></ul><h2 id="6-总线"><a href="#6-总线" class="headerlink" title="6.总线"></a>6.总线</h2><h3 id="6-1-概念"><a href="#6-1-概念" class="headerlink" title="6.1.概念"></a>6.1.概念</h3><ul><li><p>分类</p><ul><li>按数据传输格式<ul><li>串行总线：抗干扰好，适用长距离传输，节省部件空间</li><li>并行总线：逻辑时序简单，电路实现容易，布线复杂，高频率时存在干扰</li></ul></li><li>按总线功能<ul><li>片内总线：CPU内</li><li>系统总线：数据、地址、控制</li><li>通信总线：计算机系统之间</li></ul></li><li>按时序控制方式<ul><li>同步总线</li><li>异步总线</li></ul></li></ul></li><li><p>经典结构</p><ul><li>单总线：使用<strong>一组</strong>总线连接所有设备</li><li>双总线：主存总线（<strong>支持突发传送</strong>）、IO总线</li><li>三总线：主存总线、IO总线、DMA总线<ul><li>高速外设效率提升，鼠标键盘响应变快，系统吞吐量提升</li><li>三个总线只能有一个在工作，系统工作效率较低</li></ul></li><li>桥接器：用于连接不同的总线，具有数据缓冲、转换和控制功能</li></ul></li><li><p>性能指标</p><ul><li>传输周期（<strong>总线周期</strong>）：申请、寻址、传输、结束</li><li>时钟周期：即机器的时钟周期</li><li>工作频率：总线周期 的倒数。1秒内传送几次数据</li><li>时钟频率：总线时钟周期 的倒数。1秒内有多少个时钟周期</li><li>宽度：数据总线的宽度</li><li>带宽：总线的数据传输率。1秒传输多少bit数据</li><li><p>信号线数：地址 + 数据 + 控制</p><blockquote><p>例：同步总线，数据线和地址线复用，地址/数据线有32根，总线时钟频率为66MHz，每个时钟周期传送两次数据（上升沿和下降沿各传送一次数据）</p><p><strong>1）</strong>该总线的最大数据传输率（总线带宽）是多少？</p><p>总线频率=2*66=132MHz</p><p>总线宽度=32bit=4B</p><p>带宽=132*4=528MB/s</p><p><strong>2）</strong>若该总线支持突发（猝发）传输方式，传输一个地址占用一个时钟周期，则一次“主存写”总线事务传输128位数据所需要的时间至少是多少？</p><p>一次总线事务中，主设备只需给出一个首地址，设备就能从首地址开始的若干连续单元读出或写入多个数据。</p><p>发送首地址占用1个时钟周期，128位数据需传输4次，占用2个时钟周期。</p><p>1个时钟周期=1/66MHz～15ns，总耗时=(1+2)*15=45ns</p></blockquote></li></ul></li></ul><h3 id="6-2-仲裁"><a href="#6-2-仲裁" class="headerlink" title="6.2.仲裁"></a>6.2.仲裁</h3><ul><li><p>集中仲裁</p><ul><li><p>链式查询：<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:26-17:12:33-image-20220621093137446.png" alt="image-20220621093137446" style="zoom: 40%;" /></p></li><li><p>计数器定时查询：<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:26-17:12:36-image-20220621093851290.png" alt="image-20220621093851290" style="zoom:40%;" /></p><ul><li>计数初始值可以改变优先次序；对n个设备需要 $log_2n+2$ 条控制线</li></ul></li><li><p>独立请求：各自有<strong>请求</strong>线和<strong>允许</strong>线，所有设备<strong>共用</strong>总线忙</p><blockquote><p>获得总线使用权的设备发出总线忙，而不是控制器</p></blockquote></li></ul></li><li><p>分布式仲裁</p><ul><li>请求总线时把自己的号发到总线上，优先级最高的获得响应</li></ul></li></ul><h3 id="6-3-操作和定时"><a href="#6-3-操作和定时" class="headerlink" title="6.3.操作和定时"></a>6.3.操作和定时</h3><ul><li>同步定时<ul><li>传送速度快，具有较高的传输速率；总线控制逻辑简单</li><li>主从设备强制性同步；不能及时进行数据通信的有效性检验，可靠性较差</li><li>适用于<strong>总线长度较短</strong>，总线所接部件的<strong>存取时间比较接近</strong>的系统</li></ul></li><li>异步定时<ul><li><strong>不互锁</strong>：主从设备的信号都自动撤销，不受对方控制</li><li><strong>半互锁</strong>：主设备等到从设备的「确认」后才会撤销「请求」。从设备自己撤销信号</li><li><strong>全互锁</strong>：主从设备都等到收到对方信号后才会撤销信号</li><li>周期可变，适用于速度差距大的设备。速度不如同步方式快</li></ul></li><li>半同步：统一时钟的基础上，增加一个“等待”响应信号 $\overline{WAIT}$</li><li>分离式： 分为两个周期，主模块申请占用总线、从模块传送信息<ul><li>各模块均有权申请占用总线</li><li>采用同步方式通信，不等对方回答</li><li>各模块准备数据时，不占用总线</li><li>总线利用率提高</li></ul></li></ul><h3 id="6-4-标准"><a href="#6-4-标准" class="headerlink" title="6.4.标准"></a>6.4.标准</h3><ul><li>概念<ul><li><strong>系统总线</strong>：通常与CPU直接相连，用于连接CPU与北桥芯片、或CPU与主存等</li><li><strong>局部总线</strong>：没有直接与CPU连接，通常是连接高速的北桥芯片，用于连接了很多重要的硬件部件（如显<br>  卡、声卡等）</li><li><strong>设备总线、通信总线</strong>：通常由南桥芯片控制，用于连接计算机与计算机，或连接计算机与外部/O设备</li></ul></li><li>系统总线：ISA、EISA(带宽翻倍)、FBS、QPI</li><li>局部总线：VESA(并行32位)、PCI、AGP(并行)、PCI-E(<strong>串行、全双工、热插拔</strong>)</li><li>设备总线：RS-232C(串行)、SCSI(并行)、PCMCIA、USB、ATA(硬盘)、SATA(串行)</li></ul><h2 id="7-I-O"><a href="#7-I-O" class="headerlink" title="7.I/O"></a>7.I/O</h2><h3 id="7-1-I-O系统基本组成"><a href="#7-1-I-O系统基本组成" class="headerlink" title="7.1.I/O系统基本组成"></a>7.1.I/O系统基本组成</h3><ul><li>三种方式<ul><li>程序查询：CPU等待</li><li>中断：每个字符都中断。不适合快速存储器如磁盘</li><li>DMA：Direct Memory Access</li></ul></li><li><p>DMA： <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:26-17:12:45-image-20220626164534580.png" alt="image-20220626164534580" style="zoom: 30%;" /></p><ul><li>CPU向DMA接口发出「读/写」命令，并指明<u>主存地址、磁盘地址、读写数据量</u>等参数。DMA完成一整块的读写才会发一次中断</li></ul></li><li><p>通道控制方式</p><ul><li>通道：特殊功能的处理器，对I/O设备进行统一管理 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:06:26-17:12:49-image-20220626165318471.png" alt="image-20220626165318471" style="zoom:30%;" /></li><li><p>适用于超多I/O设备的中型机、大型机</p><blockquote><ul><li><p>CPU向通道发出I/O指令，指明通道程序在内存中的位置、要操作的是哪个/O设备</p></li><li><p>通道执行内存中的通道程序，控制I/O设备完成一系列任务</p></li><li>通道执行完后发中断</li></ul></blockquote></li></ul></li><li><p>I/O软件</p><ul><li><p>I/O指令：CPU指令的一部分</p><ul><li>操作码+命令码+设备码</li><li>操作码指明了CPU要对IO接口做什么，命令码指明了IO接口要对设备做什么</li></ul></li><li><p>通道指令：<strong>通道程序</strong>提前编制好<strong>放在主存中</strong></p><ul><li>在含有通道的计算机中，CPU执行<strong>I/O指令</strong>对通道发出命令，由通道执行一系列<strong>通道指令</strong>，代替CPU管理设备</li></ul></li></ul></li></ul><h3 id="7-2-输出设备"><a href="#7-2-输出设备" class="headerlink" title="7.2.输出设备"></a>7.2.输出设备</h3><ul><li>VRAM最小显存：分辨率 * 灰度级位数</li><li>VRAM带宽 = 分辨率 <em> 灰度级位数 </em> 帧率</li><li>CRT<ul><li>字符显示器 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:07:02-16:04:26-image-20220628201743560.png" alt="image-20220628201743560" style="zoom: 33%;" /><ul><li>RAM存ASCII码。ROM存字形码，$m\times n$的矩阵</li></ul></li></ul></li></ul><h3 id="7-3-外存储器"><a href="#7-3-外存储器" class="headerlink" title="7.3.外存储器"></a>7.3.外存储器</h3><ul><li>磁盘组成<ul><li>存储区域<ul><li>磁头数：记录面的个数，多少面</li><li>柱面数：每一面盘片上有多少条磁道，多少圈</li><li>扇区数：每一条磁道上有多少个扇区，一圈多少块</li></ul></li><li>硬盘存储器<ul><li>磁盘驱动器：磁头+盘片组件</li><li>磁盘控制器：IO接口。SCSI、SATA等</li><li>盘片本体</li></ul></li></ul></li><li>磁盘性能指标<ul><li>容量：字节总数。分为非格式化容量和格式化容量</li><li>记录密度：盘片单位面积上记录的二进制的信息量<ul><li>道密度是沿磁盘<strong>半径</strong>方向<strong>单位长度上的磁道数</strong></li><li>位密度是<strong>磁道单位长度</strong>上能记录的二进制代码位数</li><li>面密度是位密度和道密度的<strong>乘积</strong></li></ul></li><li>平均存取时间：寻道(会给一个平均值) + 旋转延迟(算期望用半圈时间) + 传输 + [控制器延迟]</li><li>数据传输率：转数 * 磁道容量</li></ul></li><li>磁盘地址 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:07:02-16:04:26-image-20220629081025353.png" alt="image-20220629081025353" style="zoom: 33%;" /></li><li>RAID<ul><li>RAID 0：无冗余，无校验</li><li>RAID 1：镜像</li><li>RAID 2：海明吗纠错</li><li>RAID 3：位交叉奇偶校验</li><li>RAID 4：块交叉奇偶校验</li><li>RAID 5：无独立校验的奇偶校验</li></ul></li></ul><h3 id="7-4-I-O接口"><a href="#7-4-I-O接口" class="headerlink" title="7.4.I/O接口"></a>7.4.I/O接口</h3><ul><li>作用<ul><li>数据缓冲：通过数据缓冲寄存器达到主机和外设工作速度的匹配</li><li>错误或状态监测：通过状态寄存器反馈设备的各种错误、状态信息，供CPU查用</li><li>控制和定时：接收从控制总线发来的控制信号、时钟信号</li><li>数据格式转换：串并、并串等格式转换</li><li>与主机和设备通信：实现主机-I/O接口-I/o设备之间的通信</li></ul></li><li>结构原理<ul><li>结构图 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:07:02-16:04:26-image-20220629083454406.png" alt="image-20220629083454406" style="zoom:30%;" /></li><li>发命令：发送<strong>命令字</strong>到I/O控制寄存器，向设备发送命令（需要驱动程序的协助）</li><li>读状态：从状态寄存器读取<strong>状态字</strong>，获得设备或I/O控制器的状态信息</li><li>读/写数据：从数据缓冲寄存器发送或读取数据，完成主机与外设的数据交换</li><li>XX寄存器 有时称为 <strong>XX端口</strong></li></ul></li><li>I/O端口<ul><li>数据线：读写数据、状态字控制字、中断类型号</li><li>地址线：指明I/O端口</li><li>控制线：读/写IO端口的信号、中断请求信号</li></ul></li><li>分类<ul><li>统一编址：又称<strong>存储器映射方式</strong>。RISC常用<ul><li>优点：不需要专门的指令，编程灵活</li><li>缺点：主存地址空间变小。地址位数多，地址译码速度慢，外设寻址时间长</li></ul></li><li>独立编址：又称<strong>I/O映射方式</strong><ul><li>优点：不占用主存地址空间。译码快</li><li>缺点：需要CPU提供存储器读写和IO设备读写两组信号，控制复杂</li></ul></li></ul></li></ul><h3 id="7-5-中断方式"><a href="#7-5-中断方式" class="headerlink" title="7.5.中断方式"></a>7.5.中断方式</h3><ul><li><p>工作流程：</p><ul><li>中断请求</li><li>中断响应<ul><li>响应中断的条件（可以关中断）</li><li>中断判优（优先响应哪一个）</li></ul></li><li>中断处理 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:07:02-16:04:26-image-20220702140554594.png" alt="image-20220702140554594" style="zoom:30%;" /><ul><li>中断隐指令：<ul><li>关中断</li><li>保存断点（PC）</li><li>引出中断服务程序：软件查询 或 由<strong>硬件</strong>产生<strong>向量地址</strong>，再由<strong>向量地址</strong>找到<strong>入口程序</strong></li></ul></li><li>中断服务程序</li></ul></li></ul></li><li><p>多重中断 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:07:02-16:04:26-image-20220702143340772.png" alt="image-20220702143340772" style="zoom:30%;" /></p><ul><li><p>中断屏蔽字：一个方阵，可以被抢占设为1，不可以被抢占设为0。自身不可以被自身抢占</p><blockquote><p>一个例子：<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:07:02-16:04:26-image-20220702145307593.png" alt="image-20220702145307593" style="zoom:25%;" /></p></blockquote></li></ul></li></ul><blockquote><p>例题：<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:07:02-16:04:26-image-20220702150743918.png" alt="image-20220702150743918" style="zoom:30%;" /></p></blockquote><h3 id="7-6-DMA方式"><a href="#7-6-DMA方式" class="headerlink" title="7.6.DMA方式"></a>7.6.DMA方式</h3><ul><li>流程<ul><li>CPU向DMA控制器指明要<strong>输入还是输出</strong>；要传送<strong>多少个数据</strong>；数据在主存、外设中的<strong>地址</strong></li><li><strong>接受</strong>外设发出的<strong>DMA请求</strong>（外设传送一个字的请求），并向CPU<strong>发出总线请求</strong></li><li>CPU响应此总线请求，发出总线响应信号，接管总线控制权，进<strong>DMA操作周期</strong></li><li>确定传送数据的主存单元地址及长度，并能<strong>自动修改</strong>主存地址计数和传送长度计数</li><li>规定数据在主存和外设间的<strong>传送方向</strong>，发出读写等<strong>控制信号</strong>，执行数据传送操作。</li></ul></li><li>概念<ul><li>DMA请求：向主存传送一字节的数据</li><li>DMA中断请求：全传完了</li></ul></li><li>DMA与CPU共同使用主存的方式<ul><li>停止CPU访问主存：控制简单。但CPU对主存利用率不高</li><li>DMA与CPU交替访存：不需要总线使用权的申请、建立和归还过程。但硬件逻辑复杂</li><li>周期挪用(窃取)：不抢占。冲突时DMA优先</li></ul></li><li>与中断对比： <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:07:02-16:04:26-image-20220702155649076.png" alt="image-20220702155649076" style="zoom:30%;" /></li></ul>]]></content>
    
    
    <categories>
      
      <category>考研</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>图数据库调研报告</title>
    <link href="/blog/4211e3e3fc58/"/>
    <url>/blog/4211e3e3fc58/</url>
    
    <content type="html"><![CDATA[<h1 align='center'>图数据库调研报告</h1><h5 align='center'>2021-11-28</h5><p>我主要参考了<strong><em>《Demystifying Graph Databases: Analysis and Taxonomy of Data Organization, System Designs, and Graph Queries》</em></strong>这篇文章。它是2019年10月的一篇针对图数据库的综述，这篇综述本身引用了202篇参考文献，被引29次。文章中也提到，在这篇文章之前几乎没有专门针对图形数据库的系统方面的调查，只有几篇涵盖该领域小部分的简短论文(对几个系统、概念或技术的简要描述，对图处理质量的调查，以及几个系统的性能评估)。因此我主要解读这篇综述中对图数据库的介绍和总结，对其中的一些表述进行理解后的复述以及解释，并为了更好地说明图数据库基本特点对文章内容进行重新组合。</p><p>我选择的调研题目是图数据库的储存索引和查询优化。重点是各种图数据库类型分类以及它们的储存方式。储存方式的不同自然带来了不同的索引方式。索引方式各有千秋引出了查询的优化方案。</p><h1 align='center'><font size="6">目录</font></h1><p>点击相应目录可以直接跳转查看。</p><p>[TOC]</p><h1 id="1-储存"><a href="#1-储存" class="headerlink" title="1.储存"></a>1.储存</h1><p>论文中在对比了51个数据库后得到如下结论。</p><h2 id="1-1实现难点"><a href="#1-1实现难点" class="headerlink" title="1.1实现难点"></a>1.1实现难点</h2><ul><li>图的结构不规则，尺寸可能很大</li><li>处理过的图失去了局部性或者一些联系</li><li>图自身结构动态地变化且连接过于复杂</li><li>图的搜索遍历较为复杂，难以应对低延迟高吞吐量的需求</li><li>事务支持</li><li>与传统图数据结构算法不同，图数据结构算法通常是静态的和简单的数据，但是图数据库可能有丰富的附加数据如标签或键值对</li></ul><h2 id="1-2实现方法"><a href="#1-2实现方法" class="headerlink" title="1.2实现方法"></a>1.2实现方法</h2><ul><li>不使用表而使用边和顶点。尽管可以使用顶点和边组成的表，但是遍历查询等操作都依赖临界列表数组的存储方式。每个顶点的邻居可以通过连接到每个顶点的指针通过简单的内存查找来访问</li><li>数据结构分两种，原生图数据库或者使用其他数据库实现图的存储(宽列存储、文档存储和通用键值存储)</li><li>实现方式分两种，顶点和边可能属于不同的类型，并且可能与任意属性相关联；或者边或顶点可能具有权重或者有诸如时间戳之类的附加属性</li></ul><h2 id="1-3多种类别的图模型"><a href="#1-3多种类别的图模型" class="headerlink" title="1.3多种类别的图模型"></a>1.3多种类别的图模型</h2><p>图模型没有一个标准的概念，目前最流行的两个模型是RDF和LPG。RDF是一个定义明确的标准，但是它只支持简单的三元组(主体、谓词、客体)来表示从主语标识符通过谓词到客体的边。LPG允许顶点和边具有标签和属性，从而支持更自然的数据建模。尽管如此，它仍然不是标准化的，并且有许多变体。一些系统将标签的数量限制为只有一个。例如MarkLogicAllow允许顶点的属性，但不允许边的属性，因此可以将其视为LPG(顶点)和RDF(边)的组合。LPG模型中存储的数据可以转换为RDF。为了综合不同的LPG特性同时保持RDF的简单性等优点，一些研究人员提出并实现了对RDF的修改。例如三元组属性或将三元组附加到其他三元组。</p><p>在原生图形数据库中，虽然没有关注LPG的系统同时支持RDF，但一些RDF系统(例如Amazon Eptune)也支持LPG。许多其他类(KV值、文档储存、RDBMS、宽列储存、OODBMS)仅提供LPG(除了一些例外，例如oracle spatial and graph。后者建议使用相应的非图形数据模型(如文档集合)来表达LPG模型(比RDF模型)更容易。很少有系统既不使用RDF也不使用LPG。HyperGraphDB使用超图模型，而Gbase使用没有任何标签或属性的简单有向图模型。</p><p>在表示图结构时，许多图形数据库使用AL的变体，因为它使遍历邻域变得高效和简单。这包括基于LPG的原生图形数据库、KV存储、文档存储、宽列存储、元组存储和OODBMS类中的几个(但不是所有)系统。但是所考虑的RDF、RDBMS和数据中心系统都没有显式使用AL。这是因为底层数据模型的默认设计，例如RDBMS中的表或文档存储中的文档，并不经常使用AL。此外，绝大多数系统都没有使用未压缩的AM，因为它在$O(𝑛^2)$空间中的效率很低，特别是对于稀疏图。使用AM的系统侧重于压缩邻接矩阵来减少存储和查询开销(例如，GBASE)。在AL中效率低下的一个潜在原因是扫描所有的边来寻找给定顶点的邻居，为了缓解这一问题，可以采用索引结构。对于具有𝑛个顶点的图，这样的索引是指向各个邻域的指针数组，仅占用𝑂(𝑛)空间。</p><p>下面来详细介绍一下不同类型的图模型以及它们的特点。</p><h3 id="1-3-1简单图模型"><a href="#1-3-1简单图模型" class="headerlink" title="1.3.1简单图模型"></a>1.3.1简单图模型</h3><p>最简单的表示图的数据结构有邻接矩阵(AM)、邻接列表(AL)、边列表(EL)三种，它们都可以表示有向图或无向图。AM使用$O(n^2)$空间，可以在O(1)时间内检查两个顶点的连通性；AL占用O(𝑛+𝑚)空间，可以在$O(|𝐴𝑢|)⊆O(Degree_{max})$时间内检查连通性。</p><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:04:02-19:08:26-64f1dd9348ca3abff26e19083013d9e0_4_Figure_3.png" alt="img" style="zoom:33%;" /></p><h3 id="1-3-2超图模型"><a href="#1-3-2超图模型" class="headerlink" title="1.3.2超图模型"></a>1.3.2超图模型</h3><p>任意边可以连接任意个点。超图的每一个定点至少属于一条边，也可以属于一条封闭的曲线。形式上，超图表示为元组(𝑉，𝐸)，𝑉是这个超图模型中所有顶点，𝐸是超边的集合，每个超边使用一组点表示，它是V的一个非空子集。例如：$V=\{a,b,c,d,e,f,g\}，E=\{abc,cde,def,efg\}$。</p><p>超图在图形数据库和图处理系统中很少使用。HyperGraphDB的基本构建块是点和超边的每个值，都有自己唯一的ID以及区分顶点和边的标签。顶点和超边也有类型ID(即标签ID)，还有一个递归结构，这个递归结构可以可以是另一个递归结构或二进制数据的值ID。</p><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:04:02-19:08:26-64f1dd9348ca3abff26e19083013d9e0_19_Figure_11.png" alt="img" style="zoom:60%;" /></p><h3 id="1-3-3标记属性图-LPG"><a href="#1-3-3标记属性图-LPG" class="headerlink" title="1.3.3标记属性图(LPG)"></a>1.3.3标记属性图(LPG)</h3><p>经典的图模型tuple 𝐺=(𝑉，𝐸)对各种现实世界的问题进行建模还不够丰富，因此图形数据库经常使用标记属性图LPG(Label Property Graph Model，LPG)。每个顶点和边可以具有任意数量的属性。属性是一对(𝑘𝑒𝑦，𝑣𝑎𝑙𝑢𝑒)，其中Key标识属性，Value是该属性的相应值。</p><p>形式上，LPG被定义为元组$(𝑉ertex，𝐸dge，𝐿abel，𝑙_V，𝑙_E，𝐾ey，𝑊_{value}，𝑝_V，𝑝_E)$，其中𝐿是标签集，$L_V$和$L_E$分别代表V和E到L所有子集中某一个的一个映射因此，每个顶点和边都被映射到一个标号子集。顶点和边可以与任意数量的属性相关联，将属性建模为键-值对(𝑝=(𝑘𝑒𝑦，𝑣𝑎𝑙𝑢𝑒)，其中𝑘𝑒𝑦∈𝐾，𝑣𝑎𝑙𝑢𝑒∈𝑊。𝐾和𝑊是所有可能键和值的集合。$p_V$和$p_E$分别为获取某点和某边的属性键值对的集合的映射函数。</p><p>除了下文中要说的RDF系统或明确指出是其他系统外，下文要说到的所有系统实际上都使用LPG的某些变体。</p><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:04:02-19:08:26-64f1dd9348ca3abff26e19083013d9e0_6_Figure_4.png" alt="img" style="zoom:60%;" /></p><p>上图为一个社交网络的子图，其中一个人可以认识其他人、发布消息和评论其他人的消息。</p><h3 id="1-3-4-LPG变体"><a href="#1-3-4-LPG变体" class="headerlink" title="1.3.4 LPG变体"></a>1.3.4 LPG变体</h3><p>Neo4j支持任意数量的顶点标签，但是它只允许每条边有一个标签(称为边缘类型)；ArangoDB只允许每个顶点一个标签和每个边一个标签，这便于将顶点和边分离到不同的文档集合中。</p><p>形式上，它使用𝐺=(𝑉，𝐸，𝐿)表示，其中𝑉是顶点集，𝐸是边集。此定义下允许两个点通过具有不同标签的多条边连接。</p><h3 id="1-3-5资源描述框架RDF"><a href="#1-3-5资源描述框架RDF" class="headerlink" title="1.3.5资源描述框架RDF"></a>1.3.5资源描述框架RDF</h3><p>资源描述框架(RDF)是用于表示信息的规范集合。它是由万维网联盟(W3C)于1999年推出的，RDF规范的最新版本(1.1)于2014年发布。它的目标是实现一种简单的格式，允许在不同格式的数据之间轻松交换数据。它在描述不规则连接的数据时特别有用。</p><p>RDF模型的核心部分是一个三元组的集合。每个三元组由主体、谓词、客体组成，因此RDF数据库通常也称为三重存储。主语可以是标识符(称为统一资源标识符(URI))，也可以是空白节点(即虚拟标识符)。客体可以是URI、空白节点或值较为简单的文字。使用三元组可以将标识符与标识符连接或将标识符与文字连接。谓词使用另一个URI命名。</p><h4 id="Cray图引擎"><a href="#Cray图引擎" class="headerlink" title="Cray图引擎"></a>Cray图引擎</h4><p>Cray Graph Engine(CGE)是一个三元组存储，可以扩展到无数个RDF三元组。CGE不存储三元组而是存储四元组(4元组)，其中第四个元素是ID。因此，可以在一个CGE数据库中存储多个图。CGE中的四元组按照它们的谓词和它们所属的图的标识符进行分组。因此，对于一组这样的四元组，只需要存储具有子对象和对象的对。这些主体-客体对存储在哈希表中(每组一个哈希表)。由于每个主体和客体被表示为唯一的48位整数标识符(HURI)，因此可以将主体-客体对打包成12个字节并存储在32位无符号整数数组中，从而最终减少了所需的存储量。</p><h4 id="AllegroGraph和BlazeGraph"><a href="#AllegroGraph和BlazeGraph" class="headerlink" title="AllegroGraph和BlazeGraph"></a>AllegroGraph和BlazeGraph</h4><p>一些RDF存储允许显式地将属性附加到三元组。AllegroGraph允许在创建三元组时定义每个三元组的任意属性集，但是这些属性不可变。BlazeGraph是RDF的一种扩展，允许将三元组附加到三元组谓词。和普通的RDF类似，顶点可以使用三元组来存储标签和属性。但是与普通的RDF相比，使用RDF可以更自然地表示LPG边缘：边可以存储为三元组，边属性可以通过其他三元组链接到边三元组。</p><h3 id="1-3-6-LPG与RDF之间的转换"><a href="#1-3-6-LPG与RDF之间的转换" class="headerlink" title="1.3.6 LPG与RDF之间的转换"></a>1.3.6 LPG与RDF之间的转换</h3><p>要想在RDF模型中表示带标签的属性图需要把LPG顶点映射到URI，然后使用RDF三元组通过分别用RDF谓词和RDF对象表示属性键和属性值来将这些点与它们的LPG属性链接起来。</p><p>例如，对于具有ID vertex-id的顶点以及具有key property-key和value property-value的对应属性，可以创建一个RDF三元组(vertex-id、property-key、property-value)。类似地，可以通过为每个边赋予URI状态来表示RDF模型中的LPG图模型中的边并将边属性与类似于顶点的特定边链接起来：(边-id，属性-键，属性-值)。然后，必须使用两个三元组将每条边连接到其任意相邻顶点。最后，通过为顶点和边创建RDF三元组，LPG标签也可以以类似于属性的方式转换为RDF三元组使得谓词变成有标签的URI并包含该标签的字符串名。下图展示了将LPG图转换为RDF三元组的过程示例。</p><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:04:02-19:08:26-64f1dd9348ca3abff26e19083013d9e0_6_Figure_5.png" alt="img" style="zoom:50%;" /></p><p>如果所有顶点和边只有一个标签，则可以省略标签的三元组，并将标签与顶点或边名称一起存储在标识符中。如下图例子：</p><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:04:02-19:08:26-64f1dd9348ca3abff26e19083013d9e0_7_Figure_6.png" alt="img" style="zoom:50%;" /></p><p>将RDF数据转换为LPG模型更为复杂，因为RDF谓词(通常会转换为边)是URI。因此，从RDF图转换为LPG图时必须将边映射到顶点并链接这些顶点，否则得到的LPG图可能会断开。有几种方案用于这样的RDF到LPG转换，例如以增加图大小为代价导出二部LPG图。</p><h2 id="1-4非图底层的系统存储方案"><a href="#1-4非图底层的系统存储方案" class="headerlink" title="1.4非图底层的系统存储方案"></a>1.4非图底层的系统存储方案</h2><p>很多不是专门为图数据设计的数据库也可以储存图数据模型，包括使用键值对、文档和元组、关系和表以及对象的数据库。</p><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:04:02-19:08:26-64f1dd9348ca3abff26e19083013d9e0_10_Figure_7.png" alt="img" style="zoom:50%;" /></p><h3 id="1-4-1键-值对-key-value"><a href="#1-4-1键-值对-key-value" class="headerlink" title="1.4.1键-值对(key-value)"></a>1.4.1键-值对(key-value)</h3><p>键值存储是最简单的NoSQL存储方式。将数据存储为键-值对的集合，重点放在基于键的高性能和高度可伸缩的查找上。键和值的确切形式取决于特定的系统或应用程序。键可以是简单的(例如，URI或散列)，也可以是结构化的。值通常编码为字节数组，也就是说值的结构通常是无模式的。但是，键值存储还可以强加一些额外的数据布局从而构建无模式的值。根据键值存储的一般性质，可以有许多方式将图表示为KV值的集合。例如可以使用顶点标签作为键，将顶点的邻域编码为值。</p><h4 id="微软图引擎-Trinity"><a href="#微软图引擎-Trinity" class="headerlink" title="微软图引擎(Trinity)"></a>微软图引擎(Trinity)</h4><p>微软的图引擎是基于名为Trinity的分布式键值对。Trinity实现了全局可寻址的分布式RAM存储。在Trinity中，键称为cell ID，值称为cell(单元格)。一个cell可以保存不同数据类型的数据项，包括其他cell的ID。MS Graph Engine在Trinity KV存储层之上引入了一个图存储层，点存储在专用字段包含cell ID或ID的哈希值的cell中。与给定点𝑣相邻的边直接在v的cell中存储为𝑣邻域的ID列表。但是，如果边包含丰富的数据，则这样的边也可以和关联数据一起存储在单独的专用cell中。</p><h3 id="1-4-2文档-document"><a href="#1-4-2文档-document" class="headerlink" title="1.4.2文档(document)"></a>1.4.2文档(document)</h3><p>文档是一类文档存储的NoSQL数据库中的基本存储单元。这些文档存储在集合中多个文档集合构成一个数据库，使用所选的标准半结构化格式(例如JSON或XML)对文档进行编码。文档存储扩展了键值存储，因为文档可以被视为具有某种灵活模式的值。该模式由属性组成，其中每个属性都有一个名称以及一个或多个值。这样一个基于具有属性的文档允许各种值类型、键-值对存储和递归数据存储(属性值可以是列表或键值字典)</p><p>文档存储每个顶点都存储在一个顶点文档中。文档存储键值对的能力用于在相应的顶点文档中存储顶点标签和属性。然而，边存储的细节取决于系统：边可以存储在与每个边的源顶点对应的文档中，也可以存储在目的顶点的文档中。文档不会限制可以存储的键值，因此点和边可能具有不同的属性集。</p><h4 id="OrientDB"><a href="#OrientDB" class="headerlink" title="OrientDB"></a>OrientDB</h4><p>在OrientDB中，每个文档𝑑都有一个记录ID(RID)，由存储𝑑的文档集合的ID和偏移量(其在该集合中的位置)组成。文档之间的指针使用这些唯一的RID表示。orientDB引入了规则边和轻量级边。规则边存储在边的文档中，可以具有它们自己的相关键/值对(例如，对边缘属性或标签进行编码)。轻量级边则直接存储在相邻(源或目标)顶点的文档中。这样的边没有任何关联的键/值对。它们构造指向其他顶点的简单指针，并且它们被实现为文档RID。因此，顶点文档不仅存储顶点的标签和属性，还存储轻量级边的列表(作为与相邻顶点相关联的文档的RID的列表)，以及指向相邻规则边的指针列表(作为与这些规则边相关联的文档的RID的列表)。每条规则边都有指向存储源和目标顶点的文档的指针(RID)。每个点存储指向其传入和传出边的链接(RID)列表。</p><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:04:02-19:08:26-64f1dd9348ca3abff26e19083013d9e0_20_Figure_12.png" alt="img" style="zoom:33%;" /></p><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:04:02-19:08:26-64f1dd9348ca3abff26e19083013d9e0_20_Figure_13.png" alt="img" style="zoom:50%;" /></p><h4 id="ArangoDB"><a href="#ArangoDB" class="headerlink" title="ArangoDB"></a>ArangoDB</h4><p>ArangoDB将其文档保存为称为VelcyPack的二进制格式，这是JSON文档的压缩实现。文档可以存储在不同的集合中，并且具有key属性，该属性是给定集合中的唯一ID。与OrientDB不同，这些ID不是直接内存指针。为了保持图的特性，ArangoDB使用了点集合和边集合。前者是带有顶点文档的规则文档集合，顶点文档不存储关于相邻边的信息，这具有在添加或移除边时不必修改顶点文档的优点。边缘集合存储边缘文档。边缘文档有两个特定的属性：源和目的地，它们是与给定边连接的两个顶点相关联的文档的ID。ArangoDB的设计中有一个优化，可以防止读取顶点文档，并允许基于另一个边文档中的顶点ID直接访问一个边文档。这可以提高高速缓存效率，从而减少查询执行时间。</p><p>可以使用不同的文档集合来存储不同的边缘类型(例如，“Friend_of”或“Like”)。当检索以某种边类型为条件的边(例如，“Friend_of”)时，不必遍历整个邻接列表(所有“Friend_of”和“Like”边)，而是可以使用特定边缘类型(“Friend_Of”)的边缘来确定集合的目标。</p><h3 id="1-4-3元组-tuple"><a href="#1-4-3元组-tuple" class="headerlink" title="1.4.3元组(tuple)"></a>1.4.3元组(tuple)</h3><p>元组是元组存储的NoSQL存储方式的基础。元组存储是RDF存储的一种扩展：RDF存储被限制为三元组，而元组存储可以包含任意大小的元组。元组中的元素数量不是固定的，甚至在单个数据库中也是可以变化的。每个元组都有一个ID，该ID可以是直接指向内存的指针。元组的集合可以以不同的方式对图形建模。例如，一个大小为𝑛的元组可以存储指向包含顶点邻域的其他元组的指针。这种元组和图形数据之间的具体映射方式取决于不同的数据库。</p><h4 id="WhiteDB"><a href="#WhiteDB" class="headerlink" title="WhiteDB"></a>WhiteDB</h4><p>WhiteDB是一个元组存储，它允许分配任意元组长度以外的新记录(元组)。一些小的值和指向其他元组的指针直接存储在固定位置中，大型字符串保存在单独的存储区中。每个大值只存储一次，引用计数器随时跟踪引用它的元组的数量。WhiteDB只允许访问单个元组记录，例如，没有更高级的查询引擎或图形API允许执行获取另一个顶点的所有邻居的查询。但是可以使用元组作为顶点和边存储，通过内存指针将它们彼此链接起来。这有助于快速解析关于WhiteDB中任意不规则图形结构的各种查询。例如，可以将具有其属性的顶点𝑣存储为与𝑣相关联的元组中的连续字段，并在𝑣的元组中维护指向𝑣的选定邻域的指针。</p><h3 id="1-4-4表-table"><a href="#1-4-4表-table" class="headerlink" title="1.4.4表(table)"></a>1.4.4表(table)</h3><p>表是关系数据库管理系统(RDBMS)的基础。表由行和列组成，每行表示单个数据元素，单个列通常定义特定的数据属性。某些列可以定义数据元素的唯一ID，称为主键，可用于实现数据元素之间的关系。一对一或一对多关系可以用包含相关数据元素的主键副本(外键)的单个附加列来实现。可以使用包含相关数据元素的外键的专用表来实现多对多关系。</p><p>要将图建模为表的集合，可以将顶点和边实现为两个独立表中的行。每个顶点都有一个构成其ID的唯一主键。边可以通过以其外键形式引用它们的主键从而与它们的源顶点或目标顶点相关。LPG标签和属性以及RDF谓词可以用附加的列建模。</p><p>DBMS有两种类型：列RDBMS(不要与宽列存储混淆)和行RDBMS(也称为面向列或列和行)。它们在物理数据持久性方面有所不同。行RDBMS将表行存储在连续的内存块中。ColumnRDBMS连续存储表列。行RDBMS在只需要检索几行但需要检索它的所有列时效率更高，而列RDBMS在需要检索许多行但只需要几列时效率更高。使用RDBMS作为后端的图形数据库解决方案同时使用行RDBMS(例如，Oracle Spatialand Graph，基于MariaDB构建的OQGRAPH)和列RDBMS(例如，SAP HANA)。</p><h4 id="Oracle-Spatial-and-Graph"><a href="#Oracle-Spatial-and-Graph" class="headerlink" title="Oracle Spatial and Graph"></a>Oracle Spatial and Graph</h4><p>Oracle Spatial and Graph建立在Oracle数据库之上，它为图数据的管理和分析提供了一套丰富的工具。Oracle Spatial and Graph附带了一系列内置的并行图算法(例如，用于寻径、遍历、链接预测、PageRank等)。LPG和RDF模型均受支持。行的RDBMS表构成顶点，这些行之间的关系形成边。关联的属性和属性以键-值对的形式存储在单独的结构中。</p><h3 id="1-4-5对象-object"><a href="#1-4-5对象-object" class="headerlink" title="1.4.5对象(object)"></a>1.4.5对象(object)</h3><p>还可以使用面向对象的数据库管理系统(OODBMS)中的对象集合来建模图形。数据元素及其关系通过某种形式的指针链接的对象来实现。将图建模为对象的细节在很大程度上取决于特定的设计。</p><h4 id="VelocityGraph"><a href="#VelocityGraph" class="headerlink" title="VelocityGraph"></a>VelocityGraph</h4><p>VelocityGraph是依赖于VelocityDB分布式对象数据库的图形数据库。它的边、顶点以及边或顶点属性存储在包含对其他对象的引用的C#对象中。为了处理这种结构，VelocityGraphy引入了VertexType、EdgeType和PropertyType等抽象概念。每个对象都有一个指向它物理存储位置的唯一id。每个顶点和边都有一个类型(标签)，属性存储在字典中，点将相邻边储存在集合中。</p><h3 id="1-4-6宽列储存"><a href="#1-4-6宽列储存" class="headerlink" title="1.4.6宽列储存"></a>1.4.6宽列储存</h3><p>宽列存储结合了键值存储和关系表的不同功能。宽列存储将键映射到行(将键映射到值的KV存储)。每行可以有任意数量的cell，并且每个cell构成一个键-值对。因此，一行包含cell键到cell值的映射，有效地使宽列存储成为二维KV值(行键和cell键都标识特定值)。此外，宽列存储是一个表，其中cell键构成列名。但是与关系型数据库不同，同一表中的行之间的列名称和格式可能不同。</p><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:04:02-19:08:26-64f1dd9348ca3abff26e19083013d9e0_21_Figure_14.png" alt="img" style="zoom:60%;" /></p><h4 id="Titan-and-JanusGrap"><a href="#Titan-and-JanusGrap" class="headerlink" title="Titan and JanusGrap"></a>Titan and JanusGrap</h4><p>Titan及其后续的JanusGraph建立在宽列储存之上。它们可以使用不同的宽列存储作为底层，例如Apache Cassandra。在这两个系统中，当存储图时，每行代表一个顶点。每个顶点属性和相邻边都存储在单独的单元中，因此一个边和该边的所有属性被编码在单个单元中。由于每行中的cell是按cell键排序的，因此此排序顺序可用于高效地查找cell。对于图，属性和边的cell键的选择是这样的：在对cell进行排序后，存储属性的cell首先出现，然后是包含边的cell。由于行是按键排序的，因此两个系统都会直接将表划分为所谓的平面，这些平面可以分布在多个数据服务器上。</p><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:04:02-19:08:26-64f1dd9348ca3abff26e19083013d9e0_21_Figure_14.png" alt="img" style="zoom:60%;" /></p><h2 id="1-5原生图数据库系统"><a href="#1-5原生图数据库系统" class="headerlink" title="1.5原生图数据库系统"></a>1.5原生图数据库系统</h2><h3 id="1-5-1-直接指针"><a href="#1-5-1-直接指针" class="headerlink" title="1.5.1 直接指针"></a>1.5.1 直接指针</h3><h4 id="Neo4j"><a href="#Neo4j" class="headerlink" title="Neo4j"></a>Neo4j</h4><p>Neo4j是最流行的图数据库系统。Neo4j使用基于固定大小记录的存储设计实现LPG模型。顶点𝑣由顶点记录表示，该记录存储：(1)𝑣的标签、(2)指向𝑣属性的链表的指针、(3)指向与𝑣相邻的第一边的指针、(4)一些标志。边𝑒由边记录来表示，该边记录存储：(1)𝑒的sedge类型(标签)、(2)指向𝑒属性的链表的指针、(3)指向表示与𝑒相邻的顶点的两个顶点记录的指针、(4)指向两个相邻顶点的AL的指针、(5)一些标志。每个属性记录最多可以存储四个属性，具体取决于属性值的大小：大的值(例如，长字符串)存储在单独的动态存储中，在顶点和边记录之外允许记录一些较小的属性。此外，如果查询中没有访问任何属性，则根本不会加载它们。</p><p>顶点的AL的实现为双向链表。一条边只存储一次，但它是两个这样的链表的一部分(每个相邻顶点一个列表)。因此，一条边有两个指向前一条边的指针和两个指向下一条边的指针。两个顶点由一条“知道”边链接。两个顶点都维护属性的链接列表。边是两个双向链表的一部分，每个相邻顶点一个链表。</p><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:04:02-19:08:26-64f1dd9348ca3abff26e19083013d9e0_22_Figure_16-16380682153473.png" alt="img" style="zoom:40%;" />   <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:04:02-19:08:26-64f1dd9348ca3abff26e19083013d9e0_23_Figure_17-16380682153474.png" alt="img" style="zoom:45%;" /></p><p>Neo4j中的一个核心概念是使用直接指针：顶点存储指向其邻居的物理分配的指针。因此，对于邻域查询或遍历，不需要索引，而是可以跟随直接指针(遍历中的根顶点除外)，因此查询复杂度不依赖于图的大小。相反，它只取决于被访问的子图有多大（也就是说，如果内存放不下整个图，那么执行速度基本取决于缓存和预取，运行时间可能显著增加）。</p><h3 id="1-5-2-B-树和位图"><a href="#1-5-2-B-树和位图" class="headerlink" title="1.5.2 B+树和位图"></a>1.5.2 B+树和位图</h3><h4 id="Sparksee-DEX"><a href="#Sparksee-DEX" class="headerlink" title="Sparksee/DEX"></a>Sparksee/DEX</h4><p>Sparksee是一个图数据库系统，以前称为DEX。Sparksee的顶点和边(都称为对象)都有唯一的ID。对于每个属性名称，都有一个关联的B+树，它将顶点和边ID映射到各自的属性值。从属性值到顶点和边ID的反向映射由位图维护，其中位设置为1表示对应的ID具有某个属性值。此外，每个顶点存储了表示输入边和输出边的两个位图，两个B+树维护有关边连接到哪些顶点的信息(每个边方向一个树)。</p><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:04:02-19:08:26-64f1dd9348ca3abff26e19083013d9e0_23_Figure_18.png" alt="img" style="zoom:60%;" /></p><p>Sparksee是少数几个不基于记录的系统之一，它使用简化为B+树和位图。位图的使用允许以比特为单位执行某些操作。例如，如果要查找具有特定属性值的所有顶点，如“age”和“First Name”，只需找到与“age”和“First Name”属性相关联的两个位图，然后得到第三个位图，该位图是对这两个输入位图应用按位“与”运算的结果。</p><p>未压缩的位图可能会大的离谱。由于大多数图都是稀疏的，按顶点或边索引的位图大多包含零。可以把它们切割成32位簇来缩小这种稀疏位图的尺寸。如果簇包含非零位，则显式存储该位。这个位图然后由(簇-ID，位-数据)对的集合表示。这些对存储在排序树结构中，以实现高效的查找、插入和删除。</p><h3 id="1-5-3稀疏邻接矩阵"><a href="#1-5-3稀疏邻接矩阵" class="headerlink" title="1.5.3稀疏邻接矩阵"></a>1.5.3稀疏邻接矩阵</h3><h4 id="GBASE"><a href="#GBASE" class="headerlink" title="GBASE"></a>GBASE</h4><p>GBASE是一个只能表示有向图结构的系统，它既不存储属性，也不存储标签。GBASE的目标是保持图的邻接矩阵的压缩，这样就可以有效地检索选定顶点的所有输入和输出边，而不会产生令人望而却步的$𝑂(𝑛^2)$矩阵存储开销。同时，利用邻接矩阵可以在𝑂(1)时间内验证任意两个顶点是否连通。为了压缩邻接矩阵，GBASE将其切割成$𝐾^2$个块(每行和每列都有𝐾块)。因此，获取每个顶点的传入和传出邻居的查询只需要查询𝐾个块。可以针对特定数据库优化参数𝐾。当𝐾变小时，就必须检索更多的小文件。如果𝐾变大，文件会变少，但它们会变得更大，从而产生开销。当块只包含0或只包含1时，可以进行进一步的优化，这样可以实现更高的压缩率。</p><h1 id="2-索引"><a href="#2-索引" class="headerlink" title="2.索引"></a>2.索引</h1><p>大多数图形数据库系统都建立在现有的存储设计之上，包括键值存储、宽列存储、关系型数据库管理系统等，使用现有存储设计的优点是这些系统通常是成熟的和经过良好测试的。缺点是它们可能没有针对图形数据和图形查询进行完美优化。这就是原生图数据库试图解决的问题。</p><p>大多数图数据库系统都使用索引。然而，它们的确切目的在不同的系统之间差别很大。一般来说索引可以分为四类：存储顶点邻域的位置(称为“邻域索引”)，存储丰富图数据的位置(称为“数据索引”)，存储实际的图数据，以及维护与图形无关的数据(称为“结构索引”)。</p><h2 id="2-1索引的数据结构"><a href="#2-1索引的数据结构" class="headerlink" title="2.1索引的数据结构"></a>2.1索引的数据结构</h2><p>与键值存储的情况一样，所研究的图形数据库使用的记录可以是非结构化的(即，不具有诸如JSON的预先指定的格式)。它们也可以是结构化的：文档数据库通常使用JSON格式，宽列存储在每行中有一个键-值映射，面向行的RDBMS将每行分成列，OODBMS强加一些类定义，元组存储以及一些RDF存储使用元组。数据布局的细节(即顶点和边是如何在记录中精确表示和编码的)在不同的系统类中可能会有所不同。一些结构化系统仍然能够在其记录中实现高度灵活的结构。例如，使用JSON或宽列存储(如Titanand JanusGraph)的文档数据库允许为每个顶点和边提供不同的键值映射。其他基于记录的系统在其结构上更加固定。例如，在OODBMS中，必须为顶点和边属性的每个配置定义一个类。在RDBMS中，必须为每个顶点或边类型定义表。总体而言，这些系统中的大多数使用记录来存储顶点，最常见的情况是每条记录对应一个顶点。一些系统将边存储在单独的记录中，另一些系统将它们与相邻的顶点一起存储。如果要查找特定顶点的属性，则必须找到包含该顶点的记录，搜索属性或者直接存储在记录中，或者可以通过指针访问其位置。</p><p>一些系统(例如，Sparksee、一些三元组存储或面向列的RDBMS)不在专用记录中连续存储有关顶点和边的信息。相反，它们为每个属性或标签维护单独的数据结构。因此，关于给定顶点的信息分布在不同的结构上。如果想要找到某个特定顶点的属性，就必须在相关的数据结构(索引)中查询该属性，并找到给定顶点的值。这种使用的索引结构的示例是B+树(在Sparksee中)或哈希表(在某些RDF系统中)。</p><p>图数据结构的另一个方面是设计记录之间的邻接关系。可以为每条记录分配一个ID，然后通过ID将记录相互链接，或者可以使用直接内存指针。使用ID需要索引结构来查找物理存储与特定ID关联的记录的地址。直接内存指针不需要索引即可从一条记录遍历到其相邻记录。但是此时仍可使用索引，例如检索具有特定属性值的点，此情况下直接指针仅有助于解决折点之间的邻接查询。</p><p>有时，图形数据直接存储在索引中。三元组存储将索引用于主体、谓词和客体的各种排列，以高效地回答查询。Jena TBD将大量数据存储在这些索引中，但本身没有三元表，因为索引已经存储了所有必要的数据。HyperGraphDB使用键值索引(即Berkeley DB)来访问其物理存储。此外，该方法允许与引用计数共享基元数据值，从而使得多个相同的值仅存储一次。</p><p>也有一些其他数据布局优化。例如，CGE优化了存储来自其三元组/四元组的字符串的方式。考虑到许多三元组/四元组可能共享字符串，每个三元组/四元组存储多个长字符串的效率很低。因此，类似于许多其他RDF系统，CGE维护一个将字符串映射到唯一的48位整数标识符(HURI)的字典。为此，使用了两个分布式哈希表(一个用于将字符串映射到HURI，另一个用于将HURI映射到字符串)。加载时，对字符串进行排序，然后将其分配给HURI。这允许整数比较(等于、大于、小于等)以代替更昂贵的字符串比较。该方法被例如诸如WhiteDB的元组存储使用。</p><h2 id="2-2邻域索引类型"><a href="#2-2邻域索引类型" class="headerlink" title="2.2邻域索引类型"></a>2.2邻域索引类型</h2><p>主要用于加速邻接表的访问，以加速遍历查询。这种索引称为为以顶点为中心的索引。虽然允许每个顶点有多个以顶点为中心的索引，每个索引都针对不同的条件进行了优化，然后由查询优化器选择不同的条件，但也存在更简单的解决方案。LiveGraphs使用两级层次结构，在指向实际物理存储之前，第一级通过它们的标签来区分边。Graphflow将顶点的邻居索引到前向和后向邻接列表中，其中每个列表首先按边标签划分，然后按邻居顶点的标签划分。另一个例子是Sparksee，它使用各种不同的索引结构来查找相邻顶点和顶点的属性。</p><h2 id="2-3数据索引类型"><a href="#2-3数据索引类型" class="headerlink" title="2.3数据索引类型"></a>2.3数据索引类型</h2><p>这种索引主要是为了处理邻域信息以外的数据。例如，可以索引具有特定属性(值)的所有顶点。它们通常用于加速业务智能工作负载。许多三元组存储，例如AllegroGraph，都提供主体(S)、谓词(P)和客体(O)的全部六种排列，以及附加的聚合索引。然而，为了降低相关成本，也存在其他方法：TripleBit仅使用具有两个聚合索引(SP，SO)和两个辅助索引结构的两个排列(PSO，POS)。GStore在两种索引结构的帮助下实现了模式匹配查询：VS*树，这是一种专门的B+树，以及基于TRIE的T索引。一些数据库系统，如AmazonNeptun或AnzoGraph只提供隐式索引，但仍然可以高效地应对所有类型的查询。大多数图数据库系统都允许用户显式定义索引。其中一些系统，如Azure Cosmos DB，对于更具体的用例支持复合索引(不同标签/属性的组合)，除了内部索引之外，一些系统还使用外部索引工具。例如，Titan和JanusGraph使用内部索引进行基于标签和值的查找，但依赖外部索引后端进行涉及多个属性、范围或全文搜索的重要查找。</p><p>根据数据索引的实现方式进一步对其进行分类。用于实现这些索引的三种基本数据结构：树、跳跃表和哈希表。根据表中的标准对系统进行分类。可以发现索引类型和图形数据库的后端之间没有明确的联系，但是大多数系统使用基于树的索引。</p><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:04:02-19:08:26-64f1dd9348ca3abff26e19083013d9e0_29_Table_5.png" alt="img" style="zoom:60%;" /></p><p>数据通常存储在数据结构中。当这些数据结构变得更加复杂时，一些图形数据库选择使用结构化索引来增强其设计。其他系统中的LiveGraph使用顶点索引将其顶点ID映射到物理存储位置。同样，ArangoDB多次使用混合索引、哈希表来查找顶点的关联边和相邻顶点的文档。</p><h1 id="3-优化"><a href="#3-优化" class="headerlink" title="3.优化"></a>3.优化</h1><p>基于记录的系统通常为需要检索关于顶点或边的全部或大部分信息的查询提供更高的性能，因为所需的数据存储在连续的内存块中，所以效率更高。在将数据存储在索引中的系统中，查询每个属性的数据结构会导致更多的随机访问模式。如果只想检索有关顶点或边的单个属性，这样的系统可能只需要检索单个值。而许多基于记录的系统不能仅检索部分记录，会获取更多不必要的数据。</p><p>此外，决定是否使用ID或直接内存指针来链接记录取决于给定系统的工作负载的读/写比率。在前一种情况下，必须使用索引结构来查找记录的地址。与紧随其后的直接指针相比，这会降低读取查询的速度。但是，使用ID而不是指针可以提高写查询的效率。例如，当必须将记录移动到新地址时，所有指向这条记录的指针都需要更新来映射到新地址，ID可以保持不变，只有索引结构需要修改给定记录的地址。</p><p>对于更新图的事务性工作负载，基于非图数据模型(例如文档存储或宽列存储)的系统通常获得更高的性能。相反，只读工作负载(包括简单分析和全局分析)通常在原生图数据库上实现更高的性能。全局分析尤其受益于确保单个查询并行化的原生图数据库。</p><h2 id="3-1将数据划分为记录"><a href="#3-1将数据划分为记录" class="headerlink" title="3.1将数据划分为记录"></a>3.1将数据划分为记录</h2><p>图形数据库通常将数据组织成称为记录的小单元，一条记录包含关于特定单个实体(例如：一个人)的信息，该信息被组织成指定的逻辑字段(例如：名字、姓氏等)。一定数量的记录通常一起保存在内存或磁盘中的一个连续盘块中，以增强数据访问局部性。基于记录的数据组织的细节在很大程度上取决于特定的系统。例如，关系型数据库可以将表行视为记录，键值存储通常在单个记录中维护单个值，而在文档存储中，单个文档可以是记录。一些系统允许可变大小的记录(例如：ArangoDB)，而其他系统仅允许固定大小的记录(例如：Neo4j)。可以观察到，虽然一些系统(例如：一些三元组存储如CrayGraph engine)没有显式提到记录，但是数据仍然可以隐式地以基于记录的方式组织起来。</p><p>图形数据库通常每个顶点使用一条或多条记录(这些记录有时被称为顶点记录)。Neo4j对顶点使用多个固定大小的记录，而文档数据库对每个顶点使用一个文档(例如：ArangoDB)。边有时与相关联的(源或目标)顶点(例如：Titan或JanusGraph)一起存储在同一记录中。否则，边存储在单独的边记录中(例如：ArangoDB)。</p><h2 id="3-2在索引结构中存储数据"><a href="#3-2在索引结构中存储数据" class="headerlink" title="3.2在索引结构中存储数据"></a>3.2在索引结构中存储数据</h2><p>图数据库通常使用索引来加快查询速度。基于非图形后端的系统(例如RDBMS或文档存储)通常依赖于此类系统中原本的索引方法。原生图形数据库对每个顶点的邻域采用索引结构，通常采用直接指针的形式。</p><p>除了使用索引结构来维护数据的位置之外，一些数据库还将图形数据存储在索引本身中。在这种情况下，索引不指向特定的数据记录，但索引本身包含所需的数据。具有此类功能的示例系统有Sparksee/DEX和Cray Graph Engine。为了维护索引，前者使用位图和B+树，而后者使用哈希表。</p><h2 id="3-3使用轻量级边的数据结构"><a href="#3-3使用轻量级边的数据结构" class="headerlink" title="3.3使用轻量级边的数据结构"></a>3.3使用轻量级边的数据结构</h2><p>某些系统(例如：OrientDB)允许将没有标签或属性的边存储为轻量级边。这样的边存储在对应的源顶点和(或)目的顶点的记录中。这些轻量级边由其目标顶点的ID或指向此顶点的指针表示。这可以节省存储空间并加速解决不同的图查询，例如验证两个顶点的连通性。</p><h2 id="3-4将记录与直接指针链接"><a href="#3-4将记录与直接指针链接" class="headerlink" title="3.4将记录与直接指针链接"></a>3.4将记录与直接指针链接</h2><p>在基于记录的系统中，顶点和边存储在记录中。为了能够有效地解决连通性查询(即，验证两个顶点是否连接)，这些记录必须指向其他记录。可以存储指向相应连接记录的直接指针(即存储器地址)。例如，边记录可以存储指向具有相邻顶点的顶点记录的直接指针。还可以为每个记录分配一个唯一的ID，并使用这些ID而不是直接指针来引用其他记录。这虽然需要额外的索引结构来根据记录ID查找记录的物理位置，但是如果物理位置改变，更新索引结构通常比更改所有关联的直接指针更容易。</p><p>可以给一个系统使用直接指针来避免维护额外的专用索引结构来遍历图形。注意索引仍可用于查找顶点；使用直接指针意味着只有邻接数据的结构没有附加索引。使用直接指针避免了额外的索引遍历从而可以加速图的遍历。但是当需要更新邻接数据时，通常也需要更新大量指针，从而产生额外的开销。</p><h2 id="3-5支持并发性和并行性"><a href="#3-5支持并发性和并行性" class="headerlink" title="3.5支持并发性和并行性"></a>3.5支持并发性和并行性</h2><p>几乎所有的图数据库系统都支持并发查询，但在几乎所有的系统类中，支持并行查询执行的系统却较少(除了基于OODBMS的图形数据库)。这表明更多的数据库将更多的压力放在单位时间内执行的查询的高吞吐量上，而不是降低单个查询的延迟上。一个值得注意的例外是Cray图引擎，它不支持并发查询，但它确实提供了单个查询的并行化。</p><p>查询并发的方法之一是不同类型的锁。例如，WhiteDB使用读写锁提供数据库范围的锁定，从而支持并发读取器，但一次只能有一个写入操作。还可以自动更新元组字段(设置、比较和设置、添加)作为锁定整个数据库的替代方法。WhiteDB本身不强制一致性，它取决于用户正确使用锁和原子性。另一种方法是基于事务的，例如由OrientDB使用，它为分布式事务提供ACID。</p><p>一些支持并行查询执行的系统在执行这种并行化查询时明确地优化了通信的数据量。例如，CGE中的计算分布在参与的进程中。为了最大限度地减少所有对所有的通信量，查询结果在本地聚合，并且只要有可能，每个进程只与少数几个对等点通信以避免网络拥塞。微软图引擎和Trinity数据库的底层实现使用的另一种简化通信的方法是减小进程交换的数据块的大小。为此，Trinity维护特殊的访问器，允许访问单元格中的单个属性而无需加载整个单元格，这降低了许多不需要整个单元的操作的I/O成本。几个系统共享的单边通信，使得进程能够直接访问彼此的数据。例如，Trinity可以部署在InfiniBand上利用远程直接内存访问。类似地，Cray的底层实现使多个计算节点的内存资源可以作为单个全局地址空间使用，也支持CGE中的单边通信。这便于在分布式环境中进行并行编程。</p>]]></content>
    
    
    <categories>
      
      <category>课程作业</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>线代概率论</title>
    <link href="/blog/7c3c0015918e/"/>
    <url>/blog/7c3c0015918e/</url>
    
    <content type="html"><![CDATA[<h1 align="center">线代概率论</h1><p>[TOC]</p><h1 id="线代"><a href="#线代" class="headerlink" title="线代"></a>线代</h1><h2 id="一、行列式"><a href="#一、行列式" class="headerlink" title="一、行列式"></a>一、行列式</h2><ul><li><p>余子式：$M_{ij}$，不带正负号；代数余子式：$A_{ij}$，带正负号</p><ul><li>某行余子式计算，直接按系数换掉那一行</li></ul></li><li><p>范德蒙行列式：$\left|\begin{array}{cccc}1 &amp;1&amp;\cdots&amp;1 \\x_1&amp;x_2&amp;\cdots &amp;x_n\\x_1^2&amp;x_2^2&amp;\cdots &amp;x_n^2\\\vdots&amp;\vdots&amp;&amp;\vdots\\x_1^{n-1}&amp;x_2^{n-1}&amp;\cdots &amp;x_n^{n-1}\\ \end{array}\right|=\underset{1\le i&lt;j\le n}{\Pi}(x_j-x_i)$ </p></li><li>计算<ul><li>爪形：==斜爪消横爪== <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020153683.png" alt="image-20220311095320748" style="zoom:20%;" /></li><li>异爪形 ：==递推n阶(从指甲尖开始)== <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020153685.png" alt="image-20220311095302450" style="zoom:20%;" />    <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020153686.png" alt="image-20220311095412950" style="zoom:25%;" /></li><li>行(列)和相等（每行元素换个位置）：==所有列加到第一列，所有行减去第一行== <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020153687.png" alt="image-20220311100334670" style="zoom:25%;" /></li><li>拉普拉斯展开：==行列变换化为分块矩阵== <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020153688.png" alt="image-20220311101656567" style="zoom:25%;" /></li><li>范德蒙行列式</li></ul></li></ul><h2 id="二、矩阵"><a href="#二、矩阵" class="headerlink" title="二、矩阵"></a>二、矩阵</h2><h3 id="1-性质"><a href="#1-性质" class="headerlink" title="1.性质"></a>1.性质</h3><ul><li>$\begin{cases}(A+\boldsymbol{B})^T&amp;=&amp;A^T+\boldsymbol{B}^T\\ (\boldsymbol{AB})^T&amp;=&amp;\boldsymbol{B}^TA^T\\ |\boldsymbol{A_{n\times n}}^T|&amp;=&amp;|\boldsymbol{A_{n\times n}}|\end{cases}$ </li><li>施密特正交化 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020153689.png" alt="image-20220311231044096" style="zoom: 40%;" /> <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020153690.png" alt="image-20220311231115416" style="zoom: 40%;" /> </li><li>$A^TA=E$，则正交。其向量组是标准正交向量组。<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020153691.png" alt="image-20220312064436764" style="zoom: 33%;" /></li><li>分块矩阵 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020153692.png" alt="image-20220312064925270" style="zoom:40%;" /></li><li><strong>实对称阵</strong>的特征向量<strong>互相正交</strong></li><li><strong>$A^TAx=0$与$Ax=0$同解！</strong></li><li>矩阵合同$\iff$正负惯性指数相同</li><li><strong>若$A\sim B$，则$r(A+kE)=r(B+kE)$</strong>。现阶段不能证，直接用</li></ul><h3 id="2-矩阵的逆"><a href="#2-矩阵的逆" class="headerlink" title="2.矩阵的逆"></a>2.矩阵的逆</h3><ul><li>$A^{-1}=\frac{1}{|A|}A^*$  <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020153694.png" alt="image-20220312074751928" style="zoom:33%;" /><ul><li>二阶求逆口诀：主对调，副变号，<strong>除以行列式</strong></li></ul></li><li>分块矩阵的逆 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020153695.png" alt="image-20220312075135249" style="zoom:40%;" /></li><li>伴随矩阵：代数余子式<strong>转置</strong>排成矩阵<ul><li>$AA^<em>=A^</em>A=|A|E$ </li><li>$|A^<em>|=|A|^{n-1}$ ，$(A^</em>)^<em>=|A^{n-2}|A$ ，$(kA)^</em>=k^{n-1}A^*$ </li></ul></li></ul><h3 id="3-初等变换"><a href="#3-初等变换" class="headerlink" title="3.初等变换"></a>3.初等变换</h3><ul><li><p>行变换相当于左乘，列变换相当于右乘</p></li><li><p>初等变换性质 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020153696.png" alt="image-20220312221903615" style="zoom:33%;" /></p><ul><li><p>例：求一个矩阵由哪些初等阵构成</p><blockquote><p>一步一步化为E，写出每一步的初等阵，求其逆</p></blockquote></li></ul></li><li><p>分块矩阵的逆 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020153697.png" alt="image-20220312230346064" style="zoom: 25%;" /> <strong>左乘同行，右乘同列，添负号</strong> ==主对角线不换位置，副对角线换位置==</p></li></ul><h2 id="三、向量组"><a href="#三、向量组" class="headerlink" title="三、向量组"></a>三、向量组</h2><h3 id="1-线性相关"><a href="#1-线性相关" class="headerlink" title="1.线性相关"></a>1.线性相关</h3><ul><li><p>证明线性相关：按定义设出式子，左右同乘 或者 代入重组</p></li><li><p>性质</p><ul><li>若$\alpha_1…\alpha_n$线性无关，加上$\beta$就线性相关，那么$\beta$可以用那些个$\alpha$<strong>唯一</strong>线性表示</li><li>有一个能表示就算相关了</li><li>以少表示多，多的那组相关</li><li>原来无关，添维数必然无关；原来相关，减维数必然相关</li></ul></li></ul><h3 id="2-秩"><a href="#2-秩" class="headerlink" title="2.秩"></a>2.秩</h3><ul><li><p>向量排成矩阵，行变换求$r(A)$</p><ul><li>按列找出一个秩为$r(A)$的子矩阵，挑出来的那几列对应的原向量就是极大无关组</li></ul></li><li><p>向量组等价$\iff r(I)=r(II)=r(I|II)$ </p></li><li>两个向量组，被表出的秩不大</li><li>秩<strong>越乘越小</strong> </li><li>$\begin{cases}r(AB)\le min\{r(A),r(B)\}\\r(A+B)\le r(A)+r(B)\\r(A^*)=\begin{cases}n&amp;r(A)=n\\1&amp;r(A)=n-1\\0&amp;r(A)&lt;n-1\end{cases}\\AB=0\Longrightarrow r(A)+r(B)\le A的列数\end{cases}$ </li></ul><h3 id="3-向量空间"><a href="#3-向量空间" class="headerlink" title="3.向量空间"></a>3.向量空间</h3><ul><li>$\xi到\eta$的过渡矩阵定义：<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020153698.png" alt="image-20220315155609939" style="zoom:33%;" /></li><li>坐标变换公式：<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020153699.png" alt="image-20220315155816149" style="zoom:43%;" /></li></ul><h2 id="四、线性方程组"><a href="#四、线性方程组" class="headerlink" title="四、线性方程组"></a>四、线性方程组</h2><h3 id="1-具体"><a href="#1-具体" class="headerlink" title="1.具体"></a>1.具体</h3><ul><li><p>齐次</p><ul><li>必有零解，列满秩时有唯一零解，列不满秩有n-r个线性无关解</li><li>解法：<strong>设出来通解</strong>后求出其他值 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020153700.png" alt="image-20220315195449733" style="zoom:33%;" /></li></ul></li><li><p>非齐次</p><ul><li>系数矩阵和增广矩阵<strong>秩不等</strong>，无解<ul><li>秩相等且满秩，唯一解</li><li>秩相等且不满秩，无穷多解</li></ul></li></ul></li></ul><h3 id="2-抽象"><a href="#2-抽象" class="headerlink" title="2.抽象"></a>2.抽象</h3><p>有解条件 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020153701.png" alt="22-0315_22" style="zoom:33%;" /></p><h3 id="3-公共解、同解方程组"><a href="#3-公共解、同解方程组" class="headerlink" title="3.公共解、同解方程组"></a>3.公共解、同解方程组</h3><ul><li><p>求公共解</p><ul><li><p>联立方程组求解</p></li><li><p>把一个的通解带到另外一个里面去</p></li><li><p>求出两个通解，令其相等，求出任意系数之间的关系（k和l），关系带入通解得到公共解</p><blockquote><p>联立 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020153702.png" alt="image-20220315225601200" style="zoom: 25%;" /></p></blockquote></li></ul></li><li><p>同解</p><ul><li><p>$r(A)=r(B)=r[\frac{A}{B}]$ 三秩相同（<strong>竖着拼</strong>）</p></li><li><p>==设$A_{m\times n}$，则$r(A)=r(A^T)=r(AA^T)=r(A^TA)$== </p><blockquote><p>构造$Ax=0,A^TAx=0$，显然1的解是2的解</p><p>若$\eta$是2的任一解$\Longrightarrow A^TA\eta=0\Longrightarrow \eta^T A^TA\eta=0\Longrightarrow(A\eta)^TA\eta=0\Longrightarrow||A\eta||^2=0\Longrightarrow A\eta=0$ </p><p>结论：1与2同解，基础解系等价，秩相同</p></blockquote></li></ul></li></ul><h2 id="五、特征值-A为方阵"><a href="#五、特征值-A为方阵" class="headerlink" title="五、特征值(A为方阵)"></a>五、特征值<strong>(A为方阵)</strong></h2><h3 id="1-特征值与特征向量"><a href="#1-特征值与特征向量" class="headerlink" title="1.特征值与特征向量"></a>1.特征值与特征向量</h3><ul><li><p>性质</p><ul><li><p><strong>特征值的和</strong>等于主对角线元素的和，<strong>特征值的积</strong>等于行列式</p></li><li><p>k重特征值至多只有k个线性无关的特征向量</p></li><li><p>==$tr(A^<em>)=A_{11}+A_{22}+A_{33}=\lambda_1^</em>+\lambda_2^<em>+\lambda_3^</em>=\lambda_2\lambda_3+\lambda_1\lambda_3+\lambda_1\lambda_2$== </p></li><li><p>矩阵秩为1，特征值必为$(n-1)$个0和一个“迹”（证明看下面）</p></li><li><p>例题</p><blockquote><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020153703.png" alt="image-20220316104012183" style="zoom:33%;" /></p></blockquote></li></ul></li><li><p>求法</p><ul><li><p>具体：$|\lambda E-A|=0$ 特征方程。求出$\lambda$带回方程求出所有解即为特征向量</p><ul><li>$|\lambda E-A|=\lambda^3-(a_{11}+a_{22}+a_{33})\lambda^2+S_2\lambda-|A|$，其中$S_2=\left| \begin{array}{ccc} a_{11}&amp;a_{12}\\ a_{21}&amp;a_{22}\end{array} \right| + \left| \begin{array}{ccc} a_{22}&amp;a_{23}\\ a_{32}&amp;a_{33}\end{array} \right| + \left| \begin{array}{ccc} a_{11}&amp;a_{13}\\ a_{31}&amp;a_{33}\end{array} \right|$<ul><li>如果 $r(A)=1$，那么两个 特征值为0，一个特征值为迹</li></ul></li><li><p>$f(\lambda)=a_k\lambda^k+…+a_1\lambda^1+a_0=0$ 试根方法</p><ul><li>若$a_0=0$，$\lambda=0$是根</li><li>若$a_k+…+a_1+a_0=0$，$\lambda=1$是根</li><li>若偶次项之和=奇次项之和，$\lambda=-1$是根</li><li>若最高次项是1，且所有系数都是整数，那么所有有理根都是$a_0$的因数</li></ul><blockquote><p>注意$k\neq0!!!$ <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020153704.png" alt="image-20220316075710694" style="zoom: 30%;" /></p></blockquote></li></ul></li><li><p>抽象</p><blockquote><p>各种变化 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020153705.png" alt="image-20220316090927438" style="zoom:33%;" /></p></blockquote></li></ul></li><li><p><strong>重要关系对照表</strong> <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:08:17-14:55:57-image-20220817145537479.png" alt="image-20220817145537479" style="zoom:40%;" /></p></li></ul><h3 id="2-相似"><a href="#2-相似" class="headerlink" title="2.相似"></a>2.相似</h3><ul><li>矩阵相似<ul><li><strong>秩、行列式、迹、特征值</strong>相同 (反之不成立，反例：二阶1010和1101)</li><li><strong>求逆、转置、伴随、多项式</strong>处理后，仍然相似</li></ul></li><li>相似对角化<ul><li>可对角化条件<ul><li>两个充分：有n个不同的特征值、是实对称阵</li><li>两个充要：<u>有n个线性无关特征向量</u>、每个$k_i$重特征值都有$k_i$重特征向量</li></ul></li><li>步骤：求特征值、特征向量，拼起来</li></ul></li><li>应用<ul><li>实对称阵<ul><li>不同特征值的特征向量<strong>正交</strong>。它必有n个线性无关的特征向量，因此必可相似对角化</li><li>特征向量间的关系 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020153706.png" alt="image-20220316162627233" style="zoom: 25%;" /></li><li>计算：求$Q^{-1}AQ=Q^TAQ=\Lambda$，多一步正交化(如果需要的话)和单位化</li></ul></li><li>反问题<ul><li>反求参数：相似矩阵迹相同，行列式相同</li><li>反求A：$A=P\Lambda P^{-1}$ </li></ul></li><li>求$A^n$与$f(A)$ </li></ul></li></ul><h2 id="六、二次型"><a href="#六、二次型" class="headerlink" title="六、二次型"></a>六、二次型</h2><h3 id="1-化为标准型与规范型"><a href="#1-化为标准型与规范型" class="headerlink" title="1.化为标准型与规范型"></a>1.化为标准型与规范型</h3><ul><li><p>标准型：只有平方项没有交叉项</p><ul><li>规范型：系数只有1，0，-1</li></ul></li><li><p>配方法：将平方项和与其有关的混合项一次配完，如法炮制直至全部配完</p><ul><li><strong>n元要n换</strong>！缺项要补项</li><li>没有平方项用平方差公式创造平方</li></ul></li><li><p>通过正交变换 $x^TAx=y^T\Lambda y=\lambda_1y_1^2+\lambda_2y_2^2+\lambda_3y_3^2$。$x=Qy，Q=(\gamma_1,\gamma_2,\gamma_3)$，也就是三个特征向量</p><blockquote><p>例题：$f=x_1^2+2x_1x_2+2x_1x_3-x_2^2-2x_2x_3-x_3^2$ 化为标准型，写出<strong>可逆</strong>线性变换</p><p>$f=(x_1+x_2+x_3)^2-2x_2^2-4x_2x_3-2x_3^2$ </p><p>$\ \ =(x_1+x_2+x_3)^2-2(x_2+x_3)^2$ </p><p>令$\begin{cases}y_1=x_1+x_2+x_3\\y_2=x_2+x_3\\y_3=x_3\end{cases}$ ，最终结果<strong>记得求逆</strong></p></blockquote></li><li><p>合同：$A,B$为N阶实对称阵，$C^TAC=B$，C可逆，$f(x)$与$g(y)$为合同二次型</p><ul><li>相当于旋转了坐标轴</li></ul></li></ul><h3 id="2-正定二次型"><a href="#2-正定二次型" class="headerlink" title="2.正定二次型"></a>2.正定二次型</h3><ul><li><p>惯性定理：标准型的正负项个数是恒定的</p></li><li><p>合同充要条件：有相同正负惯性指数 （<strong>前提都是对称阵</strong>）</p></li><li><p>判定：</p><ul><li><p>必要条件：主对角元素全正、行列式&gt;0 </p><blockquote><p>前提A一定是对称阵 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020153707.png" alt="image-20220316231249574" style="zoom: 40%;" /></p></blockquote></li></ul></li><li><p>三大变换：A正定$\begin{cases}\iff A^T正定\\\iff A^{-1}正定\\\Longrightarrow A^*正定\end{cases}$ </p></li></ul><h1 id=""><a href="#" class="headerlink" title="$\ $"></a>$\ $</h1><h1 id="概率论"><a href="#概率论" class="headerlink" title="概率论"></a>概率论</h1><h2 id="一、随机事件与概率"><a href="#一、随机事件与概率" class="headerlink" title="一、随机事件与概率"></a>一、随机事件与概率</h2><ul><li><p>古典概型</p><ul><li><p>有限个样本点、等可能</p></li><li><p>大学期间<strong>排列符号用$P_n^m$</strong>，因为A另有用途</p></li><li><p>用对立事件取巧计算</p></li></ul></li><li><p>概率公式</p><ul><li><p>条件概率 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020153708.png" alt="image-20220318124856730" style="zoom:33%;" /></p></li><li><p>乘法公式 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020153709.png" alt="image-20220318140934424" style="zoom: 33%;" /></p></li><li><p>例题：</p><blockquote><p> <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020153710.png" alt="image-20220318143307507" style="zoom:33%;" /></p><p>定义上来说AB不对</p></blockquote></li></ul></li><li><p><strong>全概率公式</strong>例题：</p><blockquote><p> <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020153711.png" alt="image-20220318145527373" style="zoom:33%;" /></p><p>$P(A)=P(H_1)P(A|H_1)+P(H_2)P(A|H_2)=\frac{7}{8}$ </p><p>$P(C_1)=P(H_1|A)=\frac{P(H_1A)}{P(A)}=\frac{4}{7},P(C_2)=P(H_2|A)=\frac{P(H_2A)}{P(A)}=\frac{3}{7}$</p><p>$P(\bar A)=P(C_1)P(\bar A|C_1)+P(C_2)P(\bar A|C_2)=\frac{4}{7}\cdot0+\frac{3}{7}\cdot\frac{1}{4}=\frac{3}{28}$ </p></blockquote></li><li><p>事件独立性</p><ul><li>三个事件相互独立/两两独立 含义不一样</li><li>$P(AB)=P(A)P(B)$</li><li>一般来 说，互斥和独立没有必然联系</li><li>$0&lt;P(A)&lt;1，0&lt;P(B)&lt;1，AB=\phi或A\subset B\Longrightarrow$<strong>A与B一定不独立</strong></li><li>$P(A)=0或1\Longrightarrow$<strong>A与任意事件B独立</strong></li><li>$\phi$ 与任意事件<strong>既独立又互斥</strong></li><li><strong>独立一定不相关，但是不（线性）相关不一定独立！！！</strong></li></ul></li></ul><h2 id="二、一维随机变量"><a href="#二、一维随机变量" class="headerlink" title="二、一维随机变量"></a>二、一维随机变量</h2><h3 id="1-随机变量"><a href="#1-随机变量" class="headerlink" title="1.随机变量"></a>1.随机变量</h3><ul><li>分布函数 $F(x)=P\{X\le x\}$，<strong>x取遍实数轴！</strong><ul><li>性质<ul><li>单调不减</li><li>右连续：左空心，右实心</li><li>左极限0，右极限1</li></ul></li><li>应用：求概率 $\begin{cases}P\{X\le a\}=F(a)\\P\{X&lt; a\}=F(a-0)\\P\{X= a\}=F(a)-F(a-0)\end{cases}$</li><li><strong>一些结论</strong>：<ul><li>$F_1(x)F_2(x)$<strong>是</strong>分布函数，$F_1(x)+F_2(x)$<strong>不是</strong>分布函数</li><li>$f_1(x)f_2(x)$<strong>不一定</strong>是概率密度函数，$f_1(x)+f_2(x)$<strong>不是</strong>概率密度函数</li></ul></li></ul></li></ul><h3 id="2-连续型分布"><a href="#2-连续型分布" class="headerlink" title="2.连续型分布"></a>2.连续型分布</h3><ul><li><p>无论边界是否取等，都是一样的，因为一个点概率测不到</p><blockquote><p>概念题 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020153712.png" alt="image-20220319123623045" style="zoom:33%;" /></p></blockquote></li><li><p>均匀分布 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020153713.png" alt="image-20220319155655080" style="zoom:40%;" /></p></li><li><p>指数分布 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020153714.png" alt="image-20220319161745927" style="zoom:40%;" /> </p><ul><li>$\lambda$表示失效率，越高表示越快</li><li>$p(x\ge s+t|x\ge s)=p(x\ge t)$ </li></ul></li><li><p>正态分布 $\phi(x)$  <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020153715.png" alt="image-20220319164105042" style="zoom:40%;" /></p><ul><li>$\Phi(0)=0,\Phi(-x)=1-\Phi(x)$ </li><li><strong>重要公式</strong>：$\int\limits_{-\infty}^{+\infty}e^{-\frac{(x-\mu)^2}{2\sigma^2}}dx=\sqrt{2\pi}\sigma$</li><li>上$\alpha$分位数：某点右侧面积是$\alpha$ </li><li><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020153716.png" alt="image-20220319171921146" style="zoom:40%;" /> 见到正态分布必写标准化</li></ul></li></ul><h3 id="3-离散型分布"><a href="#3-离散型分布" class="headerlink" title="3.离散型分布"></a>3.离散型分布</h3><ul><li>二项分布B(n,p)：伯努利实验 $p\{X=k\}=C_n^kp^k(1-p)^{n-k}$ </li><li>几何分布 G(p)：首次发生 $p\{X=k\}=p\cdot(1-p)^{k-1}$ </li><li>泊松分布 $P(\lambda)$ ：稀有事件发生概率 $p\{X=k\}=\frac{\lambda^k}{k!}e^{-\lambda}(k=0,1,…;\lambda&gt;0)$ <ul><li>某场合某单位时间内源源不断的质点来流的个数，$\lambda$表示强度</li></ul></li><li>超几何分布 H(n,N,M)：$p\{X=k\}=\frac{C_m^kC_{N-M}^{n-k}}{C_N^n},max\{0,n-N+M\le k\le min\{M,n\}$</li></ul><h3 id="4-随机变量分布函数"><a href="#4-随机变量分布函数" class="headerlink" title="4.随机变量分布函数"></a>4.随机变量分布函数</h3><ul><li><p>例题</p><blockquote><p> <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020153717.jpg" alt="90C3A0B8D9E27A9F74A0A24737072DDD" style="zoom:17%;" /></p></blockquote></li></ul><h2 id="三、多维随机变量"><a href="#三、多维随机变量" class="headerlink" title="三、多维随机变量"></a>三、多维随机变量</h2><h3 id="1-多维随机变量"><a href="#1-多维随机变量" class="headerlink" title="1.多维随机变量"></a>1.多维随机变量</h3><ul><li><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020153718.png" alt="image-20220319191723654" style="zoom:40%;" /></li><li>二维分布函数中，其中一个取到无穷，得到的就是另一个的分布函数</li></ul><h3 id="2-二维离散"><a href="#2-二维离散" class="headerlink" title="2.二维离散"></a>2.二维离散</h3><ul><li><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020153719.png" alt="image-20220319194447122" style="zoom: 33%;" /></li></ul><h3 id="3-二维连续"><a href="#3-二维连续" class="headerlink" title="3.二维连续"></a>3.二维连续</h3><ul><li>联合概率密度</li><li>边缘概率密度：==求谁不积谁，不积先定限== <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020153720.png" alt="image-20220319200659586" style="zoom:40%;" /></li><li>条件概率密度：<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020153722.png" alt="image-20220319200849965" style="zoom:13%;" /> $条件=\frac{联合}{边缘}$ </li><li>独立性：<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020153723.png" alt="image-20220319201059600" style="zoom: 22%;" /><ul><li>$F(x,y)=F_X(x)F_Y(y)$</li><li>$f_{X|Y}(x|y)=f_X(x)$</li><li>$X,Y独立\Longrightarrow f(X)与g(Y)独立$。<strong>单向箭头</strong>，不能回推！</li></ul></li></ul><h3 id="4-函数的分布-⭐️"><a href="#4-函数的分布-⭐️" class="headerlink" title="4.函数的分布(⭐️)"></a>4.函数的分布<strong>(⭐️)</strong></h3><ul><li><p>(离散，离散)-&gt;离散</p></li><li><p>(连续，连续)-&gt;连续</p><ul><li><p>分布函数法：通过画图的方式确定z取不同值时候的 积分区间，然后再求导</p></li><li><p>卷积公式 </p><blockquote><p>$Z=X+Y$时，把一个变量直接替换，对另一个变量积分，得到Z的概率密度函数</p><p>其实积分内部还要乘一个偏导z的绝对值</p><p> <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020153724.png" alt="image-20220320082850030" style="zoom:30%;" /> </p></blockquote></li></ul></li><li><p>(离散，连续)-&gt;连续</p><ul><li>离散的那个用全概率公式展开<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020153725.png" alt="image-20220320095058019" style="zoom:30%;" /></li></ul></li></ul><h2 id="四、随机变量数字特征"><a href="#四、随机变量数字特征" class="headerlink" title="四、随机变量数字特征"></a>四、随机变量数字特征</h2><h3 id="1-一维"><a href="#1-一维" class="headerlink" title="1.一维"></a>1.一维</h3><ul><li><p>期望 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020153726.png" alt="image-20220320101157215" style="zoom:25%;" /></p><ul><li>对于均匀分布，取样取最大值最小值时候，可以写出$F(x)$，利用独立同分布进而转换成每一个，从而写出F，求导即可得到所求$f(x)$</li><li>对于正态分布，取样取最大值最小值时候，可以利用$\begin{cases}max\{X,Y\}=\frac{1}{2}\{X+Y+|X-Y|\} \\ min\{X,Y\}=\frac{1}{2}\{X+Y-|X-Y|\} \end{cases}$</li></ul></li><li><p>方差：</p><ul><li>平方的期望减期望的平方 $DX=EX^2-(EX)^2$ </li><li>$D(X\pm Y)=D(X)+D(Y)\pm 2Cov(X,Y)$ </li><li>独立时，<strong>二项、泊松、正态、卡方</strong> 具有可加性</li><li><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020153727.png" alt="image-20220320104520366" style="zoom:40%;" /></li><li>卡方分布 $X\sim\chi^2(n)$，$E(X)=n，D(X)=2n$</li></ul></li><li><p><strong>利用$E(X)$巧解积分</strong> $E(X)=\int_0^{+\infty}x\lambda e^{-\lambda x}dx=\frac{1}{\lambda}$</p><blockquote><p>例题：$\begin{cases}\int\limits_0^{+\infty}xe^{-6 x}dx=\frac{1}{6}\int_\limits0^{+\infty}x6e^{-6 x}dx=\frac{1}{36} \\ \int_\limits0^{+\infty}x^2e^{-6 x}dx=\frac{1}{6}\int\limits_0^{+\infty}x^26e^{-6 x}dx=\frac{1}{6}\times(\frac{1}{6^2}+(\frac{1}{6})^2)\end{cases}$</p></blockquote></li><li><p>切比雪夫不等式 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020153728.png" alt="image-20220320105428675" style="zoom:40%;" /></p></li></ul><h3 id="2-二维"><a href="#2-二维" class="headerlink" title="2.二维"></a>2.二维</h3><ul><li>期望：只有独立才可打开直接乘</li><li>协方差：$Cov(X,Y)=E(XY)-EXEY$ </li><li>相关系数 $\rho_{xy}=\frac{E(XY)-EXEY}{\sqrt{DX}\sqrt{DY}}$ 为0时<strong>线性不相关</strong> </li></ul><h3 id="3-独立性判定"><a href="#3-独立性判定" class="headerlink" title="3.独立性判定"></a>3.独立性判定</h3><ul><li>用分布判定独立性</li><li>用数字特征判定相关性</li></ul><h2 id="五、大数定律"><a href="#五、大数定律" class="headerlink" title="五、大数定律"></a>五、大数定律</h2><h3 id="1-依概率收敛"><a href="#1-依概率收敛" class="headerlink" title="1.依概率收敛"></a>1.依概率收敛</h3><h3 id="2-大数定律"><a href="#2-大数定律" class="headerlink" title="2.大数定律"></a>2.大数定律</h3><p>在满足一定条件下，均值依概率收敛到均值的期望</p><ul><li>切比雪夫大数定律：相互独立随机序列，方差一致有上界</li><li>伯努利大数定律</li><li>辛钦大数定律：独立同分布随机序列，期望存在</li></ul><h3 id="3-中心极限定理"><a href="#3-中心极限定理" class="headerlink" title="3.中心极限定理"></a>3.中心极限定理</h3><ul><li><p>列维-林德伯格定理：要求$\mu、\sigma$都存在，独立同分布随机序列和服从正态</p></li><li><p>利莫夫-拉普拉斯定理：样本足够大时，$\sum\limits_{i=1}^{n}X_i,E=nE\bar X,D=nD\bar X$ </p><ul><li><p>==中心极限定理比切比雪夫不等式更精确==</p><blockquote><p>例题 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020153729.png" alt="image-20220320152012514" style="zoom:37%;" /></p></blockquote></li></ul></li></ul><h2 id="六、数理统计"><a href="#六、数理统计" class="headerlink" title="六、数理统计"></a>六、数理统计</h2><h3 id="1-统计量及其分布"><a href="#1-统计量及其分布" class="headerlink" title="1.统计量及其分布"></a>1.统计量及其分布</h3><ul><li><p>样本数字特征</p><ul><li><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020153730.png" alt="image-20220320154623427" style="zoom:40%;" /> <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020153731.png" alt="image-20220320182505524" style="zoom:35%;" /><ul><li>$X\sim N(\mu,\sigma^2)\Longrightarrow \bar X与S^2独立，也就是\bar X与\sum\limits_{i=1}^n(X_i-\bar X)^2独立$</li></ul></li><li><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020153732.png" alt="image-20220320154657909" style="zoom:40%;" /></li><li><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020153733.jpg" alt="D8648F59053E38F9362FCA75029B3C6F" style="zoom:20%;" /></li></ul></li><li><p>顺序统计量</p><ul><li>Max $\begin{cases}F_{(n)}(x)=[F(x)]^n\\f_{(n)}(x)=n[F(x)]^{n-1}f(x)\end{cases}$</li><li>Min $\begin{cases}F_{(l)}(x)=1-[1-F(x)]^n\\f_{(l)}(x)=n[1-F(x)]^{n-1}f(x)\end{cases}$ </li></ul></li><li><p>三大分布</p><ul><li>$\chi^2$分布：标准正态分布的平方和，有几个自由度就是几<ul><li>EX=n，DX=2n</li></ul></li><li>t分布：把$\chi^2$分布变换成一对一：除以n再开方<ul><li>自由度是<strong>样本个数-1</strong> </li><li><strong>$t_{1-\alpha}(n)=-t_\alpha(n)$</strong> </li></ul></li><li>F分布：两个$\chi^2$分布分别除以自己的自由度再比较</li><li><strong>$F_\alpha(n_1,n_2)=\frac{1}{F_{1-\alpha}(n_2,n_1)}$</strong> </li></ul></li><li><p>==正态总体下常用结论==</p><blockquote><p> <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020153734.png" alt="image-20220320195027681" style="zoom:40%;" /></p></blockquote></li></ul><h3 id="2-参数的点估计"><a href="#2-参数的点估计" class="headerlink" title="2.参数的点估计"></a>2.参数的点估计</h3><ul><li>方法<ul><li>矩估计法：算出来$EX$，令$\bar x=EX$，反解出来$\hat \theta$ </li><li>极大似然估计<ul><li>写概率函数，取对数，求导，令为0，解出$\hat \theta$，根据范围选择合理的值</li><li><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020153735.png" alt="image-20220321093858663" style="zoom:30%;" /></li><li>问“估计值”，用小写$x_i$；问“估计量”用大写$X_i$ </li></ul></li></ul></li><li>评价标准<ul><li>无偏：$E\hat\theta=\theta$，$\hat\theta$是无偏估计</li><li>有效：$\hat\theta_1,\hat\theta_2$都是无偏估计，谁方差小谁更有效</li><li>一致（相合性）：$\hat\theta\stackrel{P}{\longrightarrow}\theta$ </li></ul></li></ul><h3 id="3-参数的区间估计"><a href="#3-参数的区间估计" class="headerlink" title="3.参数的区间估计"></a>3.参数的区间估计</h3><ul><li><p>区间估计</p><ul><li><p>正态总体均值的置信区间（利用==正态总体常用结论==变形）</p><ul><li><p>形式 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:08:25-15:19:51-image-20220825151934990.png" alt="image-20220825151934990" style="zoom:50%;" /></p><blockquote><p>推导：</p><p>$p(|\bar x-\mu|&lt;\Delta)=1-\alpha\iff p(|\frac{\bar x-\mu}{\sigma/\sqrt{n}}|&lt;\frac{\Delta}{\sigma/\sqrt{n}})=1-\alpha$ </p><p>$\Delta=Z_{\frac{\alpha}{2}}\frac{\sigma}{\sqrt{n}}$ 或者 $\Delta=T_{\frac{\alpha}{2}}(n-1)\cdot\frac{S}{\sqrt{n}}$ </p><p>$\Delta$表示想要置信度为$1-\alpha$情况下$|\bar x-\mu|$的上限 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020153736.png" alt="image-20220321082805252" style="zoom:25%;" /></p><p>即$p(\bar x-\Delta&lt;\mu&lt;\bar x+\Delta)=1-\alpha=0.99$ “有99%的把握落在这个区间”</p></blockquote></li></ul></li></ul></li><li><p>假设检验</p><ul><li><p>用估计的$\mu$算出来一个拒绝域，看抽样的均值是否在这里面</p><blockquote><p>例题：学生成绩为正态布，选<strong>36</strong>名学生。平均成绩<strong>66.5</strong>分，标准差<strong>15</strong>分。</p><p>问显著性水平<strong>0.05</strong>下，是否可以认为平均成绩为70分？<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:08:25-15:37:49-22-0825_15.png" alt="22-0825_15" style="zoom:20%;" /></p><ul><li>假设$H_0：\mu=\mu_0=70。H_1：\mu\neq 70$</li><li>$T=\frac{\bar X-\mu_0}{S/\sqrt{n}}=\frac{\bar X-70}{S/\sqrt{n}}=t(35)$</li><li>$P\{|\frac{\bar X-\mu_0}{S/\sqrt n}|&gt;t_{\frac{\alpha}{2}}(35)\}=\alpha$</li><li>$|t|=|\frac{66.5-70}{15/6}|=1.4&lt;2.0301$，不在拒绝域，假设合理</li></ul></blockquote></li></ul></li><li><p>两类错误</p><ul><li>弃真$\alpha$，取伪$\beta$。二者<strong>不是和为1</strong></li><li>控制$\alpha$情况下使得$\beta$尽可能小</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>考研</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>高数</title>
    <link href="/blog/c305b808135d/"/>
    <url>/blog/c305b808135d/</url>
    
    <content type="html"><![CDATA[<h1 align="center">高数</h1><p>[TOC]</p><h1 id="高数"><a href="#高数" class="headerlink" title="高数"></a>高数</h1><h2 id="一、第一讲-函数"><a href="#一、第一讲-函数" class="headerlink" title="一、第一讲-函数"></a>一、第一讲-函数</h2><h3 id="1-函数性质：单调、有界、奇偶、周期"><a href="#1-函数性质：单调、有界、奇偶、周期" class="headerlink" title="1.函数性质：单调、有界、奇偶、周期"></a>1.函数性质：单调、有界、奇偶、周期</h3><h3 id="2-指数对数运算法则，因式分解公式、常用不等式"><a href="#2-指数对数运算法则，因式分解公式、常用不等式" class="headerlink" title="2.指数对数运算法则，因式分解公式、常用不等式"></a>2.指数对数运算法则，因式分解公式、常用不等式</h3><ul><li>看见对数和分数，想着<strong>把幂次提出来！</strong>尤其是分数。</li><li>$ln(1+\frac{1}{x})=ln(x+1)-ln(x)$，想中值定理。</li></ul><h3 id="3-特殊画图-用直角坐标观点画极坐标系的图形"><a href="#3-特殊画图-用直角坐标观点画极坐标系的图形" class="headerlink" title="3.特殊画图:用直角坐标观点画极坐标系的图形"></a>3.特殊画图:用直角坐标观点画极坐标系的图形</h3><ul><li><p>极坐标—-<strong>心形线</strong>（外摆线）  $r=a(1-cos\theta),(a&gt;0)$，<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146269.png" alt="image-20220203090719195" style="zoom:25%;" /></p><ul><li><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146271.png" alt="image-20220203091010726" style="zoom:30%;" /></li><li>玫瑰线  $r=asin(3\theta),(a&gt;0)$  ，<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146272.png" alt="image-20220203091922376" style="zoom:25%;" /></li><li>阿基米德螺线  $r=a\theta,(\theta &gt;0,a\ge 0)$  ，<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146273.png" alt="image-20220203092411064" style="zoom:25%;" /></li><li>伯努利双纽线。定义：$MA\times MB=a^2$，$r^2=a^2cos(2\theta)$，换成sin旋转45度<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146274.png" alt="image-20220203092802113" style="zoom:25%;" /></li></ul></li><li><p>参数方程—-<strong>摆线</strong>  <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146275.png" alt="image-20220203094106668" style="zoom:25%;" /></p></li><li><strong>星形线</strong>（内摆线）  <script type="math/tex">\left\{\begin{array}{lr}x=rcos^3t  \\ y=rsin^3t \end{array}\right.</script>， $x^{\frac{2}{3}}+y^{\frac{2}{3}}=r^{\frac{2}{3}}$。<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146276.png" alt="image-20220203100121753" style="zoom:20%;" /></li></ul><h3 id="4-反函数："><a href="#4-反函数：" class="headerlink" title="4.反函数："></a>4.反函数：</h3><ul><li>严格单调函数必有反函数（反过来不行，举例：分段）。</li><li>$y=ln(x+\sqrt{x^2+1})$它是个奇函数，导数是$\frac{1}{\sqrt{x^2+1}}$ (包括反向积回去)。  反双曲正弦。<ul><li>1是$a^2$，可以带入公式</li></ul></li><li>$\sqrt{a}-\sqrt{b}=\frac{a-b}{\sqrt{a}+\sqrt{b}}$   下面是加，上面是平方项   <strong>看见这样的就想反解！</strong></li><li>求反函数：$e^y=\sqrt{x^2+1}+x$，     $e^{-y}=\sqrt{x^2+1}-x$，    $x=\frac{e^y-e^{-y}}{2}$（经典奇函数，双曲正弦）。<ul><li><strong>它的泰勒展开式特别有意思！</strong><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146277.png" alt="image-20220202212621259" style="zoom:25%;" /></li></ul></li><li>$y=\frac{e^x+e^{-x}}{2}$ 悬链线，偶函数，双曲余弦<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146278.png" alt="image-20220202212644422" style="zoom:25%;" /></li></ul><h3 id="5-函数四种基本特性"><a href="#5-函数四种基本特性" class="headerlink" title="5.函数四种基本特性"></a>5.函数四种基本特性</h3><ul><li>单调<ul><li>谈有界性必须指明区间</li><li>见到<strong>根号求最值，用平方</strong>， <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146279.png" alt="image-20220202220515682" style="zoom:25%;" /></li><li>函数单调的定义法<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146280.png" alt="image-20220202214052029" style="zoom:40%;" /></li></ul></li><li>奇偶<ul><li>例：<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146281.png" alt="image-20220202214541000" style="zoom:25%;" /></li><li>基本性质：<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146282.png" alt="image-20220202215011033" style="zoom: 33%;" /></li><li>重要结论：<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146283.png" alt="image-20220202215445923" style="zoom:33%;" /></li></ul></li></ul><h3 id="6-基本函数"><a href="#6-基本函数" class="headerlink" title="6.基本函数"></a>6.基本函数</h3><ul><li>看见 $u^v$ 换成 $e^{vln(u)}$ 来运算。</li><li>arcsin是$-\frac{\pi}{2}\sim\frac{\pi}{2}$变换而来的，arccos是$0\sim\pi$变换而来的。</li><li>$arcsin(x)+arccos(x)=\frac{\pi}{2},(-1\le x\le 1)$，求导为0，值是常数。$f’(x)=\frac{1}{\sqrt{1-x^2}}-\frac{1}{\sqrt{1-x^2}}=0$。$f(b)-f(a)=f’(\xi)(b-a)$，说明值为常数。<strong>图是对称往上翘的</strong></li><li>$arctan(x)+arccot(x)=\frac{\pi}{2},(-\infty\le x\le \infty)$。$f’(x)=\frac{1}{1+x^2}-\frac{1}{1+x^2}=0$。<strong>图是对称往下栽歪的</strong>。</li><li>[x]，不超过x的最大整数。$x-1&lt;[x]\le x$。<strong>严格大于它减一</strong>      $\lim_{x \to 0^+}[x]=0，\lim_{x \to 0^-}[x]=-1$。</li></ul><h3 id="7-中学基础知识"><a href="#7-中学基础知识" class="headerlink" title="7.中学基础知识"></a>7.中学基础知识</h3><ul><li>等比数列：<script type="math/tex">S_n=\left\{\begin{array}{lr}na_1,& r=1  \\ \frac{a_1(1-r^n)}{1-r},& r\neq1 \end{array}\right.</script>    <strong>特殊：当$|r|&lt;1,\lim_{n\to\infty}\frac{1-r^n}{1-r}=\frac{1}{1-r}$</strong>    <ul><li>常用求和公式<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146284.png" alt="image-20220203101730707" style="zoom:33%;" /></li></ul></li><li>三角函数基本公式 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146285.png" alt="image-20220203155557788" style="zoom:33%;" /><ul><li>​    诱导公式 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146286.png" alt="image-20220203155838338" style="zoom:20%;" /></li><li>倍角公式  <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146287.png" alt="image-20220203160456018" style="zoom: 33%;" /></li><li>和差化积 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146288.png" alt="image-20220203160724168" style="zoom:33%;" /></li><li>万能公式  <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146289.png" alt="image-20220203160900794" style="zoom:33%;" /></li></ul></li><li>基本不等式  <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146290.png" alt="image-20220203165716994" style="zoom:33%;" /></li></ul><h2 id="二、第二讲-数列极限"><a href="#二、第二讲-数列极限" class="headerlink" title="二、第二讲-数列极限"></a>二、第二讲-数列极限</h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h3><ul><li>极限定义步骤：先用通项和极限值写出距离表达式，通过$\varepsilon$ 反解出n，取N=取整加一。</li><li><strong>例题</strong>：当$\lim\limits_{n\to\infty}A_n\to A，则\lim\limits_{n\to\infty}|A_n|\to |A|$。反之不成立。当A=0，反之成立。</li><li>数列收敛，其任何一个子数列收敛（它的逆否命题经常用）。两个子数列<strong>不收敛到同一个数</strong>。</li></ul><h3 id="2-性质"><a href="#2-性质" class="headerlink" title="2.性质"></a>2.性质</h3><ul><li>唯一性、有界性</li><li>保号性。<strong>推论</strong>：数列$\{a_n\}$从某项起$a_n&gt;0$且$a_n$极限为A，则$A\ge 0$。<strong>“即使通项大于0，极限也有可能是0”</strong><ul><li>$a_n\ge 0$也行。$\le 0$同理。</li></ul></li><li>加减乘除的极限是极限的加减乘除。<strong>但不能直接拆！极限不一定存在！</strong></li><li>夹逼准则不验证等号。<ul><li>看见一串长得差不多的，想夹逼</li><li>只动分母，不动分子</li></ul></li><li>单调有界准则：单调有界数列必有极限（魏尔斯特拉斯定理）</li></ul><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146291.jpg" alt="IMG_20220204_095950_edit_259757588862445" style="zoom:15%;" /></p><h2 id="三、函数极限"><a href="#三、函数极限" class="headerlink" title="三、函数极限"></a>三、函数极限</h2><h3 id="1-定义和性质"><a href="#1-定义和性质" class="headerlink" title="1.定义和性质"></a>1.定义和性质</h3><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146292.png" alt="image-20220204123043703" style="zoom:40%;" /></p><ul><li>极限存在充要条件：左右极限都存在且相等</li><li>减去极限值得到的函数，其极限为无穷小量（接近0）</li><li>性质<ul><li>唯一性。不唯一的不叫极限，是极限不存在</li><li>局部有界性。<strong>局部！</strong>范围之外的地方不一定</li><li>局部保号性。邻域里才保号</li><li>推论：戴帽法，<strong>即使函数大于0，极限也有可能得0</strong></li></ul></li><li>概念：$+\infty$ 在==考研数学里规定为不存在==，但它不叫“不存在”<ul><li><strong>极限存在必有界，充分不必要</strong>。</li><li>有界函数和有界函数的和差积还是有界的。<strong>（有限个）</strong></li><li>$f’(x)在(a,b)$内有界，则$f(x)$在此区间内有界（用拉格朗日证）<strong>（有限区间，不是无穷区间）</strong></li><li>区间内函数有界的证法：<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146293.png" alt="image-20220204134103953" style="zoom:25%;" /></li><li>$e^u,|u|,arctan(u),[u]$ 这四种看见就想<strong>分类讨论</strong><blockquote><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146294.jpg" alt="IMG_20220204_162809_edit_265698421962060" style="zoom:15%;" /></p></blockquote></li></ul></li></ul><h3 id="2-七种未定式计算："><a href="#2-七种未定式计算：" class="headerlink" title="2.七种未定式计算："></a>2.七种未定式计算：</h3><ul><li><p>夹逼准则</p><ul><li>两边<strong>作差极限为0不代表中间极限存在</strong>，因为不能保证两边各自都有极限</li></ul></li><li><p>洛必达法则</p><ul><li><p>$\frac{0}{0}或\frac{\infty}{\infty}$，上下都可导，上下求导极限为A或$\infty$。<strong>（第三条不满足不能用）</strong>，比如导完极限不存在</p><blockquote><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146295.png" alt="image-20220204164103266" style="zoom:25%;" /></p></blockquote></li><li><p><em>分子简单分母复杂、次数底下高—-洛必达越用越复杂！</em></p></li><li><em>等价无穷小替换时候，长得更基本的那个才能换</em></li></ul></li><li><p>泰勒公式</p><ul><li><p>公式</p><ul><li><p>$x \to 0$时，</p><ol><li><script type="math/tex">\sin{x} = x - \frac{1}{6}x^3 + o(x^3)</script>   <strong>奇函数展开没有偶次项</strong></li><li><script type="math/tex">\cos{x} = 1 - \frac{x^2}{2!} + \frac{x^4}{4!} + o(x^4)</script>    <strong>偶函数展开没有奇次项</strong></li><li><script type="math/tex; mode=display">\tan{x} = x + \frac{x^3}{3} + o(x^3)</script></li><li><script type="math/tex; mode=display">\arcsin{x} = x + \frac{1}{6}x^3 + o(x^3)</script></li><li><script type="math/tex; mode=display">\arctan{x} = x - \frac{x^3}{3} + o(x^3)</script></li><li><script type="math/tex; mode=display">\ln(1+x) = x - \frac{x^2}{2} + \frac{x^3}{3} - \frac{x^4}{4} +o(x^4)</script></li><li><script type="math/tex; mode=display">e^x = 1 + x + \frac{x^2}{2!} + \frac{x^3}{3!} + ... +\frac{x^n}{n!}</script></li><li><script type="math/tex; mode=display">\frac{1}{1-x} = 1 +x +x^2 + ... + x^n ,\,(|x| \lt 1)</script></li><li><script type="math/tex; mode=display">(1+x)^{\alpha} = 1 + \alpha x + \frac{\alpha(\alpha-1)}{2!}x^2 +o(x^2)</script><script type="math/tex; mode=display">\sqrt{1+x} = 1+ \frac{x}{2} - \frac{x^2}{8} + o(x^2)</script><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146296.png" alt="image-20220204165947859" style="zoom:25%;" /></p></li></ol></li></ul></li><li><p>展开原则</p><ul><li>若函数$f(x)$在包含$x_0$的某个开区间$(a,b)$上具有(n+1)阶的导数，那么对于任一$x\epsilon(a,b)$，有<blockquote><p><strong>$f(x)=\frac{f(x_0)}{0!}+\frac{f’(x_0)}{1!}(x-x_0)+\frac{f’’(x_0)}{2!}(x-x_0)^2+…+\frac{f^n(x_0)}{n!}(x-x_0)^n+R_n(x)$</strong>   </p></blockquote></li></ul></li><li><p>例题：求$\lim\limits_{x\to 0}e^{tanx}-e^x$的阶数</p><blockquote><p>原式=$\lim_{x\to 0}e^x(e^{tanx-x}-1)\sim 1\times(tanx-x)\sim \frac{x^3}{3}$ </p></blockquote></li></ul></li><li><p>归结原则（海涅定理）</p><ul><li><p>反着考证明<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146298.png" alt="image-20220204181026278" style="zoom: 25%;" /></p><ul><li><p>例题：求证$\lim\limits_{x\to\infty}\frac{1}{x}sin(\frac{1}{x})$不存在。</p><blockquote><p>取$x_n=\frac{1}{n\pi},n\to\infty,\lim\limits_{x\to\infty}f(x_n)=0$，</p><p>取$x_n=\frac{1}{(2n+\frac{1}{2})\pi},n\to\infty,\lim\limits_{x\to\infty}f(x_n)=\infty$。</p></blockquote></li></ul></li><li><p>正着考计算</p><ul><li><p><strong>看见$u^v$的极限都改成$e^{vln(u)}$来计算，也就是$e^{v(u-1)}$</strong> </p></li><li><p><strong>趋于$\infty$的看看是不是要变换成趋于0来计算</strong></p><ul><li><p>例题：求$\lim\limits_{n\to\infty}(ntan\frac{1}{n})^{n^2},n\epsilon N^+$ </p><blockquote><p>取$x_n=\frac{1}{n}$，由归结原则，原式为  $\lim\limits_{x\to 0}(\frac{tanx}{x})^{\frac{1}{n^2}}=e^{\lim\limits_{x\to 0}\frac{1}{n^2}\frac{tanx-x}{x}}=e^{\frac{1}{3}}$ </p></blockquote></li></ul></li></ul></li></ul></li><li><p>无穷小比阶</p><ul><li><p>低阶吸收高阶</p><blockquote><p>例题：$\lim\limits_{x\to 0}\frac{sin^2x-x^2}{e^{x^4}-1}=\lim\limits_{x\to 0}\frac{(sinx+x)(six-x)}{x^4}=-\frac{1}{3}$  </p></blockquote></li></ul></li></ul><script type="math/tex; mode=display">\lim\limits_{x \to 0} \frac{A}{B} = 1 \iff A \sim B</script><div class="table-container"><table><thead><tr><th>$e^x-1 \sim x$</th><th>$\ln(1+x) \sim x$</th></tr></thead><tbody><tr><td>$\sin{x} \sim x$</td><td>$x - \sin{x} \sim \frac{1}{6}x^3$</td></tr><tr><td>$\arcsin{x} \sim x$</td><td>$x - \arcsin{x} \sim -\frac{1}{6}x^3 $</td></tr><tr><td>$\tan{x} \sim x$</td><td>$x - \tan{x} \sim -\frac{1}{3}x^3$</td></tr><tr><td>$\arctan{x} \sim x$</td><td>$x - \arctan{x} \sim \frac{1}{3}x^3$</td></tr><tr><td>$1-\cos{x} \sim \frac{1}{2}x^2$</td><td>$x^2-sin^2{x} \sim \frac{1}{3}x^4$</td></tr><tr><td>$(1+x)^{\alpha}-1 \sim \alpha x$</td><td>$x+\sin{x} \sim 2x$</td></tr></tbody></table></div><p>两个无穷小相除求极限，为非1常数—-同阶无穷小；为1—-等价无穷小。</p><h3 id="3-连续与间断"><a href="#3-连续与间断" class="headerlink" title="3.连续与间断"></a>3.连续与间断</h3><ul><li>第一类<ul><li>可去：<em>极限和函数值都有，但不相等，或者点没定义</em> <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146299.png" alt="image-20220205090315908" style="zoom:20%;" /></li><li>跳跃：<em>左右极限存在但不相等</em> </li></ul></li><li>第二类<ul><li>无穷：<em>两遍极限都是无穷大</em></li><li>振荡：<em>极限值振荡不存在，例如  $\lim\limits_{x\to 0}sin(\frac{1}{x})$</em> </li></ul></li><li>有双侧定义才讨论间断点</li></ul><h2 id="四、导数"><a href="#四、导数" class="headerlink" title="四、导数"></a>四、导数</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><ul><li><p>导数：导数存在$\iff$左右导都存在且相等</p><ul><li><p>证明：偶函数的导数是奇函数</p><blockquote><p>$f’(-x)=\lim\limits_{\Delta x\to 0}\frac{f(-x+\Delta x)-f(-x)}{\Delta x}=-\lim\limits_{\Delta x\to 0}\frac{f(x+(-\Delta x))-f(x)}{-\Delta x}=-f’(x)$</p></blockquote><ul><li><strong>没有形式的时候自己凑形式，尤其是凑定义，或者已知条件</strong></li></ul></li><li><p>例题：</p><blockquote><p>$\lim\limits_{x\to 1}{\frac{f(x)}{x-1}}=2\Longrightarrow f(1)=0,f’(1)=2$</p></blockquote><ul><li><strong>看见这种形式直接这么想</strong></li></ul></li></ul></li><li><p>微分：线性主部(微分)+误差</p><blockquote><p>如果x在$x_0$可微，那么可以用这一点切线近似代替曲线<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146300.png" alt="image-20220208223156167" style="zoom:25%;" /></p></blockquote></li></ul><h3 id="2-计算"><a href="#2-计算" class="headerlink" title="2.计算"></a>2.计算</h3><ul><li><p>分段：分段点用<strong>定义</strong>正负来求，非分段点用<strong>求导公式</strong></p></li><li><p>复合</p><ul><li>$df(💩)=f’(💩)d(💩)$ 一阶微分形式不变性</li><li>分段的复合函数求导不一定要写出来解析式，可以<strong>使用链式求导规则，直接代值进去</strong></li></ul></li><li><p>反函数</p><ul><li><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146301.png" alt="image-20220217082952182" style="zoom:30%;" /></p><blockquote><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146302.png" alt="image-20220217083749882" style="zoom:20%;" />。。  <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146303.png" alt="image-20220217090440542" style="zoom:20%;" /></p></blockquote></li></ul></li><li><p>参数方程  ：t也是x的函数，求二阶导需要考虑复合求导</p><ul><li>二阶导公式=$\frac{y’’_tx’_t-x’’_ty’_t}{(x’_t)^3}$，有隐函数和具体点时候直接用公式比较方便</li></ul></li><li><p>隐函数</p><ul><li><p>公式推导<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146304.png" alt="image-20220217092114687" style="zoom:20%;" /></p></li><li><p>例：求$sin(xy)=ln(\frac{x+e}{y})+1$ 在$x=0$时的导数</p><blockquote><p>y要当作x的函数来对待，需要复合求导<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146305.png" alt="image-20220217092903197" style="zoom:20%;" /></p></blockquote></li></ul></li><li><p>对数：幂次特别复杂的用对数拆开</p></li><li><p>高阶导数</p><ul><li>泰勒公式展开对比次数对应的系数<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146306.png" alt="image-20220217145214543" style="zoom:20%;" /></li></ul></li><li><p>变上限积分</p><ul><li><p>$\begin{cases}(\int_{\phi(x)}^{\psi(x)}f(t)dt)’&amp;=f(\psi(x))\psi’(x)-f(\phi(x))\phi’(x)\\ (\int_{\phi(x)}^{\psi(x)}f(x,t)dt)’&amp;=\int_{\phi(x)}^{\psi(x)}\frac{\partial f(x,t)}{\partial x}dt+f(\psi(x))\psi’(x)-f(\phi(x))\phi’(x)\\ (\int_a^bf(x,t)dt)’&amp;=\int_a^b\frac{\partial f(x,t)}{\partial x}dt \end{cases}$</p><blockquote><p>例题： <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146307.png" alt="image-20220217084526613" style="zoom:25%;" /></p></blockquote></li></ul></li></ul><h2 id="五、导数几何应用"><a href="#五、导数几何应用" class="headerlink" title="五、导数几何应用"></a>五、导数几何应用</h2><h3 id="1-极值与最值"><a href="#1-极值与最值" class="headerlink" title="1.极值与最值"></a>1.极值与最值</h3><ul><li>考研中无特殊说明，极值为<strong>广义极值</strong></li><li><strong>极值定义</strong>中需要<strong>邻域</strong>，因此单侧点不考虑</li></ul><h3 id="2-单调性、极值判别"><a href="#2-单调性、极值判别" class="headerlink" title="2.单调性、极值判别"></a>2.单调性、极值判别</h3><ul><li>单调性判别</li><li><p>极值必要条件</p><ul><li>（费马定理）：$x=x_0$处可导，且在$x_0$处取得极值，则必有$f’(x_0)=0$。</li></ul></li><li><p>==联系$f$与$f’$，立即想到拉格朗日！！==</p></li><li>三个充分条件<ul><li>在某点连续（不需要可导），去心邻域内可导，左右导数正负决定是什么极值点</li><li>二阶可导，$f’(x)=0,f’’(x)\neq 0$，必为极值点</li><li>n阶可导，最高阶不得0的导数是<strong>偶数阶导数</strong>，必为极值点</li></ul></li></ul><h3 id="3-凹凸性与拐点"><a href="#3-凹凸性与拐点" class="headerlink" title="3.凹凸性与拐点"></a>3.凹凸性与拐点</h3><ul><li>凹凸性判别</li><li><p>判拐点必要条件</p><ul><li>==注：==拐点是凹凸分界点，无需可导，只要连续。<strong>拐点是曲线上一点</strong>，而极值点在定义域上，写作$x_0$</li><li>二阶导存在，且这点是拐点，那么二阶导为0</li></ul></li><li><p>三个充分条件</p><ul><li>某点处连续，邻域内二阶导存在，二阶导变号，拐点存在</li><li>邻域内三阶可导，二阶导为0，三阶导不为0，拐点存在</li><li>n阶可导，<strong>从二阶开始</strong>都是0，但n阶不是0，<strong>n是奇数</strong>，拐点存在</li></ul></li></ul><h3 id="4-渐近线"><a href="#4-渐近线" class="headerlink" title="4.渐近线"></a>4.渐近线</h3><ul><li><p>铅锤：</p><ul><li>一般是无定义点</li><li><strong>不要求端点！而间断点要求区间！</strong></li></ul></li><li><p>水平：和斜渐近线不会在同一方向上共同存在</p></li><li>斜渐近线：$\lim\limits_{x\to \infty}\frac{f(x)}{x}=k$，$\lim\limits_{x\to \infty}f(x)-kx=b$ 。太快太慢的函数都不会有斜渐近线</li></ul><h3 id="5-最值或取值范围"><a href="#5-最值或取值范围" class="headerlink" title="5.最值或取值范围"></a>5.最值或取值范围</h3><ul><li><p>闭区间</p><ul><li>闭区间连续函数必有最值</li></ul></li><li><p>开区间</p><ul><li>求出可疑点函数值和两端单侧极限，比较</li></ul></li></ul><h2 id="六、中值定理"><a href="#六、中值定理" class="headerlink" title="六、中值定理"></a>六、中值定理</h2><ul><li><p>介值定理</p><ul><li>闭区间是重要信号，因为不能排除 $\xi$ 取在边界上</li></ul></li><li><p>平均值定理</p><ul><li>见到函数值加加加，想到用平均值除下去</li></ul></li><li><p>费马定理</p><ul><li>一阶可导，取极值，则一阶导为0</li><li>证明：连续可导函数，导数不得0，则导数保号。（用导数零点定理反证）（达布定理）</li></ul></li><li><p>罗尔定理</p><ul><li>闭区间连续开区间可导，端点值相等，开区间内存在一点使导数为0</li><li>常用乘积导数公式的逆用来构造辅助函数$\begin{cases}[f\times f]’&amp;=2f\times f’\\ [f\times f’]’&amp;=(f’)^2+f\times f’’\\ [f\times e^g]’&amp;=e^g\times[f’+f\times g’] \end{cases}$ </li><li>构造辅助函数 $F(x)$<ul><li>求导公式 $(u \cdot v)’ = u’v+uv’$ 逆用<ul><li>见 $F’(\xi)=f’(\xi)\cdot \xi+f(\xi)=0$，构造 $F(x)=f(x)x$</li><li>见 $F’(\xi)=[f’(\xi)+f(\xi)]e^{\xi}=0$，构造 $F(x)=f(x) e^x$</li><li>见 $F’(\xi)=[f’(\xi)+f(\xi) \varphi’(\xi)] e^{\varphi(\xi)}=0$，构造 $F(x)=f(x) e^{\varphi(x)}$</li><li>见  $F’(\xi)=f’’(x)+g(x)f’(x)=0$,构造 $F(x)=f’(x) e^{\int g(x)\text{d}x}$</li><li>见 $F’(\xi)=f(x)+g(x) \int_0^x f(t)\text{d}t =0$，构造 $F(x)=\int_0^x f(t)\text{d}t \cdot e^{\int g(x) \text{d}x}$</li><li>见 $F’(\xi)=f’(x)+g(x)[f(x)-1]=0$，构造 $F(x)=[f(x)-1] \cdot e^{\int g(x)\text{d}x}$</li></ul></li><li>积分还原法<ol><li>将欲证结论中的 $\xi$ 改为 $x$</li><li>积分之（为了简单，令 $c=0$）</li><li>移项使等式一端为0，另一端记为 $F(x)$</li></ol></li></ul></li></ul></li><li><p>拉格朗日中值定理</p><ul><li>常见形式 $\begin{cases}f-f\\ f \text{与} f’ \end{cases}$ ，0和1可以用来构造</li><li><strong>证闭区间用积分中值定理，证开区间用拉格朗日</strong></li></ul></li><li><p>柯西中值定理 $\frac{f(b)-f(a)}{g(b)-g(a)}=\frac{f’(\xi)}{g’(\xi)},g’\neq0$ </p><ul><li>取$g(x)=x$，退化为拉格朗日</li></ul></li><li><p>泰勒公式</p><ul><li>证明极大值时候也可以用泰勒公式拆开，看最高阶的正负号来比大小。余项不影响大局</li><li>中值是端点的函数，不是常数，$f’(\xi)$不能往外提</li><li>串联关系<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146308.png" alt="image-20220218153554454" style="zoom:20%;" /></li></ul></li><li><p>积分中值定理</p><ul><li>$\int_{a}^{b}f(x)dx=f(\xi)(b-a)$，把积分转换为函数，$\xi$在ab之间</li></ul></li></ul><h2 id="七、零点问题与微分不等式"><a href="#七、零点问题与微分不等式" class="headerlink" title="七、零点问题与微分不等式"></a>七、零点问题与微分不等式</h2><h3 id="1-零点问题"><a href="#1-零点问题" class="headerlink" title="1.零点问题"></a>1.零点问题</h3><ul><li>罗尔原话：<strong>n阶导数至多k个根，则函数至多k+n个根</strong></li><li>实系数奇次方程至少有一个实根<ul><li>判断<strong>函数根的个数</strong>可以从<strong>导数根的个数</strong>入手</li></ul></li></ul><h3 id="2-微分不等式"><a href="#2-微分不等式" class="headerlink" title="2.微分不等式"></a>2.微分不等式</h3><ul><li><p>用函数性态证明不等式：函数画图讨论</p></li><li><p>用常数变量化证明不等式：把一个常量设为变量或换元</p></li><li><p>用中值定理证明不等式：拉格朗日</p></li></ul><h2 id="八、积分"><a href="#八、积分" class="headerlink" title="八、积分"></a>八、积分</h2><h3 id="1-概念-1"><a href="#1-概念-1" class="headerlink" title="1.概念"></a>1.概念</h3><ul><li>不定积分<ul><li>不定积分奇偶性 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146309.png" alt="image-20220218203234848" style="zoom:20%;" /></li><li>原函数存在定理<ul><li>连续函数必有原函数。</li><li>含跳跃、可去、无穷间断点的函数无原函数</li></ul></li></ul></li><li>定积分<ul><li>概念：取区间为 $(0,1),\lim\limits_{n\to\infty}\sum\limits_{i=1}^n f(\frac{i}{n})\frac{1}{n}=\int_0^1f(x)dx$ <ul><li>碰见<strong>夹逼做不出来</strong>的极限可以考虑<strong>定积分定义</strong>。看n和i是不是齐次的</li></ul></li><li>存在定理<ul><li>闭区间连续</li><li>闭区间单调</li><li>闭区间有界，有有限个间断点</li></ul></li><li>性质<ul><li>积分中值定理，设出原函数用拉格朗日证</li></ul></li></ul></li><li>反常积分<ul><li>概念理解</li><li>无穷区间反常积分概念与敛散性</li><li>无界函数反常积分概念与敛散性</li><li>判敛</li></ul></li></ul><h3 id="2-计算-1"><a href="#2-计算-1" class="headerlink" title="2.计算"></a>2.计算</h3><h4 id="1）基本积分公式"><a href="#1）基本积分公式" class="headerlink" title="1）基本积分公式"></a>1）基本积分公式</h4><ol><li><p>$\int x^k\text{d}x = \frac{1}{k+1} x^{k+1} +C \, (k \ne -1)$； $\begin{cases}\int \frac{1}{x^2}\text{d}x&amp;=-\frac{1}{x}+C\\ \int \frac{1}{\sqrt{x}} \text{d}x &amp;= 2\sqrt{x} +C\end{cases}$ </p></li><li><p>$\int \frac{1}{x} \text{d}x = \ln{|x|} + C$</p><ul><li>$[\ln|u(x)|]_x’ = \frac{u_x’}{u(x)}$</li></ul></li><li><p>$\int a^x \text{d}x = \frac{1}{\ln{a}} a^x+ C$</p><ul><li>$\int e^x \text{d}x = e^x + C$</li></ul></li><li>$\int \sin{x} \text{d}x = -\cos{x} + C$<ul><li>$\int \cos{x} \text{d}x = \sin{x} + C$</li><li>$\int \tan{x} \text{d}x = -\ln{|\cos{x}|} + C$</li><li>$\int \cot{x} \text{d}x = \ln{|\sin{x}|} + C$</li><li>$\int \sec{x} \text{d}x = \ln{|\sec{x}+\tan{x}|} + C$</li><li>$\int \csc{x} \text{d}x = \ln{|\csc{x}-\cot{x}|} + C$</li><li>$\int \sec^2{x} \text{d}x = \tan{x} + C$</li><li>$\int \csc^2{x} \text{d}x = -\cot{x} + C$</li><li>$\int \sec{x}\tan{x} \text{d}x = \sec{x} + C$</li><li>$\int \csc{x}\cot{x} \text{d}x = -\csc{x} + C$</li></ul></li><li>$\int \frac{1}{\sqrt{1-x^2}} \text{d}x = \arcsin{x} + C$<ul><li>$\int \frac{1}{\sqrt{a^2-x^2}} \text{d}x = \arcsin{\frac{x}{a}} + C$</li></ul></li><li>$\int \frac{1}{\sqrt{x^2+a^2}} \text{d}x = \ln{(x+\sqrt{x^2+a^2})} + C$<ul><li>$\int \frac{1}{\sqrt{x^2-a^2}} \text{d}x = \ln{|x+\sqrt{x^2-a^2}|} + C$</li></ul></li><li>$\int \frac{1}{1+x^2} \text{d}x = \arctan{x} + C$<ul><li>$\int \frac{1}{a^2+x^2} \text{d}x = \frac{1}{a} \arctan{\frac{x}{a}} + C$</li></ul></li><li>$\int \frac{1}{a^2-x^2} \text{d}x = \frac{1}{2a} \ln{|\frac{a+x}{a-x}|} + C$<ul><li>$\int \frac{1}{x^2-a^2} \text{d}x = \frac{1}{2a} \ln{|\frac{x-a}{x+a}|} + C$</li></ul></li><li>$\int \sqrt{a^2-x^2} \text{d}x = \frac{a^2}{2} \arcsin{\frac{x}{a}} + \frac{x}{2} \sqrt{a^2-x^2} + C$</li><li>$\int sin^2xdx=\frac{x}{2}-\frac{sin2x}{4}+C$；$sin^2=\frac{1-cos2x}{2}$<ul><li>$\int cos^2xdx=\frac{x}{2}+\frac{sin2x}{4}+C$；$cos^2=\frac{1+cos2x}{2}$</li><li>$\int tan^2xdx=tanx-x+C$；$tan^2=sec^2x-1$</li><li>$\int cot^2xdx=-cotx-x+C$；$cot^2=csc^2x-1$ </li></ul></li></ol><h4 id="2）换元法"><a href="#2）换元法" class="headerlink" title="2）换元法"></a>2）换元法</h4><ul><li>三角代换<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146310.png" alt="image-20220219101101502" style="zoom:45%;" /> （可能需要先恒等变形）</li><li>根号里面没有平方换不了元的，整个令成t</li><li>分母次数很高，倒代换</li><li>复杂函数直接代换，比如arcsin</li></ul><h4 id="3）分部积分"><a href="#3）分部积分" class="headerlink" title="3）分部积分"></a>3）分部积分</h4><ul><li><p>反对幂指三，越往左越当u，易求导</p></li><li><p>错位相乘，正负相间 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146311.png" alt="image-20220219104811361" style="zoom:25%;" /></p></li></ul><h4 id="4）有理函数"><a href="#4）有理函数" class="headerlink" title="4）有理函数"></a>4）有理函数</h4><ul><li>分数形式，没有根号，有理函数形式，上面次数比下面小</li><li><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146312.png" alt="image-20220220102748983" style="zoom:40%;" /></li><li>解待定系数时候不需要硬解，可以设出来一些x值巧妙消掉几个字母</li></ul><h4 id="5）定积分"><a href="#5）定积分" class="headerlink" title="5）定积分"></a>5）定积分</h4><ul><li><strong>区间再现</strong>公式：$\int_a^bf(x)dx=\int_a^bf(a+b-x)dx$ 。<ul><li>要求函数连续</li><li>一般是两个加起来好做</li></ul></li><li><strong>点火公式</strong>: $I = \int_0^{\frac{\pi}{2}} \sin^n{x} \mathrm{d}x=\begin{cases}\frac{n-1}{n} \frac{n-3}{n-2} … \frac{1}{2} \cdot \frac{\pi}{2}&amp;,n为偶数(\ge2)\\\frac{n-1}{n} \frac{n-3}{n-2} … \frac{2}{3} \cdot 1&amp;,n为奇数(\ge3)\end{cases}$ 。cos的公式完全一致</li><li>点火公式有x挡着：$\int_0^{nT}xf(x)dx=\frac{n^2T}{2}\int_0^Tf(x)dx$ </li><li><strong>扩大范围</strong>点火公式：$\begin{cases}\int_0^\pi sin^nxdx=2\int_0^{\frac{\pi}{2}} \sin^n{x}dx\\ \int_0^\pi cos^nxdx=\begin{cases}0&amp;,n为正奇数 \\2\int_0^{\frac{\pi}{2}} \cos^n{x}dx&amp;,n为正偶数\end{cases}\\ \int_0^{2\pi}sin^nxdx=\int_0^{2\pi}cos^nxdx=\begin{cases}0&amp;,n为正奇数 \\4\int_0^{\frac{\pi}{2}} \sin^n{x}dx&amp;,n为正偶数 \end{cases}\end{cases}$ </li></ul><h2 id="九、积分几何应用"><a href="#九、积分几何应用" class="headerlink" title="九、积分几何应用"></a>九、积分几何应用</h2><h3 id="1-平面面积"><a href="#1-平面面积" class="headerlink" title="1.平面面积"></a>1.平面面积</h3><ul><li>射线旋转出来的面积：$S=\int_\alpha^\beta \frac{1}{2}|r_2^2-r_1^2|d\theta$ <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146313.png" alt="image-20220220154049347" style="zoom:25%;" /></li><li>参数方程算面积，都转换到t，y直接带y(t)，dx化为X’(t)dt。（范围也化成t的范围）</li></ul><h3 id="2-旋转体体积"><a href="#2-旋转体体积" class="headerlink" title="2.旋转体体积"></a>2.旋转体体积</h3><ul><li>绕y旋转用一堆空心圆柱来算 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146314.png" alt="image-20220220164134432" style="zoom:20%;" /> </li></ul><h3 id=""><a href="#" class="headerlink" title=" "></a> </h3><h2 id="十、积分等式与不等式"><a href="#十、积分等式与不等式" class="headerlink" title="十、积分等式与不等式"></a>十、积分等式与不等式</h2><ul><li>等式<ul><li>中值定理：<ul><li>f,g在$[a,b]$上<strong>连续且g不变号</strong>，至少存在一点$\xi\in[a,b]$，使得$\int_a^bf(x)g(x)dx=f(\xi)\int_a^bg(x)dx$ </li><li>用柯西中值定理证，设出来变上限积分往里带</li></ul></li><li>夹逼准则：见到<strong>带极限的积分</strong>考虑夹逼。极限和积分号不能轻易换！！！</li></ul></li><li>不等式<ul><li>函数单调性：上下限都是常数，上限换为x，变上限积分求单调性</li><li>拉格朗日</li><li>泰勒公式</li><li>积分法</li></ul></li></ul><h2 id="十一、多元函数微分"><a href="#十一、多元函数微分" class="headerlink" title="十一、多元函数微分"></a>十一、多元函数微分</h2><h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><ul><li>平面点集<ul><li>内点，聚点（边界点）</li></ul></li><li><p>可微：$\lim\limits_{\Delta x\to 0,\Delta y\to0}\frac{f(x+\Delta x,y+\Delta y)-f(x,y)}{\sqrt{\Delta x^2+\Delta y^2}}=0$ </p><ul><li>判定定理 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:08:06-10:58:32-image-20220806105810731.png" alt="image-20220806105810731" style="zoom:30%;" /></li><li>互推关系 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:08:06-11:13:00-image-20220806111243761.png" alt="image-20220806111243761" style="zoom:30%;" /></li></ul></li><li><p>偏导数连续性：$\lim\limits_{x\to0}f_x’(x,y)=f’_x(0,y)$，y同理</p></li></ul><h3 id="2-多元函数微分法则"><a href="#2-多元函数微分法则" class="headerlink" title="2.多元函数微分法则"></a>2.多元函数微分法则</h3><ul><li><p>链式求导规则 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146315.png" alt="image-20220222222551924" style="zoom:25%;" /></p></li><li><p>隐函数存在定理（公式法）：$\frac{dy}{dx}=-\frac{F_x’}{F_y’}$ </p><ul><li><p>例：已知两个偏导数，求原函数</p><ul><li>积回去一个，设出来另一个</li><li><p>用设出来的函数再往回积</p><blockquote><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146316.png" alt="image-20220222232612930" style="zoom:25%;" /></p></blockquote></li></ul></li></ul></li></ul><h3 id="3-多元函数极值与最值"><a href="#3-多元函数极值与最值" class="headerlink" title="3.多元函数极值与最值"></a>3.多元函数极值与最值</h3><ul><li>概念</li><li>无条件极值：先求出<strong>可疑点</strong>，再求偏导<strong>验证</strong><ul><li>必要条件：一阶偏导数存在且为0</li><li>充分条件：$\Delta=AC-B^2=\begin{cases}&gt;0&amp;极值\begin{cases}A<0&极大值\\A>0&amp;极小值\end{cases}\\&lt;0&amp;非极值\\=0&amp;方法失效，另谋他法\end{cases}$  </li></ul></li><li>条件极值与拉格朗日乘数法<ul><li>闭区域边界上的最值</li><li>闭区域上的最值</li></ul></li></ul><h2 id="十二、二重积分"><a href="#十二、二重积分" class="headerlink" title="十二、二重积分"></a>十二、二重积分</h2><h3 id="1-概念-2"><a href="#1-概念-2" class="headerlink" title="1.概念"></a>1.概念</h3><ul><li>轮换对称性</li></ul><h3 id="2-计算-2"><a href="#2-计算-2" class="headerlink" title="2.计算"></a>2.计算</h3><ul><li>直角坐标系</li><li>极坐标系：$d\sigma=d\theta \cdot rdr$，<strong>别忘了r！！！</strong> <ul><li>看有没有$x^2+y^2或者\frac{x}{y}或者\frac{y}{x}$的形式</li><li>看积分区域是否圆</li></ul></li><li>积分次序<ul><li>常见积不出来的函数。调整积分次序<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146317.png" alt="image-20220223191644151" style="zoom:25%;" /> </li></ul></li><li>二重积分处理一元积分问题</li></ul><h2 id="十三、微分方程"><a href="#十三、微分方程" class="headerlink" title="十三、微分方程"></a>十三、微分方程</h2><h3 id="1-概念-3"><a href="#1-概念-3" class="headerlink" title="1.概念"></a>1.概念</h3><ul><li><p>通解：解中独立常数的个数等于阶数</p></li><li><p>特解：通过初始条件确定通解中常数的值</p></li></ul><h3 id="2-一阶求解"><a href="#2-一阶求解" class="headerlink" title="2.一阶求解"></a>2.一阶求解</h3><ul><li><p>变量可分离</p><ul><li>x和y可以完全拆开，则物以类聚，然后两边积分</li><li>解题过程中可能人为限制了条件，所以通解不一定覆盖全部解，还有奇解</li></ul></li><li><p>可化为变量可分离</p><ul><li>$\frac{dy}{dx}=f(ax+by+c)$，令$u=ax+by+c$，则有$\frac{du}{dx}=a+bf(u)$ </li><li>齐次型：可以整体换元的</li></ul></li><li><p>一阶线性微分方程</p><ul><li><p>对于$y’+py=q$，$y=e^{-\int pdx}[\int e^{\int pdx}\cdot qdx+C]$ </p></li><li><p><strong>lnu注意绝对值！</strong>一阶这里不加绝对值，其他时候加绝对值</p></li><li><p>例：求$y’+1=e^{-y}sinx$的通解</p><blockquote><p>$e^y\cdot y’+e^y=sinx$，即$(e^y)’+e^y=sinx$ </p></blockquote></li></ul></li><li><p>伯努利方程</p><ul><li>$y’+py=q\cdot y^n$ <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146318.png" alt="image-20220223222751901" style="zoom:33%;" /> </li></ul></li></ul><h3 id="3-二阶可降阶求解"><a href="#3-二阶可降阶求解" class="headerlink" title="3.二阶可降阶求解"></a>3.二阶可降阶求解</h3><ul><li>缺y型：$y’’=f(x,y’)$，没有y，正常算y’，再求y</li><li>缺x型：$y’’=f(y,y’)$，没有x，<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146319.png" alt="image-20220223225437032" style="zoom:25%;" /> </li><li>两种题型只是<strong>p代的形式不同</strong> </li></ul><h3 id="4-高阶"><a href="#4-高阶" class="headerlink" title="4.高阶"></a>4.高阶</h3><ul><li><p>概念</p><ul><li>y’\y前面都是数字，是常系数</li><li>后面分离出y’’\y’\y，自由项恒为0则为齐次，否则非齐次</li></ul></li><li><p>解的结构</p><ul><li><p>两个线性无关的解，线性组合是通解</p></li><li><p>齐次通解 + 特解 = 非齐次特解。自由项可拆，特解相加</p></li><li><p>特解形式： $y’’+py’+qy=0$ 求$\Delta$，$y_{齐通}=\begin{cases} C_1e^{\lambda_1x}+C_2e^{\lambda_2x}&amp;\Delta&gt;0\\ (C_1+C_2x)e^{\lambda x}&amp;\Delta=0\\ e^{\alpha x}(C_1cos\beta x+C_2sin\beta x)&amp;\Delta&lt;0 \end{cases}$ </p><ul><li><p>$\alpha$：解的实部；$\beta$：解的虚部</p><blockquote><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146320.png" alt="image-20220302204304394" style="zoom:30%;" /></p><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146321.png" alt="image-20220303095129056" style="zoom:30%;" /></p></blockquote></li></ul></li></ul></li></ul><ul><li><p>二阶常系数齐次线性-通解</p></li><li><p>二阶常系数非齐次线性-特解</p></li><li><p>n阶常系数齐次线性-解</p></li></ul><h2 id="十四、级数"><a href="#十四、级数" class="headerlink" title="十四、级数"></a>十四、级数</h2><h3 id="1-常数项级数敛散性"><a href="#1-常数项级数敛散性" class="headerlink" title="1.常数项级数敛散性"></a>1.常数项级数敛散性</h3><ul><li><p>正项级数：所有项非负</p><ul><li><p>收敛原则：收敛$\iff$有上界</p></li><li><p>比较判别法</p><blockquote><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146322.png" alt="image-20220303161148444" style="zoom:25%;" /></p><p>广义p-级数：$\sum\limits_2^\infty\frac{1}{n(ln\ n)^p}\;\;\;\begin{cases}p&gt;1&amp;收敛\\p\le1&amp;发散\end{cases}$ </p></blockquote></li><li><p>比较判别法的极限形式</p><ul><li>比值极限为A，A为常数二者同敛散</li></ul></li><li><p>比值判别法（达朗贝尔）</p><ul><li>通项后一项比它 求极限，极限<1收敛，>1发散，=1无法判别</li><li><strong>通项里带n+1次方或者比值的时候好用</strong> </li></ul></li><li><p>根植判别法（柯西）</p><ul><li>开n次跟号，小于1收敛，大于1发散，等于1无法判别</li><li><strong>次数越高越方便</strong> </li></ul></li></ul></li><li><p>交错级数</p><ul><li>莱布尼茨判别法：通项绝对值单调不增，趋于0</li><li><strong>造正负号，讨论单调性</strong> </li></ul></li><li><p>任意项级数</p><ul><li>绝对收敛：加绝对值后收敛</li><li>条件收敛：本身收敛，加绝对值后发散</li><li><strong>看见平方项想到基本不等式！</strong> </li></ul></li></ul><h3 id="2-幂级数"><a href="#2-幂级数" class="headerlink" title="2.幂级数"></a>2.幂级数</h3><ul><li><p>收敛域</p><ul><li><p>阿贝尔定理：<strong>两个点单独讨论！</strong> </p><blockquote><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146323.png" alt="image-20220304085403041" style="zoom:35%;" /></p></blockquote></li><li><p>收敛域求法：$\lim\limits_{n\to\infty}|\frac{a_{n+1}}{a_n}|=\rho$，$R=\frac{1}{\rho}$ </p><ul><li>$\lim\limits_{n\to\infty}\frac{|u_{n+1}(x)|}{|u_n(x)|}=\rho，或者开n次跟号$，令其&lt;1，得到的开区间就是收敛域。再判断端点</li><li>条件收敛的半径就是收敛半径<ol><li>乘除因式$(x-x_0)^k$ 或者平移，半径不变</li><li>逐项求导，半径不变，收敛域可能缩小</li><li>逐项积分，半径不变，收敛域可能扩大</li></ol></li></ul></li></ul></li><li><p>求和函数</p><ul><li><p>运算法则</p><ul><li>通项和下标都相同才能加减</li><li>通项下标一起变 $\sum\limits_{n=k}^\infty a_nx^n=\sum\limits_{n=k+l}^\infty a_{n-l}x^{n-l}$ </li><li>只变下标：拆出来前n项</li><li>只变通项：提出来n次幂</li></ul></li><li><p>重要展开式</p><ul><li><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146324.png" alt="image-20220304101331110" style="zoom:40%;" /></li><li><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146325.png" alt="image-20220304101234921" style="zoom:40%;" /></li></ul></li><li><p>做法：</p><ul><li><p>先导后积（用变限积分避免+C）（<strong>n在分母上</strong>）</p><blockquote><p>$\int_{x_0}^xS’(t)dt=S(t)|_{x_0}^x=S(x)-S(x_0)$ 因此 $S(x)=S(x_0)+\int_{x_0}^xS’(t)dt$。$x_0$通常选为中心点，好算</p></blockquote></li><li><p>先积后导（<strong>n在分子上</strong>）</p></li></ul></li></ul></li><li><p>函数展开成幂级数</p><ul><li>求法<ul><li>直接：麦克劳林公式展开</li><li>间接：利用已知展开式，变量代换、四则运算、求导积分、待定系数</li></ul></li></ul></li></ul><h2 id="十五、数一数二专题"><a href="#十五、数一数二专题" class="headerlink" title="十五、数一数二专题"></a>十五、数一数二专题</h2><h3 id="1-微分"><a href="#1-微分" class="headerlink" title="1.微分"></a>1.微分</h3><ul><li><p>物理应用</p></li><li><p><strong>相关变化率</strong>：$\frac{dy}{dt}=\frac{dy}{dx}\cdot\frac{dx}{dt}$ </p><blockquote><p>例：<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146326.png" alt="image-20220304132010923" style="zoom:33%;" /></p></blockquote></li><li><p>几何应用：曲率$k=\frac{|y’’|}{[1+(y’)^2]^\frac{3}{2}}$，曲率半径$R=\frac{1}{k}$ </p><ul><li>参数方程公式：$k=\frac{|y’’x’-y’x’’|}{(x’^2+y’^2)^\frac{3}{2}}$</li></ul></li></ul><h3 id="2-积分"><a href="#2-积分" class="headerlink" title="2.积分"></a>2.积分</h3><ul><li><p>物理应用</p><ul><li><p>抽水做功$W=x\cdot\int_a^b\rho gA(x)dx=\rho g\int_a^bxA(x)dx$ </p></li><li><p>水压力$F=\int_a^b\rho gx\cdot[f(x)-h(x)]dx$ </p><blockquote><p>例：<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146327.png" alt="image-20220304134700776" style="zoom:33%;" /></p></blockquote></li></ul></li><li><p>几何应用</p><ul><li>平面上的曲边梯形 形心坐标公式 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146328.png" alt="image-20220304135107229" style="zoom:33%;" /></li><li>平面曲线弧长 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146329.png" alt="image-20220304135632785" style="zoom:33%;" /></li><li>旋转曲面表面积     <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146330.png" alt="image-20220304143235100" style="zoom:33%;" /></li><li>平行截面面积已知的立体体积</li></ul></li></ul><h3 id="3-欧拉方程"><a href="#3-欧拉方程" class="headerlink" title="3.欧拉方程"></a>3.欧拉方程</h3><p>形如$x^2y’’+pxy’+qy=f(x)$。解法：x&gt;0时令$x=e^t$，x&lt;0时令$x=-e^t$，方程化为$y’’_t+(p-1)y’_t+qy=f(e^x)$。</p><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:08:05-20:18:41-image-20220805201804058.png" alt="image-20220805201804058" style="zoom: 35%;" /></p><h3 id="4-傅立叶级数"><a href="#4-傅立叶级数" class="headerlink" title="4.傅立叶级数"></a>4.傅立叶级数</h3><ul><li><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146331.png" alt="image-20220304164107852" style="zoom:33%;" /> $\begin{cases}a_n=\frac{1}{l}\int_{-l}^lf(x)cos\frac{n\pi}{l}xdx,&amp;n=0,1,2…\\b_n=\frac{1}{l}\int_{-l}^lf(x)sin\frac{n\pi}{l}xdx,&amp;n=0,1,2…\\a_0=\frac{1}{l}\int_{-l}^lf(x)dx\end{cases}$ </li><li>定义域给一半，要求展开成正线级数或者余弦级数，按要求延拓再展开</li></ul><h2 id="十六、空间解析几何"><a href="#十六、空间解析几何" class="headerlink" title="十六、空间解析几何"></a>十六、空间解析几何</h2><h3 id="1-向量"><a href="#1-向量" class="headerlink" title="1.向量"></a>1.向量</h3><ul><li><strong>向量积</strong>：<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146332.png" alt="image-20220304195443884" style="zoom:30%;" /></li><li>混合积 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146333.png" alt="image-20220304195707356" style="zoom:33%;" /></li><li>方向角和<strong>方向余弦</strong> <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146334.png" alt="image-20220304195834666" style="zoom:33%;" /></li></ul><h3 id="2-平面与直线"><a href="#2-平面与直线" class="headerlink" title="2.平面与直线"></a>2.平面与直线</h3><ul><li><p>平面方程</p><blockquote><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146335.png" alt="image-20220304200430063" style="zoom:40%;" /></p></blockquote></li><li><p>直线方程</p><blockquote><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146336.png" alt="image-20220304200733367" style="zoom:40%;" /></p></blockquote></li><li><p>点面距离：$d=\frac{|Ax_0+By_0+Cz_0+D|}{\sqrt{A^2+B^2+C^2}}$ </p></li><li><p>点线距离：向量叉乘，得到向量的模长为平四面积 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:08:09-15:59:23-image-20220809155855994.png" alt="image-20220809155855994" style="zoom:40%;" /> </p></li></ul><h3 id="3-曲线与曲面"><a href="#3-曲线与曲面" class="headerlink" title="3.曲线与曲面"></a>3.曲线与曲面</h3><ul><li>空间曲线在坐标面上投影：联立$\begin{cases}F(x,y,z)=0\\G(x,y,z)=0\end{cases}$，消去z得到$\phi(x,y)=0$，则投影为$\begin{cases}\phi(x,y)=0\\z=0\end{cases}$ </li></ul><h3 id="4-曲面与曲面"><a href="#4-曲面与曲面" class="headerlink" title="4.曲面与曲面"></a>4.曲面与曲面</h3><ul><li><p>二次曲面</p><ul><li>椭球面 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146337.png" alt="image-20220304202328359" style="zoom:33%;" /></li><li>单叶双曲面 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146338.png" alt="image-20220304202444545" style="zoom:33%;" /></li><li>双叶双曲面 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146339.png" alt="image-20220304202540039" style="zoom:33%;" /> </li><li>椭圆抛物面 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146340.png" alt="image-20220304202758884" style="zoom:33%;" /></li><li>椭圆锥面 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146341.png" alt="image-20220304203041999" style="zoom:33%;" /></li><li>双曲抛物面（马鞍面） <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146356.png" alt="image-20220304203319488" style="zoom:33%;" /></li></ul></li><li><p>柱面 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146357.png" alt="image-20220304203534454" style="zoom:40%;" /></p></li><li><p>旋转曲面：绕谁转谁不变，另一个字母写成另外两个字母的平方和开根号</p></li><li><blockquote><p><img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146358.png" alt="image-20220304204422876" style="zoom: 33%;" /></p></blockquote></li><li><p>例：<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146359.png" alt="image-20220304205216327" style="zoom:33%;" /></p></li></ul><h3 id="5-多元微分几何应用"><a href="#5-多元微分几何应用" class="headerlink" title="5.多元微分几何应用"></a>5.多元微分几何应用</h3><ul><li>==“切一刀，转一圈，投下来”==</li><li>曲线的切线与法平面<ul><li>参数方程给出：三个参数方程求导就是切向量</li><li>交面式方程给出 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146360.png" alt="image-20220305080443286" style="zoom:33%;" /></li></ul></li><li>曲面的切面与法线<ul><li>隐式给出：曲面对xyz求偏导就是法向量</li><li>显式给出：<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146361.png" alt="image-20220305081518653" style="zoom:33%;" /></li></ul></li></ul><h3 id="6-场论"><a href="#6-场论" class="headerlink" title="6.场论"></a>6.场论</h3><ul><li>方向导数 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146362.png" alt="image-20220305083253965" style="zoom:40%;" /> 梯度点乘方向向量</li><li>散度旋度 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146363.png" alt="image-20220305084308586" style="zoom:33%;" /></li></ul><h2 id="十七、线面积分"><a href="#十七、线面积分" class="headerlink" title="十七、线面积分"></a>十七、线面积分</h2><h3 id="1-三重积分"><a href="#1-三重积分" class="headerlink" title="1.三重积分"></a>1.三重积分</h3><blockquote><p>曲面积分是一个面，表达式只有等号，而三重积分是一个体，小于等于号</p></blockquote><ul><li><p>计算</p><ul><li><p>基础方法</p><ul><li><p>直角坐标系</p><ul><li><p>先z后xy：<strong>有上下面，侧面没有或者是柱面</strong> </p><blockquote><p>积分时候xy写前面，z写后面先积分，用z的上下限</p></blockquote></li><li><p>先xy后z(定限截面法)：<strong>旋转体</strong></p></li></ul></li><li><p>柱面坐标系：一个定积分+极坐标系下的二重积分</p></li><li><p>球面坐标系：记得乘$r^2sin\phi$，$\begin{cases}x=rsin\phi cos\theta\\y=rsin\phi sin\theta\\z=rcos\phi\end{cases}$ </p></li></ul></li><li><p>技术方法</p><ul><li>对称性</li><li>形心公式逆用：规则几何体的三重积分可以用形心和体积计算</li></ul></li></ul></li></ul><h3 id="2-一型曲线积分"><a href="#2-一型曲线积分" class="headerlink" title="2.一型曲线积分"></a>2.一型曲线积分</h3><ul><li>概念性质<ul><li>概念：沿着一条曲线路径进行定积分<strong>(ds)</strong> <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146364.png" alt="image-20220308081455335" style="zoom:20%;" /> </li></ul></li></ul><h3 id="3-一型曲面积分"><a href="#3-一型曲面积分" class="headerlink" title="3.一型曲面积分"></a>3.一型曲面积分</h3><ul><li><p>概念：密度不均匀曲面片的质量<strong>（dS）</strong> </p></li><li><p>计算</p><ul><li>化为二重积分：<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146365.png" alt="image-20220308220011588" style="zoom:20%;" /> </li></ul></li><li>应用<ul><li>几何量<ul><li>面积：例：<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146366.png" alt="image-20220308224306051" style="zoom:25%;" /> </li></ul></li><li>转动惯量<ul><li>空间物体：$I_x=\iiint_\Omega (y^2+z^2)\rho(x,y,z)dv$。<strong>其他两个字母的平方和</strong>以及$\rho$来算三重积分</li></ul></li><li>引力<ul><li>空间物体：$F_x=Gm\iiint_\Omega\frac{\rho(x,y,z)(x-x_0)}{[(x-x_0)^2+(y-y_0)^2+(z-z_0)^2]^{\frac{3}{2}}}d v$。下面分母是<strong>距离的三次方</strong></li></ul></li></ul></li></ul><h3 id="4-二型曲线积分"><a href="#4-二型曲线积分" class="headerlink" title="4.二型曲线积分"></a>4.二型曲线积分</h3><ul><li><p>概念性质</p><ul><li>概念：$W=\int_{A\to B}Pdx+Qdy+rdz$ <strong>（有起点终点）</strong></li></ul></li><li><p>计算</p><ul><li><p>化为定积分：它的对称性需要一点一点理解</p><blockquote><p>对称性：<img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146367.png" alt="image-20220309075313192" style="zoom:25%;" /></p></blockquote></li><li><p><strong>格林公式</strong>：封闭曲线，左手在区域内，PQ有一阶连续偏导</p><ul><li><p>$\oint\limits_LPdx+Qdy=\iint\limits_D(Q_x-P_y)d\sigma$ </p></li><li><p>==看好谁是P谁是Q！！== </p></li><li><p>例：</p><blockquote><p>注意看正负怎么取的 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img/202204020146368.png" alt="image-20220309231459992" style="zoom:25%;" /></p></blockquote></li></ul></li></ul></li></ul><h3 id="5-二型曲面积分"><a href="#5-二型曲面积分" class="headerlink" title="5.二型曲面积分"></a>5.二型曲面积分</h3><ul><li><p>计算</p><ul><li>化为二重积分（一投二代三计算）<ul><li>坐标轴的正方向和规定的正向量方向成锐角则为正</li></ul></li><li><strong>高斯公式</strong>：封闭曲面，取外侧，PQR都有一阶连续偏导<ul><li>$\oint_{\sum_{外}}Pdydz+Qdzdx+Rdxdy=\iiint\limits_\Omega(P_x+Q_y+R_z)dV$ </li></ul></li></ul></li><li><p>空间第二型曲线积分计算：<strong>斯托克斯公式</strong></p><ul><li><p>把空间封闭曲线的二型线积分转换为绷在此环上任何一个面的一型面积分</p><blockquote><p>公式 <img src="https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:08:10-16:19:55-image-20220810161922039.png" alt="image-20220810161922039" style="zoom:30%;" /></p><p>环的右手系确定向量方向，单位化就是行列式第一行</p></blockquote></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>考研</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
